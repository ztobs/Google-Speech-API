<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/cloud/speech/v1beta1/cloud_speech.proto
//   Date: 2016-12-21 23:03:58

namespace google\cloud\speech\v1beta1 {

  class SyncRecognizeRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\speech\v1beta1\RecognitionConfig */
    public $config = null;
    
    /**  @var \google\cloud\speech\v1beta1\RecognitionAudio */
    public $audio = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.SyncRecognizeRequest');

      // OPTIONAL MESSAGE config = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\speech\v1beta1\RecognitionConfig';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE audio = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "audio";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\speech\v1beta1\RecognitionAudio';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <config> has a value
     *
     * @return boolean
     */
    public function hasConfig(){
      return $this->_has(1);
    }
    
    /**
     * Clear <config> value
     *
     * @return \google\cloud\speech\v1beta1\SyncRecognizeRequest
     */
    public function clearConfig(){
      return $this->_clear(1);
    }
    
    /**
     * Get <config> value
     *
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function getConfig(){
      return $this->_get(1);
    }
    
    /**
     * Set <config> value
     *
     * @param \google\cloud\speech\v1beta1\RecognitionConfig $value
     * @return \google\cloud\speech\v1beta1\SyncRecognizeRequest
     */
    public function setConfig(\google\cloud\speech\v1beta1\RecognitionConfig $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <audio> has a value
     *
     * @return boolean
     */
    public function hasAudio(){
      return $this->_has(2);
    }
    
    /**
     * Clear <audio> value
     *
     * @return \google\cloud\speech\v1beta1\SyncRecognizeRequest
     */
    public function clearAudio(){
      return $this->_clear(2);
    }
    
    /**
     * Get <audio> value
     *
     * @return \google\cloud\speech\v1beta1\RecognitionAudio
     */
    public function getAudio(){
      return $this->_get(2);
    }
    
    /**
     * Set <audio> value
     *
     * @param \google\cloud\speech\v1beta1\RecognitionAudio $value
     * @return \google\cloud\speech\v1beta1\SyncRecognizeRequest
     */
    public function setAudio(\google\cloud\speech\v1beta1\RecognitionAudio $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1 {

  class AsyncRecognizeRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\speech\v1beta1\RecognitionConfig */
    public $config = null;
    
    /**  @var \google\cloud\speech\v1beta1\RecognitionAudio */
    public $audio = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.AsyncRecognizeRequest');

      // OPTIONAL MESSAGE config = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\speech\v1beta1\RecognitionConfig';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE audio = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "audio";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\speech\v1beta1\RecognitionAudio';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <config> has a value
     *
     * @return boolean
     */
    public function hasConfig(){
      return $this->_has(1);
    }
    
    /**
     * Clear <config> value
     *
     * @return \google\cloud\speech\v1beta1\AsyncRecognizeRequest
     */
    public function clearConfig(){
      return $this->_clear(1);
    }
    
    /**
     * Get <config> value
     *
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function getConfig(){
      return $this->_get(1);
    }
    
    /**
     * Set <config> value
     *
     * @param \google\cloud\speech\v1beta1\RecognitionConfig $value
     * @return \google\cloud\speech\v1beta1\AsyncRecognizeRequest
     */
    public function setConfig(\google\cloud\speech\v1beta1\RecognitionConfig $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <audio> has a value
     *
     * @return boolean
     */
    public function hasAudio(){
      return $this->_has(2);
    }
    
    /**
     * Clear <audio> value
     *
     * @return \google\cloud\speech\v1beta1\AsyncRecognizeRequest
     */
    public function clearAudio(){
      return $this->_clear(2);
    }
    
    /**
     * Get <audio> value
     *
     * @return \google\cloud\speech\v1beta1\RecognitionAudio
     */
    public function getAudio(){
      return $this->_get(2);
    }
    
    /**
     * Set <audio> value
     *
     * @param \google\cloud\speech\v1beta1\RecognitionAudio $value
     * @return \google\cloud\speech\v1beta1\AsyncRecognizeRequest
     */
    public function setAudio(\google\cloud\speech\v1beta1\RecognitionAudio $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1 {

  class StreamingRecognizeRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\speech\v1beta1\StreamingRecognitionConfig */
    public $streaming_config = null;
    
    /**  @var string */
    public $audio_content = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.StreamingRecognizeRequest');

      // OPTIONAL MESSAGE streaming_config = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "streaming_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\speech\v1beta1\StreamingRecognitionConfig';
      $descriptor->addField($f);

      // OPTIONAL BYTES audio_content = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "audio_content";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <streaming_config> has a value
     *
     * @return boolean
     */
    public function hasStreamingConfig(){
      return $this->_has(1);
    }
    
    /**
     * Clear <streaming_config> value
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognizeRequest
     */
    public function clearStreamingConfig(){
      return $this->_clear(1);
    }
    
    /**
     * Get <streaming_config> value
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionConfig
     */
    public function getStreamingConfig(){
      return $this->_get(1);
    }
    
    /**
     * Set <streaming_config> value
     *
     * @param \google\cloud\speech\v1beta1\StreamingRecognitionConfig $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognizeRequest
     */
    public function setStreamingConfig(\google\cloud\speech\v1beta1\StreamingRecognitionConfig $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <audio_content> has a value
     *
     * @return boolean
     */
    public function hasAudioContent(){
      return $this->_has(2);
    }
    
    /**
     * Clear <audio_content> value
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognizeRequest
     */
    public function clearAudioContent(){
      return $this->_clear(2);
    }
    
    /**
     * Get <audio_content> value
     *
     * @return string
     */
    public function getAudioContent(){
      return $this->_get(2);
    }
    
    /**
     * Set <audio_content> value
     *
     * @param string $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognizeRequest
     */
    public function setAudioContent( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1 {

  class StreamingRecognitionConfig extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\speech\v1beta1\RecognitionConfig */
    public $config = null;
    
    /**  @var boolean */
    public $single_utterance = null;
    
    /**  @var boolean */
    public $interim_results = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.StreamingRecognitionConfig');

      // OPTIONAL MESSAGE config = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\speech\v1beta1\RecognitionConfig';
      $descriptor->addField($f);

      // OPTIONAL BOOL single_utterance = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "single_utterance";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL interim_results = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "interim_results";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <config> has a value
     *
     * @return boolean
     */
    public function hasConfig(){
      return $this->_has(1);
    }
    
    /**
     * Clear <config> value
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionConfig
     */
    public function clearConfig(){
      return $this->_clear(1);
    }
    
    /**
     * Get <config> value
     *
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function getConfig(){
      return $this->_get(1);
    }
    
    /**
     * Set <config> value
     *
     * @param \google\cloud\speech\v1beta1\RecognitionConfig $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionConfig
     */
    public function setConfig(\google\cloud\speech\v1beta1\RecognitionConfig $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <single_utterance> has a value
     *
     * @return boolean
     */
    public function hasSingleUtterance(){
      return $this->_has(2);
    }
    
    /**
     * Clear <single_utterance> value
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionConfig
     */
    public function clearSingleUtterance(){
      return $this->_clear(2);
    }
    
    /**
     * Get <single_utterance> value
     *
     * @return boolean
     */
    public function getSingleUtterance(){
      return $this->_get(2);
    }
    
    /**
     * Set <single_utterance> value
     *
     * @param boolean $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionConfig
     */
    public function setSingleUtterance( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <interim_results> has a value
     *
     * @return boolean
     */
    public function hasInterimResults(){
      return $this->_has(3);
    }
    
    /**
     * Clear <interim_results> value
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionConfig
     */
    public function clearInterimResults(){
      return $this->_clear(3);
    }
    
    /**
     * Get <interim_results> value
     *
     * @return boolean
     */
    public function getInterimResults(){
      return $this->_get(3);
    }
    
    /**
     * Set <interim_results> value
     *
     * @param boolean $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionConfig
     */
    public function setInterimResults( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1\RecognitionConfig {

  class AudioEncoding extends \DrSlump\Protobuf\Enum {
    const ENCODING_UNSPECIFIED = 0;
    const LINEAR16 = 1;
    const FLAC = 2;
    const MULAW = 3;
    const AMR = 4;
    const AMR_WB = 5;
  }
}
namespace google\cloud\speech\v1beta1 {

  class RecognitionConfig extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\cloud\speech\v1beta1\RecognitionConfig\AudioEncoding */
    public $encoding = null;
    
    /**  @var int */
    public $sample_rate = null;
    
    /**  @var string */
    public $language_code = null;
    
    /**  @var int */
    public $max_alternatives = null;
    
    /**  @var boolean */
    public $profanity_filter = null;
    
    /**  @var \google\cloud\speech\v1beta1\SpeechContext */
    public $speech_context = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.RecognitionConfig');

      // OPTIONAL ENUM encoding = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "encoding";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\speech\v1beta1\RecognitionConfig\AudioEncoding';
      $descriptor->addField($f);

      // OPTIONAL INT32 sample_rate = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sample_rate";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING language_code = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "language_code";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 max_alternatives = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "max_alternatives";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL profanity_filter = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "profanity_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE speech_context = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "speech_context";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\speech\v1beta1\SpeechContext';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <encoding> has a value
     *
     * @return boolean
     */
    public function hasEncoding(){
      return $this->_has(1);
    }
    
    /**
     * Clear <encoding> value
     *
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function clearEncoding(){
      return $this->_clear(1);
    }
    
    /**
     * Get <encoding> value
     *
     * @return int - \google\cloud\speech\v1beta1\RecognitionConfig\AudioEncoding
     */
    public function getEncoding(){
      return $this->_get(1);
    }
    
    /**
     * Set <encoding> value
     *
     * @param int - \google\cloud\speech\v1beta1\RecognitionConfig\AudioEncoding $value
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function setEncoding( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sample_rate> has a value
     *
     * @return boolean
     */
    public function hasSampleRate(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sample_rate> value
     *
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function clearSampleRate(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sample_rate> value
     *
     * @return int
     */
    public function getSampleRate(){
      return $this->_get(2);
    }
    
    /**
     * Set <sample_rate> value
     *
     * @param int $value
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function setSampleRate( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <language_code> has a value
     *
     * @return boolean
     */
    public function hasLanguageCode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <language_code> value
     *
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function clearLanguageCode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <language_code> value
     *
     * @return string
     */
    public function getLanguageCode(){
      return $this->_get(3);
    }
    
    /**
     * Set <language_code> value
     *
     * @param string $value
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function setLanguageCode( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <max_alternatives> has a value
     *
     * @return boolean
     */
    public function hasMaxAlternatives(){
      return $this->_has(4);
    }
    
    /**
     * Clear <max_alternatives> value
     *
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function clearMaxAlternatives(){
      return $this->_clear(4);
    }
    
    /**
     * Get <max_alternatives> value
     *
     * @return int
     */
    public function getMaxAlternatives(){
      return $this->_get(4);
    }
    
    /**
     * Set <max_alternatives> value
     *
     * @param int $value
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function setMaxAlternatives( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <profanity_filter> has a value
     *
     * @return boolean
     */
    public function hasProfanityFilter(){
      return $this->_has(5);
    }
    
    /**
     * Clear <profanity_filter> value
     *
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function clearProfanityFilter(){
      return $this->_clear(5);
    }
    
    /**
     * Get <profanity_filter> value
     *
     * @return boolean
     */
    public function getProfanityFilter(){
      return $this->_get(5);
    }
    
    /**
     * Set <profanity_filter> value
     *
     * @param boolean $value
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function setProfanityFilter( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <speech_context> has a value
     *
     * @return boolean
     */
    public function hasSpeechContext(){
      return $this->_has(6);
    }
    
    /**
     * Clear <speech_context> value
     *
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function clearSpeechContext(){
      return $this->_clear(6);
    }
    
    /**
     * Get <speech_context> value
     *
     * @return \google\cloud\speech\v1beta1\SpeechContext
     */
    public function getSpeechContext(){
      return $this->_get(6);
    }
    
    /**
     * Set <speech_context> value
     *
     * @param \google\cloud\speech\v1beta1\SpeechContext $value
     * @return \google\cloud\speech\v1beta1\RecognitionConfig
     */
    public function setSpeechContext(\google\cloud\speech\v1beta1\SpeechContext $value){
      return $this->_set(6, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1 {

  class SpeechContext extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $phrases = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.SpeechContext');

      // REPEATED STRING phrases = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "phrases";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <phrases> has a value
     *
     * @return boolean
     */
    public function hasPhrases(){
      return $this->_has(1);
    }
    
    /**
     * Clear <phrases> value
     *
     * @return \google\cloud\speech\v1beta1\SpeechContext
     */
    public function clearPhrases(){
      return $this->_clear(1);
    }
    
    /**
     * Get <phrases> value
     *
     * @param int $idx
     * @return string
     */
    public function getPhrases($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <phrases> value
     *
     * @param string $value
     * @return \google\cloud\speech\v1beta1\SpeechContext
     */
    public function setPhrases( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <phrases>
     *
     * @return string[]
     */
    public function getPhrasesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <phrases>
     *
     * @param string $value
     * @return \google\cloud\speech\v1beta1\SpeechContext
     */
    public function addPhrases( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1 {

  class RecognitionAudio extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $content = null;
    
    /**  @var string */
    public $uri = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.RecognitionAudio');

      // OPTIONAL BYTES content = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING uri = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uri";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <content> value
     *
     * @return \google\cloud\speech\v1beta1\RecognitionAudio
     */
    public function clearContent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(1);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \google\cloud\speech\v1beta1\RecognitionAudio
     */
    public function setContent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uri> has a value
     *
     * @return boolean
     */
    public function hasUri(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uri> value
     *
     * @return \google\cloud\speech\v1beta1\RecognitionAudio
     */
    public function clearUri(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uri> value
     *
     * @return string
     */
    public function getUri(){
      return $this->_get(2);
    }
    
    /**
     * Set <uri> value
     *
     * @param string $value
     * @return \google\cloud\speech\v1beta1\RecognitionAudio
     */
    public function setUri( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1 {

  class SyncRecognizeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\speech\v1beta1\SpeechRecognitionResult[]  */
    public $results = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.SyncRecognizeResponse');

      // REPEATED MESSAGE results = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "results";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\speech\v1beta1\SpeechRecognitionResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <results> has a value
     *
     * @return boolean
     */
    public function hasResults(){
      return $this->_has(2);
    }
    
    /**
     * Clear <results> value
     *
     * @return \google\cloud\speech\v1beta1\SyncRecognizeResponse
     */
    public function clearResults(){
      return $this->_clear(2);
    }
    
    /**
     * Get <results> value
     *
     * @param int $idx
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionResult
     */
    public function getResults($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <results> value
     *
     * @param \google\cloud\speech\v1beta1\SpeechRecognitionResult $value
     * @return \google\cloud\speech\v1beta1\SyncRecognizeResponse
     */
    public function setResults(\google\cloud\speech\v1beta1\SpeechRecognitionResult $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <results>
     *
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionResult[]
     */
    public function getResultsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <results>
     *
     * @param \google\cloud\speech\v1beta1\SpeechRecognitionResult $value
     * @return \google\cloud\speech\v1beta1\SyncRecognizeResponse
     */
    public function addResults(\google\cloud\speech\v1beta1\SpeechRecognitionResult $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1 {

  class AsyncRecognizeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\speech\v1beta1\SpeechRecognitionResult[]  */
    public $results = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.AsyncRecognizeResponse');

      // REPEATED MESSAGE results = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "results";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\speech\v1beta1\SpeechRecognitionResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <results> has a value
     *
     * @return boolean
     */
    public function hasResults(){
      return $this->_has(2);
    }
    
    /**
     * Clear <results> value
     *
     * @return \google\cloud\speech\v1beta1\AsyncRecognizeResponse
     */
    public function clearResults(){
      return $this->_clear(2);
    }
    
    /**
     * Get <results> value
     *
     * @param int $idx
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionResult
     */
    public function getResults($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <results> value
     *
     * @param \google\cloud\speech\v1beta1\SpeechRecognitionResult $value
     * @return \google\cloud\speech\v1beta1\AsyncRecognizeResponse
     */
    public function setResults(\google\cloud\speech\v1beta1\SpeechRecognitionResult $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <results>
     *
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionResult[]
     */
    public function getResultsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <results>
     *
     * @param \google\cloud\speech\v1beta1\SpeechRecognitionResult $value
     * @return \google\cloud\speech\v1beta1\AsyncRecognizeResponse
     */
    public function addResults(\google\cloud\speech\v1beta1\SpeechRecognitionResult $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1 {

  class AsyncRecognizeMetadata extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $progress_percent = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $start_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $last_update_time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.AsyncRecognizeMetadata');

      // OPTIONAL INT32 progress_percent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "progress_percent";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE start_time = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "start_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE last_update_time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "last_update_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <progress_percent> has a value
     *
     * @return boolean
     */
    public function hasProgressPercent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <progress_percent> value
     *
     * @return \google\cloud\speech\v1beta1\AsyncRecognizeMetadata
     */
    public function clearProgressPercent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <progress_percent> value
     *
     * @return int
     */
    public function getProgressPercent(){
      return $this->_get(1);
    }
    
    /**
     * Set <progress_percent> value
     *
     * @param int $value
     * @return \google\cloud\speech\v1beta1\AsyncRecognizeMetadata
     */
    public function setProgressPercent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <start_time> has a value
     *
     * @return boolean
     */
    public function hasStartTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <start_time> value
     *
     * @return \google\cloud\speech\v1beta1\AsyncRecognizeMetadata
     */
    public function clearStartTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <start_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getStartTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <start_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\cloud\speech\v1beta1\AsyncRecognizeMetadata
     */
    public function setStartTime(\google\protobuf\Timestamp $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <last_update_time> has a value
     *
     * @return boolean
     */
    public function hasLastUpdateTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <last_update_time> value
     *
     * @return \google\cloud\speech\v1beta1\AsyncRecognizeMetadata
     */
    public function clearLastUpdateTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <last_update_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getLastUpdateTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <last_update_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\cloud\speech\v1beta1\AsyncRecognizeMetadata
     */
    public function setLastUpdateTime(\google\protobuf\Timestamp $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1\StreamingRecognizeResponse {

  class EndpointerType extends \DrSlump\Protobuf\Enum {
    const ENDPOINTER_EVENT_UNSPECIFIED = 0;
    const START_OF_SPEECH = 1;
    const END_OF_SPEECH = 2;
    const END_OF_AUDIO = 3;
    const END_OF_UTTERANCE = 4;
  }
}
namespace google\cloud\speech\v1beta1 {

  class StreamingRecognizeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\rpc\Status */
    public $error = null;
    
    /**  @var \google\cloud\speech\v1beta1\StreamingRecognitionResult[]  */
    public $results = array();
    
    /**  @var int */
    public $result_index = null;
    
    /**  @var int - \google\cloud\speech\v1beta1\StreamingRecognizeResponse\EndpointerType */
    public $endpointer_type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.StreamingRecognizeResponse');

      // OPTIONAL MESSAGE error = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "error";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\rpc\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE results = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "results";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\speech\v1beta1\StreamingRecognitionResult';
      $descriptor->addField($f);

      // OPTIONAL INT32 result_index = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "result_index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM endpointer_type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "endpointer_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\speech\v1beta1\StreamingRecognizeResponse\EndpointerType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <error> has a value
     *
     * @return boolean
     */
    public function hasError(){
      return $this->_has(1);
    }
    
    /**
     * Clear <error> value
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognizeResponse
     */
    public function clearError(){
      return $this->_clear(1);
    }
    
    /**
     * Get <error> value
     *
     * @return \google\rpc\Status
     */
    public function getError(){
      return $this->_get(1);
    }
    
    /**
     * Set <error> value
     *
     * @param \google\rpc\Status $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognizeResponse
     */
    public function setError(\google\rpc\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <results> has a value
     *
     * @return boolean
     */
    public function hasResults(){
      return $this->_has(2);
    }
    
    /**
     * Clear <results> value
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognizeResponse
     */
    public function clearResults(){
      return $this->_clear(2);
    }
    
    /**
     * Get <results> value
     *
     * @param int $idx
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionResult
     */
    public function getResults($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <results> value
     *
     * @param \google\cloud\speech\v1beta1\StreamingRecognitionResult $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognizeResponse
     */
    public function setResults(\google\cloud\speech\v1beta1\StreamingRecognitionResult $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <results>
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionResult[]
     */
    public function getResultsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <results>
     *
     * @param \google\cloud\speech\v1beta1\StreamingRecognitionResult $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognizeResponse
     */
    public function addResults(\google\cloud\speech\v1beta1\StreamingRecognitionResult $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <result_index> has a value
     *
     * @return boolean
     */
    public function hasResultIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <result_index> value
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognizeResponse
     */
    public function clearResultIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <result_index> value
     *
     * @return int
     */
    public function getResultIndex(){
      return $this->_get(3);
    }
    
    /**
     * Set <result_index> value
     *
     * @param int $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognizeResponse
     */
    public function setResultIndex( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <endpointer_type> has a value
     *
     * @return boolean
     */
    public function hasEndpointerType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <endpointer_type> value
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognizeResponse
     */
    public function clearEndpointerType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <endpointer_type> value
     *
     * @return int - \google\cloud\speech\v1beta1\StreamingRecognizeResponse\EndpointerType
     */
    public function getEndpointerType(){
      return $this->_get(4);
    }
    
    /**
     * Set <endpointer_type> value
     *
     * @param int - \google\cloud\speech\v1beta1\StreamingRecognizeResponse\EndpointerType $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognizeResponse
     */
    public function setEndpointerType( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1 {

  class StreamingRecognitionResult extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\speech\v1beta1\SpeechRecognitionAlternative[]  */
    public $alternatives = array();
    
    /**  @var boolean */
    public $is_final = null;
    
    /**  @var float */
    public $stability = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.StreamingRecognitionResult');

      // REPEATED MESSAGE alternatives = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "alternatives";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\speech\v1beta1\SpeechRecognitionAlternative';
      $descriptor->addField($f);

      // OPTIONAL BOOL is_final = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "is_final";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT stability = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "stability";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <alternatives> has a value
     *
     * @return boolean
     */
    public function hasAlternatives(){
      return $this->_has(1);
    }
    
    /**
     * Clear <alternatives> value
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionResult
     */
    public function clearAlternatives(){
      return $this->_clear(1);
    }
    
    /**
     * Get <alternatives> value
     *
     * @param int $idx
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionAlternative
     */
    public function getAlternatives($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <alternatives> value
     *
     * @param \google\cloud\speech\v1beta1\SpeechRecognitionAlternative $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionResult
     */
    public function setAlternatives(\google\cloud\speech\v1beta1\SpeechRecognitionAlternative $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <alternatives>
     *
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionAlternative[]
     */
    public function getAlternativesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <alternatives>
     *
     * @param \google\cloud\speech\v1beta1\SpeechRecognitionAlternative $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionResult
     */
    public function addAlternatives(\google\cloud\speech\v1beta1\SpeechRecognitionAlternative $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <is_final> has a value
     *
     * @return boolean
     */
    public function hasIsFinal(){
      return $this->_has(2);
    }
    
    /**
     * Clear <is_final> value
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionResult
     */
    public function clearIsFinal(){
      return $this->_clear(2);
    }
    
    /**
     * Get <is_final> value
     *
     * @return boolean
     */
    public function getIsFinal(){
      return $this->_get(2);
    }
    
    /**
     * Set <is_final> value
     *
     * @param boolean $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionResult
     */
    public function setIsFinal( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <stability> has a value
     *
     * @return boolean
     */
    public function hasStability(){
      return $this->_has(3);
    }
    
    /**
     * Clear <stability> value
     *
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionResult
     */
    public function clearStability(){
      return $this->_clear(3);
    }
    
    /**
     * Get <stability> value
     *
     * @return float
     */
    public function getStability(){
      return $this->_get(3);
    }
    
    /**
     * Set <stability> value
     *
     * @param float $value
     * @return \google\cloud\speech\v1beta1\StreamingRecognitionResult
     */
    public function setStability( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1 {

  class SpeechRecognitionResult extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\speech\v1beta1\SpeechRecognitionAlternative[]  */
    public $alternatives = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.SpeechRecognitionResult');

      // REPEATED MESSAGE alternatives = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "alternatives";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\speech\v1beta1\SpeechRecognitionAlternative';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <alternatives> has a value
     *
     * @return boolean
     */
    public function hasAlternatives(){
      return $this->_has(1);
    }
    
    /**
     * Clear <alternatives> value
     *
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionResult
     */
    public function clearAlternatives(){
      return $this->_clear(1);
    }
    
    /**
     * Get <alternatives> value
     *
     * @param int $idx
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionAlternative
     */
    public function getAlternatives($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <alternatives> value
     *
     * @param \google\cloud\speech\v1beta1\SpeechRecognitionAlternative $value
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionResult
     */
    public function setAlternatives(\google\cloud\speech\v1beta1\SpeechRecognitionAlternative $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <alternatives>
     *
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionAlternative[]
     */
    public function getAlternativesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <alternatives>
     *
     * @param \google\cloud\speech\v1beta1\SpeechRecognitionAlternative $value
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionResult
     */
    public function addAlternatives(\google\cloud\speech\v1beta1\SpeechRecognitionAlternative $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1 {

  class SpeechRecognitionAlternative extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $transcript = null;
    
    /**  @var float */
    public $confidence = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.speech.v1beta1.SpeechRecognitionAlternative');

      // OPTIONAL STRING transcript = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "transcript";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT confidence = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "confidence";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <transcript> has a value
     *
     * @return boolean
     */
    public function hasTranscript(){
      return $this->_has(1);
    }
    
    /**
     * Clear <transcript> value
     *
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionAlternative
     */
    public function clearTranscript(){
      return $this->_clear(1);
    }
    
    /**
     * Get <transcript> value
     *
     * @return string
     */
    public function getTranscript(){
      return $this->_get(1);
    }
    
    /**
     * Set <transcript> value
     *
     * @param string $value
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionAlternative
     */
    public function setTranscript( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <confidence> has a value
     *
     * @return boolean
     */
    public function hasConfidence(){
      return $this->_has(2);
    }
    
    /**
     * Clear <confidence> value
     *
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionAlternative
     */
    public function clearConfidence(){
      return $this->_clear(2);
    }
    
    /**
     * Get <confidence> value
     *
     * @return float
     */
    public function getConfidence(){
      return $this->_get(2);
    }
    
    /**
     * Set <confidence> value
     *
     * @param float $value
     * @return \google\cloud\speech\v1beta1\SpeechRecognitionAlternative
     */
    public function setConfidence( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\speech\v1beta1 {

  class SpeechGrpcClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param google\cloud\speech\v1beta1\SyncRecognizeRequest $input
     */
    public function SyncRecognize(\google\cloud\speech\v1beta1\SyncRecognizeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.cloud.speech.v1beta1.Speech/SyncRecognize', $argument, '\google\cloud\speech\v1beta1\SyncRecognizeResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\cloud\speech\v1beta1\AsyncRecognizeRequest $input
     */
    public function AsyncRecognize(\google\cloud\speech\v1beta1\AsyncRecognizeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.cloud.speech.v1beta1.Speech/AsyncRecognize', $argument, '\google\longrunning\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\cloud\speech\v1beta1\StreamingRecognizeRequest $input
     */
    public function StreamingRecognize($metadata = array(), $options = array()) {
      return $this->_bidiRequest('/google.cloud.speech.v1beta1.Speech/StreamingRecognize', '\google\cloud\speech\v1beta1\StreamingRecognizeResponse::deserialize', $metadata, $options);
    }
  }
}
