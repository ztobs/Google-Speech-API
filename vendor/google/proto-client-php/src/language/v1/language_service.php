<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/cloud/language/v1/language_service.proto
//   Date: 2016-12-21 23:03:52

namespace google\cloud\language\v1 {

  class EncodingType extends \DrSlump\Protobuf\Enum {
    const NONE = 0;
    const UTF8 = 1;
    const UTF16 = 2;
    const UTF32 = 3;
  }
}
namespace google\cloud\language\v1\Document {

  class Type extends \DrSlump\Protobuf\Enum {
    const TYPE_UNSPECIFIED = 0;
    const PLAIN_TEXT = 1;
    const HTML = 2;
  }
}
namespace google\cloud\language\v1 {

  class Document extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\cloud\language\v1\Document\Type */
    public $type = null;
    
    /**  @var string */
    public $content = null;
    
    /**  @var string */
    public $gcs_content_uri = null;
    
    /**  @var string */
    public $language = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.Document');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\Document\Type';
      $descriptor->addField($f);

      // OPTIONAL STRING content = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING gcs_content_uri = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "gcs_content_uri";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING language = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "language";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\cloud\language\v1\Document
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \google\cloud\language\v1\Document\Type
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \google\cloud\language\v1\Document\Type $value
     * @return \google\cloud\language\v1\Document
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(2);
    }
    
    /**
     * Clear <content> value
     *
     * @return \google\cloud\language\v1\Document
     */
    public function clearContent(){
      return $this->_clear(2);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(2);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \google\cloud\language\v1\Document
     */
    public function setContent( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <gcs_content_uri> has a value
     *
     * @return boolean
     */
    public function hasGcsContentUri(){
      return $this->_has(3);
    }
    
    /**
     * Clear <gcs_content_uri> value
     *
     * @return \google\cloud\language\v1\Document
     */
    public function clearGcsContentUri(){
      return $this->_clear(3);
    }
    
    /**
     * Get <gcs_content_uri> value
     *
     * @return string
     */
    public function getGcsContentUri(){
      return $this->_get(3);
    }
    
    /**
     * Set <gcs_content_uri> value
     *
     * @param string $value
     * @return \google\cloud\language\v1\Document
     */
    public function setGcsContentUri( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <language> has a value
     *
     * @return boolean
     */
    public function hasLanguage(){
      return $this->_has(4);
    }
    
    /**
     * Clear <language> value
     *
     * @return \google\cloud\language\v1\Document
     */
    public function clearLanguage(){
      return $this->_clear(4);
    }
    
    /**
     * Get <language> value
     *
     * @return string
     */
    public function getLanguage(){
      return $this->_get(4);
    }
    
    /**
     * Set <language> value
     *
     * @param string $value
     * @return \google\cloud\language\v1\Document
     */
    public function setLanguage( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class Sentence extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\language\v1\TextSpan */
    public $text = null;
    
    /**  @var \google\cloud\language\v1\Sentiment */
    public $sentiment = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.Sentence');

      // OPTIONAL MESSAGE text = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "text";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\TextSpan';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sentiment = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sentiment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\Sentiment';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(1);
    }
    
    /**
     * Clear <text> value
     *
     * @return \google\cloud\language\v1\Sentence
     */
    public function clearText(){
      return $this->_clear(1);
    }
    
    /**
     * Get <text> value
     *
     * @return \google\cloud\language\v1\TextSpan
     */
    public function getText(){
      return $this->_get(1);
    }
    
    /**
     * Set <text> value
     *
     * @param \google\cloud\language\v1\TextSpan $value
     * @return \google\cloud\language\v1\Sentence
     */
    public function setText(\google\cloud\language\v1\TextSpan $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sentiment> has a value
     *
     * @return boolean
     */
    public function hasSentiment(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sentiment> value
     *
     * @return \google\cloud\language\v1\Sentence
     */
    public function clearSentiment(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sentiment> value
     *
     * @return \google\cloud\language\v1\Sentiment
     */
    public function getSentiment(){
      return $this->_get(2);
    }
    
    /**
     * Set <sentiment> value
     *
     * @param \google\cloud\language\v1\Sentiment $value
     * @return \google\cloud\language\v1\Sentence
     */
    public function setSentiment(\google\cloud\language\v1\Sentiment $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\language\v1\Entity {

  class Type extends \DrSlump\Protobuf\Enum {
    const UNKNOWN = 0;
    const PERSON = 1;
    const LOCATION = 2;
    const ORGANIZATION = 3;
    const EVENT = 4;
    const WORK_OF_ART = 5;
    const CONSUMER_GOOD = 6;
    const OTHER = 7;
  }
}
namespace google\cloud\language\v1\Entity {

  class MetadataEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.Entity.MetadataEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\cloud\language\v1\Entity\MetadataEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\cloud\language\v1\Entity\MetadataEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\cloud\language\v1\Entity\MetadataEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\cloud\language\v1\Entity\MetadataEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class Entity extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int - \google\cloud\language\v1\Entity\Type */
    public $type = null;
    
    /**  @var \google\cloud\language\v1\Entity\MetadataEntry[]  */
    public $metadata = array();
    
    /**  @var float */
    public $salience = null;
    
    /**  @var \google\cloud\language\v1\EntityMention[]  */
    public $mentions = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.Entity');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\Entity\Type';
      $descriptor->addField($f);

      // REPEATED MESSAGE metadata = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "metadata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\language\v1\Entity\MetadataEntry';
      $descriptor->addField($f);

      // OPTIONAL FLOAT salience = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "salience";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE mentions = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "mentions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\language\v1\EntityMention';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\cloud\language\v1\Entity
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\cloud\language\v1\Entity
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\cloud\language\v1\Entity
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \google\cloud\language\v1\Entity\Type
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \google\cloud\language\v1\Entity\Type $value
     * @return \google\cloud\language\v1\Entity
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <metadata> has a value
     *
     * @return boolean
     */
    public function hasMetadata(){
      return $this->_has(3);
    }
    
    /**
     * Clear <metadata> value
     *
     * @return \google\cloud\language\v1\Entity
     */
    public function clearMetadata(){
      return $this->_clear(3);
    }
    
    /**
     * Get <metadata> value
     *
     * @param int $idx
     * @return \google\cloud\language\v1\Entity\MetadataEntry
     */
    public function getMetadata($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <metadata> value
     *
     * @param \google\cloud\language\v1\Entity\MetadataEntry $value
     * @return \google\cloud\language\v1\Entity
     */
    public function setMetadata(\google\cloud\language\v1\Entity\MetadataEntry $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <metadata>
     *
     * @return \google\cloud\language\v1\Entity\MetadataEntry[]
     */
    public function getMetadataList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <metadata>
     *
     * @param \google\cloud\language\v1\Entity\MetadataEntry $value
     * @return \google\cloud\language\v1\Entity
     */
    public function addMetadata(\google\cloud\language\v1\Entity\MetadataEntry $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <salience> has a value
     *
     * @return boolean
     */
    public function hasSalience(){
      return $this->_has(4);
    }
    
    /**
     * Clear <salience> value
     *
     * @return \google\cloud\language\v1\Entity
     */
    public function clearSalience(){
      return $this->_clear(4);
    }
    
    /**
     * Get <salience> value
     *
     * @return float
     */
    public function getSalience(){
      return $this->_get(4);
    }
    
    /**
     * Set <salience> value
     *
     * @param float $value
     * @return \google\cloud\language\v1\Entity
     */
    public function setSalience( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <mentions> has a value
     *
     * @return boolean
     */
    public function hasMentions(){
      return $this->_has(5);
    }
    
    /**
     * Clear <mentions> value
     *
     * @return \google\cloud\language\v1\Entity
     */
    public function clearMentions(){
      return $this->_clear(5);
    }
    
    /**
     * Get <mentions> value
     *
     * @param int $idx
     * @return \google\cloud\language\v1\EntityMention
     */
    public function getMentions($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <mentions> value
     *
     * @param \google\cloud\language\v1\EntityMention $value
     * @return \google\cloud\language\v1\Entity
     */
    public function setMentions(\google\cloud\language\v1\EntityMention $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <mentions>
     *
     * @return \google\cloud\language\v1\EntityMention[]
     */
    public function getMentionsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <mentions>
     *
     * @param \google\cloud\language\v1\EntityMention $value
     * @return \google\cloud\language\v1\Entity
     */
    public function addMentions(\google\cloud\language\v1\EntityMention $value){
     return $this->_add(5, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class Token extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\language\v1\TextSpan */
    public $text = null;
    
    /**  @var \google\cloud\language\v1\PartOfSpeech */
    public $part_of_speech = null;
    
    /**  @var \google\cloud\language\v1\DependencyEdge */
    public $dependency_edge = null;
    
    /**  @var string */
    public $lemma = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.Token');

      // OPTIONAL MESSAGE text = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "text";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\TextSpan';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE part_of_speech = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "part_of_speech";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\PartOfSpeech';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE dependency_edge = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "dependency_edge";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\DependencyEdge';
      $descriptor->addField($f);

      // OPTIONAL STRING lemma = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "lemma";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(1);
    }
    
    /**
     * Clear <text> value
     *
     * @return \google\cloud\language\v1\Token
     */
    public function clearText(){
      return $this->_clear(1);
    }
    
    /**
     * Get <text> value
     *
     * @return \google\cloud\language\v1\TextSpan
     */
    public function getText(){
      return $this->_get(1);
    }
    
    /**
     * Set <text> value
     *
     * @param \google\cloud\language\v1\TextSpan $value
     * @return \google\cloud\language\v1\Token
     */
    public function setText(\google\cloud\language\v1\TextSpan $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <part_of_speech> has a value
     *
     * @return boolean
     */
    public function hasPartOfSpeech(){
      return $this->_has(2);
    }
    
    /**
     * Clear <part_of_speech> value
     *
     * @return \google\cloud\language\v1\Token
     */
    public function clearPartOfSpeech(){
      return $this->_clear(2);
    }
    
    /**
     * Get <part_of_speech> value
     *
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function getPartOfSpeech(){
      return $this->_get(2);
    }
    
    /**
     * Set <part_of_speech> value
     *
     * @param \google\cloud\language\v1\PartOfSpeech $value
     * @return \google\cloud\language\v1\Token
     */
    public function setPartOfSpeech(\google\cloud\language\v1\PartOfSpeech $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <dependency_edge> has a value
     *
     * @return boolean
     */
    public function hasDependencyEdge(){
      return $this->_has(3);
    }
    
    /**
     * Clear <dependency_edge> value
     *
     * @return \google\cloud\language\v1\Token
     */
    public function clearDependencyEdge(){
      return $this->_clear(3);
    }
    
    /**
     * Get <dependency_edge> value
     *
     * @return \google\cloud\language\v1\DependencyEdge
     */
    public function getDependencyEdge(){
      return $this->_get(3);
    }
    
    /**
     * Set <dependency_edge> value
     *
     * @param \google\cloud\language\v1\DependencyEdge $value
     * @return \google\cloud\language\v1\Token
     */
    public function setDependencyEdge(\google\cloud\language\v1\DependencyEdge $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <lemma> has a value
     *
     * @return boolean
     */
    public function hasLemma(){
      return $this->_has(4);
    }
    
    /**
     * Clear <lemma> value
     *
     * @return \google\cloud\language\v1\Token
     */
    public function clearLemma(){
      return $this->_clear(4);
    }
    
    /**
     * Get <lemma> value
     *
     * @return string
     */
    public function getLemma(){
      return $this->_get(4);
    }
    
    /**
     * Set <lemma> value
     *
     * @param string $value
     * @return \google\cloud\language\v1\Token
     */
    public function setLemma( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class Sentiment extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $magnitude = null;
    
    /**  @var float */
    public $score = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.Sentiment');

      // OPTIONAL FLOAT magnitude = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "magnitude";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT score = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <magnitude> has a value
     *
     * @return boolean
     */
    public function hasMagnitude(){
      return $this->_has(2);
    }
    
    /**
     * Clear <magnitude> value
     *
     * @return \google\cloud\language\v1\Sentiment
     */
    public function clearMagnitude(){
      return $this->_clear(2);
    }
    
    /**
     * Get <magnitude> value
     *
     * @return float
     */
    public function getMagnitude(){
      return $this->_get(2);
    }
    
    /**
     * Set <magnitude> value
     *
     * @param float $value
     * @return \google\cloud\language\v1\Sentiment
     */
    public function setMagnitude( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(3);
    }
    
    /**
     * Clear <score> value
     *
     * @return \google\cloud\language\v1\Sentiment
     */
    public function clearScore(){
      return $this->_clear(3);
    }
    
    /**
     * Get <score> value
     *
     * @return float
     */
    public function getScore(){
      return $this->_get(3);
    }
    
    /**
     * Set <score> value
     *
     * @param float $value
     * @return \google\cloud\language\v1\Sentiment
     */
    public function setScore( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\cloud\language\v1\PartOfSpeech {

  class Tag extends \DrSlump\Protobuf\Enum {
    const UNKNOWN = 0;
    const ADJ = 1;
    const ADP = 2;
    const ADV = 3;
    const CONJ = 4;
    const DET = 5;
    const NOUN = 6;
    const NUM = 7;
    const PRON = 8;
    const PRT = 9;
    const PUNCT = 10;
    const VERB = 11;
    const X = 12;
    const AFFIX = 13;
  }
}
namespace google\cloud\language\v1\PartOfSpeech {

  class Aspect extends \DrSlump\Protobuf\Enum {
    const ASPECT_UNKNOWN = 0;
    const PERFECTIVE = 1;
    const IMPERFECTIVE = 2;
    const PROGRESSIVE = 3;
  }
}
namespace google\cloud\language\v1\PartOfSpeech {

  class CaseC extends \DrSlump\Protobuf\Enum {
    const CASE_UNKNOWN = 0;
    const ACCUSATIVE = 1;
    const ADVERBIAL = 2;
    const COMPLEMENTIVE = 3;
    const DATIVE = 4;
    const GENITIVE = 5;
    const INSTRUMENTAL = 6;
    const LOCATIVE = 7;
    const NOMINATIVE = 8;
    const OBLIQUE = 9;
    const PARTITIVE = 10;
    const PREPOSITIONAL = 11;
    const REFLEXIVE_CASE = 12;
    const RELATIVE_CASE = 13;
    const VOCATIVE = 14;
  }
}
namespace google\cloud\language\v1\PartOfSpeech {

  class Form extends \DrSlump\Protobuf\Enum {
    const FORM_UNKNOWN = 0;
    const ADNOMIAL = 1;
    const AUXILIARY = 2;
    const COMPLEMENTIZER = 3;
    const FINAL_ENDING = 4;
    const GERUND = 5;
    const REALIS = 6;
    const IRREALIS = 7;
    const SHORT = 8;
    const LONG = 9;
    const ORDER = 10;
    const SPECIFIC = 11;
  }
}
namespace google\cloud\language\v1\PartOfSpeech {

  class Gender extends \DrSlump\Protobuf\Enum {
    const GENDER_UNKNOWN = 0;
    const FEMININE = 1;
    const MASCULINE = 2;
    const NEUTER = 3;
  }
}
namespace google\cloud\language\v1\PartOfSpeech {

  class Mood extends \DrSlump\Protobuf\Enum {
    const MOOD_UNKNOWN = 0;
    const CONDITIONAL_MOOD = 1;
    const IMPERATIVE = 2;
    const INDICATIVE = 3;
    const INTERROGATIVE = 4;
    const JUSSIVE = 5;
    const SUBJUNCTIVE = 6;
  }
}
namespace google\cloud\language\v1\PartOfSpeech {

  class Number extends \DrSlump\Protobuf\Enum {
    const NUMBER_UNKNOWN = 0;
    const SINGULAR = 1;
    const PLURAL = 2;
    const DUAL = 3;
  }
}
namespace google\cloud\language\v1\PartOfSpeech {

  class Person extends \DrSlump\Protobuf\Enum {
    const PERSON_UNKNOWN = 0;
    const FIRST = 1;
    const SECOND = 2;
    const THIRD = 3;
    const REFLEXIVE_PERSON = 4;
  }
}
namespace google\cloud\language\v1\PartOfSpeech {

  class Proper extends \DrSlump\Protobuf\Enum {
    const PROPER_UNKNOWN = 0;
    const PROPER = 1;
    const NOT_PROPER = 2;
  }
}
namespace google\cloud\language\v1\PartOfSpeech {

  class Reciprocity extends \DrSlump\Protobuf\Enum {
    const RECIPROCITY_UNKNOWN = 0;
    const RECIPROCAL = 1;
    const NON_RECIPROCAL = 2;
  }
}
namespace google\cloud\language\v1\PartOfSpeech {

  class Tense extends \DrSlump\Protobuf\Enum {
    const TENSE_UNKNOWN = 0;
    const CONDITIONAL_TENSE = 1;
    const FUTURE = 2;
    const PAST = 3;
    const PRESENT = 4;
    const IMPERFECT = 5;
    const PLUPERFECT = 6;
  }
}
namespace google\cloud\language\v1\PartOfSpeech {

  class Voice extends \DrSlump\Protobuf\Enum {
    const VOICE_UNKNOWN = 0;
    const ACTIVE = 1;
    const CAUSATIVE = 2;
    const PASSIVE = 3;
  }
}
namespace google\cloud\language\v1 {

  class PartOfSpeech extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\cloud\language\v1\PartOfSpeech\Tag */
    public $tag = null;
    
    /**  @var int - \google\cloud\language\v1\PartOfSpeech\Aspect */
    public $aspect = null;
    
    /**  @var int - \google\cloud\language\v1\PartOfSpeech\CaseC */
    public $case = null;
    
    /**  @var int - \google\cloud\language\v1\PartOfSpeech\Form */
    public $form = null;
    
    /**  @var int - \google\cloud\language\v1\PartOfSpeech\Gender */
    public $gender = null;
    
    /**  @var int - \google\cloud\language\v1\PartOfSpeech\Mood */
    public $mood = null;
    
    /**  @var int - \google\cloud\language\v1\PartOfSpeech\Number */
    public $number = null;
    
    /**  @var int - \google\cloud\language\v1\PartOfSpeech\Person */
    public $person = null;
    
    /**  @var int - \google\cloud\language\v1\PartOfSpeech\Proper */
    public $proper = null;
    
    /**  @var int - \google\cloud\language\v1\PartOfSpeech\Reciprocity */
    public $reciprocity = null;
    
    /**  @var int - \google\cloud\language\v1\PartOfSpeech\Tense */
    public $tense = null;
    
    /**  @var int - \google\cloud\language\v1\PartOfSpeech\Voice */
    public $voice = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.PartOfSpeech');

      // OPTIONAL ENUM tag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tag";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\PartOfSpeech\Tag';
      $descriptor->addField($f);

      // OPTIONAL ENUM aspect = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "aspect";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\PartOfSpeech\Aspect';
      $descriptor->addField($f);

      // OPTIONAL ENUM case = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "case";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\PartOfSpeech\CaseC';
      $descriptor->addField($f);

      // OPTIONAL ENUM form = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "form";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\PartOfSpeech\Form';
      $descriptor->addField($f);

      // OPTIONAL ENUM gender = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "gender";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\PartOfSpeech\Gender';
      $descriptor->addField($f);

      // OPTIONAL ENUM mood = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "mood";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\PartOfSpeech\Mood';
      $descriptor->addField($f);

      // OPTIONAL ENUM number = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\PartOfSpeech\Number';
      $descriptor->addField($f);

      // OPTIONAL ENUM person = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "person";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\PartOfSpeech\Person';
      $descriptor->addField($f);

      // OPTIONAL ENUM proper = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "proper";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\PartOfSpeech\Proper';
      $descriptor->addField($f);

      // OPTIONAL ENUM reciprocity = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "reciprocity";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\PartOfSpeech\Reciprocity';
      $descriptor->addField($f);

      // OPTIONAL ENUM tense = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "tense";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\PartOfSpeech\Tense';
      $descriptor->addField($f);

      // OPTIONAL ENUM voice = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "voice";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\PartOfSpeech\Voice';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tag> has a value
     *
     * @return boolean
     */
    public function hasTag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tag> value
     *
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function clearTag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tag> value
     *
     * @return int - \google\cloud\language\v1\PartOfSpeech\Tag
     */
    public function getTag(){
      return $this->_get(1);
    }
    
    /**
     * Set <tag> value
     *
     * @param int - \google\cloud\language\v1\PartOfSpeech\Tag $value
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function setTag( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <aspect> has a value
     *
     * @return boolean
     */
    public function hasAspect(){
      return $this->_has(2);
    }
    
    /**
     * Clear <aspect> value
     *
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function clearAspect(){
      return $this->_clear(2);
    }
    
    /**
     * Get <aspect> value
     *
     * @return int - \google\cloud\language\v1\PartOfSpeech\Aspect
     */
    public function getAspect(){
      return $this->_get(2);
    }
    
    /**
     * Set <aspect> value
     *
     * @param int - \google\cloud\language\v1\PartOfSpeech\Aspect $value
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function setAspect( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <case> has a value
     *
     * @return boolean
     */
    public function hasCase(){
      return $this->_has(3);
    }
    
    /**
     * Clear <case> value
     *
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function clearCase(){
      return $this->_clear(3);
    }
    
    /**
     * Get <case> value
     *
     * @return int - \google\cloud\language\v1\PartOfSpeech\CaseC
     */
    public function getCase(){
      return $this->_get(3);
    }
    
    /**
     * Set <case> value
     *
     * @param int - \google\cloud\language\v1\PartOfSpeech\CaseC $value
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function setCase( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <form> has a value
     *
     * @return boolean
     */
    public function hasForm(){
      return $this->_has(4);
    }
    
    /**
     * Clear <form> value
     *
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function clearForm(){
      return $this->_clear(4);
    }
    
    /**
     * Get <form> value
     *
     * @return int - \google\cloud\language\v1\PartOfSpeech\Form
     */
    public function getForm(){
      return $this->_get(4);
    }
    
    /**
     * Set <form> value
     *
     * @param int - \google\cloud\language\v1\PartOfSpeech\Form $value
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function setForm( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <gender> has a value
     *
     * @return boolean
     */
    public function hasGender(){
      return $this->_has(5);
    }
    
    /**
     * Clear <gender> value
     *
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function clearGender(){
      return $this->_clear(5);
    }
    
    /**
     * Get <gender> value
     *
     * @return int - \google\cloud\language\v1\PartOfSpeech\Gender
     */
    public function getGender(){
      return $this->_get(5);
    }
    
    /**
     * Set <gender> value
     *
     * @param int - \google\cloud\language\v1\PartOfSpeech\Gender $value
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function setGender( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <mood> has a value
     *
     * @return boolean
     */
    public function hasMood(){
      return $this->_has(6);
    }
    
    /**
     * Clear <mood> value
     *
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function clearMood(){
      return $this->_clear(6);
    }
    
    /**
     * Get <mood> value
     *
     * @return int - \google\cloud\language\v1\PartOfSpeech\Mood
     */
    public function getMood(){
      return $this->_get(6);
    }
    
    /**
     * Set <mood> value
     *
     * @param int - \google\cloud\language\v1\PartOfSpeech\Mood $value
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function setMood( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(7);
    }
    
    /**
     * Clear <number> value
     *
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function clearNumber(){
      return $this->_clear(7);
    }
    
    /**
     * Get <number> value
     *
     * @return int - \google\cloud\language\v1\PartOfSpeech\Number
     */
    public function getNumber(){
      return $this->_get(7);
    }
    
    /**
     * Set <number> value
     *
     * @param int - \google\cloud\language\v1\PartOfSpeech\Number $value
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function setNumber( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <person> has a value
     *
     * @return boolean
     */
    public function hasPerson(){
      return $this->_has(8);
    }
    
    /**
     * Clear <person> value
     *
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function clearPerson(){
      return $this->_clear(8);
    }
    
    /**
     * Get <person> value
     *
     * @return int - \google\cloud\language\v1\PartOfSpeech\Person
     */
    public function getPerson(){
      return $this->_get(8);
    }
    
    /**
     * Set <person> value
     *
     * @param int - \google\cloud\language\v1\PartOfSpeech\Person $value
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function setPerson( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <proper> has a value
     *
     * @return boolean
     */
    public function hasProper(){
      return $this->_has(9);
    }
    
    /**
     * Clear <proper> value
     *
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function clearProper(){
      return $this->_clear(9);
    }
    
    /**
     * Get <proper> value
     *
     * @return int - \google\cloud\language\v1\PartOfSpeech\Proper
     */
    public function getProper(){
      return $this->_get(9);
    }
    
    /**
     * Set <proper> value
     *
     * @param int - \google\cloud\language\v1\PartOfSpeech\Proper $value
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function setProper( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <reciprocity> has a value
     *
     * @return boolean
     */
    public function hasReciprocity(){
      return $this->_has(10);
    }
    
    /**
     * Clear <reciprocity> value
     *
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function clearReciprocity(){
      return $this->_clear(10);
    }
    
    /**
     * Get <reciprocity> value
     *
     * @return int - \google\cloud\language\v1\PartOfSpeech\Reciprocity
     */
    public function getReciprocity(){
      return $this->_get(10);
    }
    
    /**
     * Set <reciprocity> value
     *
     * @param int - \google\cloud\language\v1\PartOfSpeech\Reciprocity $value
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function setReciprocity( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <tense> has a value
     *
     * @return boolean
     */
    public function hasTense(){
      return $this->_has(11);
    }
    
    /**
     * Clear <tense> value
     *
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function clearTense(){
      return $this->_clear(11);
    }
    
    /**
     * Get <tense> value
     *
     * @return int - \google\cloud\language\v1\PartOfSpeech\Tense
     */
    public function getTense(){
      return $this->_get(11);
    }
    
    /**
     * Set <tense> value
     *
     * @param int - \google\cloud\language\v1\PartOfSpeech\Tense $value
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function setTense( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <voice> has a value
     *
     * @return boolean
     */
    public function hasVoice(){
      return $this->_has(12);
    }
    
    /**
     * Clear <voice> value
     *
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function clearVoice(){
      return $this->_clear(12);
    }
    
    /**
     * Get <voice> value
     *
     * @return int - \google\cloud\language\v1\PartOfSpeech\Voice
     */
    public function getVoice(){
      return $this->_get(12);
    }
    
    /**
     * Set <voice> value
     *
     * @param int - \google\cloud\language\v1\PartOfSpeech\Voice $value
     * @return \google\cloud\language\v1\PartOfSpeech
     */
    public function setVoice( $value){
      return $this->_set(12, $value);
    }
  }
}

namespace google\cloud\language\v1\DependencyEdge {

  class Label extends \DrSlump\Protobuf\Enum {
    const UNKNOWN = 0;
    const ABBREV = 1;
    const ACOMP = 2;
    const ADVCL = 3;
    const ADVMOD = 4;
    const AMOD = 5;
    const APPOS = 6;
    const ATTR = 7;
    const AUX = 8;
    const AUXPASS = 9;
    const CC = 10;
    const CCOMP = 11;
    const CONJ = 12;
    const CSUBJ = 13;
    const CSUBJPASS = 14;
    const DEP = 15;
    const DET = 16;
    const DISCOURSE = 17;
    const DOBJ = 18;
    const EXPL = 19;
    const GOESWITH = 20;
    const IOBJ = 21;
    const MARK = 22;
    const MWE = 23;
    const MWV = 24;
    const NEG = 25;
    const NN = 26;
    const NPADVMOD = 27;
    const NSUBJ = 28;
    const NSUBJPASS = 29;
    const NUM = 30;
    const NUMBER = 31;
    const P = 32;
    const PARATAXIS = 33;
    const PARTMOD = 34;
    const PCOMP = 35;
    const POBJ = 36;
    const POSS = 37;
    const POSTNEG = 38;
    const PRECOMP = 39;
    const PRECONJ = 40;
    const PREDET = 41;
    const PREF = 42;
    const PREP = 43;
    const PRONL = 44;
    const PRT = 45;
    const PS = 46;
    const QUANTMOD = 47;
    const RCMOD = 48;
    const RCMODREL = 49;
    const RDROP = 50;
    const REF = 51;
    const REMNANT = 52;
    const REPARANDUM = 53;
    const ROOT = 54;
    const SNUM = 55;
    const SUFF = 56;
    const TMOD = 57;
    const TOPIC = 58;
    const VMOD = 59;
    const VOCATIVE = 60;
    const XCOMP = 61;
    const SUFFIX = 62;
    const TITLE = 63;
    const ADVPHMOD = 64;
    const AUXCAUS = 65;
    const AUXVV = 66;
    const DTMOD = 67;
    const FOREIGN = 68;
    const KW = 69;
    const LIST_ = 70;
    const NOMC = 71;
    const NOMCSUBJ = 72;
    const NOMCSUBJPASS = 73;
    const NUMC = 74;
    const COP = 75;
    const DISLOCATED = 76;
  }
}
namespace google\cloud\language\v1 {

  class DependencyEdge extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $head_token_index = null;
    
    /**  @var int - \google\cloud\language\v1\DependencyEdge\Label */
    public $label = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.DependencyEdge');

      // OPTIONAL INT32 head_token_index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "head_token_index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM label = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "label";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\DependencyEdge\Label';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <head_token_index> has a value
     *
     * @return boolean
     */
    public function hasHeadTokenIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <head_token_index> value
     *
     * @return \google\cloud\language\v1\DependencyEdge
     */
    public function clearHeadTokenIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <head_token_index> value
     *
     * @return int
     */
    public function getHeadTokenIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <head_token_index> value
     *
     * @param int $value
     * @return \google\cloud\language\v1\DependencyEdge
     */
    public function setHeadTokenIndex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <label> has a value
     *
     * @return boolean
     */
    public function hasLabel(){
      return $this->_has(2);
    }
    
    /**
     * Clear <label> value
     *
     * @return \google\cloud\language\v1\DependencyEdge
     */
    public function clearLabel(){
      return $this->_clear(2);
    }
    
    /**
     * Get <label> value
     *
     * @return int - \google\cloud\language\v1\DependencyEdge\Label
     */
    public function getLabel(){
      return $this->_get(2);
    }
    
    /**
     * Set <label> value
     *
     * @param int - \google\cloud\language\v1\DependencyEdge\Label $value
     * @return \google\cloud\language\v1\DependencyEdge
     */
    public function setLabel( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\language\v1\EntityMention {

  class Type extends \DrSlump\Protobuf\Enum {
    const TYPE_UNKNOWN = 0;
    const PROPER = 1;
    const COMMON = 2;
  }
}
namespace google\cloud\language\v1 {

  class EntityMention extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\language\v1\TextSpan */
    public $text = null;
    
    /**  @var int - \google\cloud\language\v1\EntityMention\Type */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.EntityMention');

      // OPTIONAL MESSAGE text = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "text";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\TextSpan';
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\EntityMention\Type';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(1);
    }
    
    /**
     * Clear <text> value
     *
     * @return \google\cloud\language\v1\EntityMention
     */
    public function clearText(){
      return $this->_clear(1);
    }
    
    /**
     * Get <text> value
     *
     * @return \google\cloud\language\v1\TextSpan
     */
    public function getText(){
      return $this->_get(1);
    }
    
    /**
     * Set <text> value
     *
     * @param \google\cloud\language\v1\TextSpan $value
     * @return \google\cloud\language\v1\EntityMention
     */
    public function setText(\google\cloud\language\v1\TextSpan $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\cloud\language\v1\EntityMention
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \google\cloud\language\v1\EntityMention\Type
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \google\cloud\language\v1\EntityMention\Type $value
     * @return \google\cloud\language\v1\EntityMention
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class TextSpan extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $content = null;
    
    /**  @var int */
    public $begin_offset = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.TextSpan');

      // OPTIONAL STRING content = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 begin_offset = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "begin_offset";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <content> value
     *
     * @return \google\cloud\language\v1\TextSpan
     */
    public function clearContent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(1);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \google\cloud\language\v1\TextSpan
     */
    public function setContent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <begin_offset> has a value
     *
     * @return boolean
     */
    public function hasBeginOffset(){
      return $this->_has(2);
    }
    
    /**
     * Clear <begin_offset> value
     *
     * @return \google\cloud\language\v1\TextSpan
     */
    public function clearBeginOffset(){
      return $this->_clear(2);
    }
    
    /**
     * Get <begin_offset> value
     *
     * @return int
     */
    public function getBeginOffset(){
      return $this->_get(2);
    }
    
    /**
     * Set <begin_offset> value
     *
     * @param int $value
     * @return \google\cloud\language\v1\TextSpan
     */
    public function setBeginOffset( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class AnalyzeSentimentRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\language\v1\Document */
    public $document = null;
    
    /**  @var int - \google\cloud\language\v1\EncodingType */
    public $encoding_type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.AnalyzeSentimentRequest');

      // OPTIONAL MESSAGE document = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "document";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\Document';
      $descriptor->addField($f);

      // OPTIONAL ENUM encoding_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "encoding_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\EncodingType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <document> has a value
     *
     * @return boolean
     */
    public function hasDocument(){
      return $this->_has(1);
    }
    
    /**
     * Clear <document> value
     *
     * @return \google\cloud\language\v1\AnalyzeSentimentRequest
     */
    public function clearDocument(){
      return $this->_clear(1);
    }
    
    /**
     * Get <document> value
     *
     * @return \google\cloud\language\v1\Document
     */
    public function getDocument(){
      return $this->_get(1);
    }
    
    /**
     * Set <document> value
     *
     * @param \google\cloud\language\v1\Document $value
     * @return \google\cloud\language\v1\AnalyzeSentimentRequest
     */
    public function setDocument(\google\cloud\language\v1\Document $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <encoding_type> has a value
     *
     * @return boolean
     */
    public function hasEncodingType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <encoding_type> value
     *
     * @return \google\cloud\language\v1\AnalyzeSentimentRequest
     */
    public function clearEncodingType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <encoding_type> value
     *
     * @return int - \google\cloud\language\v1\EncodingType
     */
    public function getEncodingType(){
      return $this->_get(2);
    }
    
    /**
     * Set <encoding_type> value
     *
     * @param int - \google\cloud\language\v1\EncodingType $value
     * @return \google\cloud\language\v1\AnalyzeSentimentRequest
     */
    public function setEncodingType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class AnalyzeSentimentResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\language\v1\Sentiment */
    public $document_sentiment = null;
    
    /**  @var string */
    public $language = null;
    
    /**  @var \google\cloud\language\v1\Sentence[]  */
    public $sentences = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.AnalyzeSentimentResponse');

      // OPTIONAL MESSAGE document_sentiment = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "document_sentiment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\Sentiment';
      $descriptor->addField($f);

      // OPTIONAL STRING language = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "language";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE sentences = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sentences";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\language\v1\Sentence';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <document_sentiment> has a value
     *
     * @return boolean
     */
    public function hasDocumentSentiment(){
      return $this->_has(1);
    }
    
    /**
     * Clear <document_sentiment> value
     *
     * @return \google\cloud\language\v1\AnalyzeSentimentResponse
     */
    public function clearDocumentSentiment(){
      return $this->_clear(1);
    }
    
    /**
     * Get <document_sentiment> value
     *
     * @return \google\cloud\language\v1\Sentiment
     */
    public function getDocumentSentiment(){
      return $this->_get(1);
    }
    
    /**
     * Set <document_sentiment> value
     *
     * @param \google\cloud\language\v1\Sentiment $value
     * @return \google\cloud\language\v1\AnalyzeSentimentResponse
     */
    public function setDocumentSentiment(\google\cloud\language\v1\Sentiment $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <language> has a value
     *
     * @return boolean
     */
    public function hasLanguage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <language> value
     *
     * @return \google\cloud\language\v1\AnalyzeSentimentResponse
     */
    public function clearLanguage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <language> value
     *
     * @return string
     */
    public function getLanguage(){
      return $this->_get(2);
    }
    
    /**
     * Set <language> value
     *
     * @param string $value
     * @return \google\cloud\language\v1\AnalyzeSentimentResponse
     */
    public function setLanguage( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sentences> has a value
     *
     * @return boolean
     */
    public function hasSentences(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sentences> value
     *
     * @return \google\cloud\language\v1\AnalyzeSentimentResponse
     */
    public function clearSentences(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sentences> value
     *
     * @param int $idx
     * @return \google\cloud\language\v1\Sentence
     */
    public function getSentences($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <sentences> value
     *
     * @param \google\cloud\language\v1\Sentence $value
     * @return \google\cloud\language\v1\AnalyzeSentimentResponse
     */
    public function setSentences(\google\cloud\language\v1\Sentence $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <sentences>
     *
     * @return \google\cloud\language\v1\Sentence[]
     */
    public function getSentencesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <sentences>
     *
     * @param \google\cloud\language\v1\Sentence $value
     * @return \google\cloud\language\v1\AnalyzeSentimentResponse
     */
    public function addSentences(\google\cloud\language\v1\Sentence $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class AnalyzeEntitiesRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\language\v1\Document */
    public $document = null;
    
    /**  @var int - \google\cloud\language\v1\EncodingType */
    public $encoding_type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.AnalyzeEntitiesRequest');

      // OPTIONAL MESSAGE document = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "document";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\Document';
      $descriptor->addField($f);

      // OPTIONAL ENUM encoding_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "encoding_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\EncodingType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <document> has a value
     *
     * @return boolean
     */
    public function hasDocument(){
      return $this->_has(1);
    }
    
    /**
     * Clear <document> value
     *
     * @return \google\cloud\language\v1\AnalyzeEntitiesRequest
     */
    public function clearDocument(){
      return $this->_clear(1);
    }
    
    /**
     * Get <document> value
     *
     * @return \google\cloud\language\v1\Document
     */
    public function getDocument(){
      return $this->_get(1);
    }
    
    /**
     * Set <document> value
     *
     * @param \google\cloud\language\v1\Document $value
     * @return \google\cloud\language\v1\AnalyzeEntitiesRequest
     */
    public function setDocument(\google\cloud\language\v1\Document $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <encoding_type> has a value
     *
     * @return boolean
     */
    public function hasEncodingType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <encoding_type> value
     *
     * @return \google\cloud\language\v1\AnalyzeEntitiesRequest
     */
    public function clearEncodingType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <encoding_type> value
     *
     * @return int - \google\cloud\language\v1\EncodingType
     */
    public function getEncodingType(){
      return $this->_get(2);
    }
    
    /**
     * Set <encoding_type> value
     *
     * @param int - \google\cloud\language\v1\EncodingType $value
     * @return \google\cloud\language\v1\AnalyzeEntitiesRequest
     */
    public function setEncodingType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class AnalyzeEntitiesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\language\v1\Entity[]  */
    public $entities = array();
    
    /**  @var string */
    public $language = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.AnalyzeEntitiesResponse');

      // REPEATED MESSAGE entities = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entities";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\language\v1\Entity';
      $descriptor->addField($f);

      // OPTIONAL STRING language = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "language";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entities> has a value
     *
     * @return boolean
     */
    public function hasEntities(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entities> value
     *
     * @return \google\cloud\language\v1\AnalyzeEntitiesResponse
     */
    public function clearEntities(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entities> value
     *
     * @param int $idx
     * @return \google\cloud\language\v1\Entity
     */
    public function getEntities($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <entities> value
     *
     * @param \google\cloud\language\v1\Entity $value
     * @return \google\cloud\language\v1\AnalyzeEntitiesResponse
     */
    public function setEntities(\google\cloud\language\v1\Entity $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <entities>
     *
     * @return \google\cloud\language\v1\Entity[]
     */
    public function getEntitiesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <entities>
     *
     * @param \google\cloud\language\v1\Entity $value
     * @return \google\cloud\language\v1\AnalyzeEntitiesResponse
     */
    public function addEntities(\google\cloud\language\v1\Entity $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <language> has a value
     *
     * @return boolean
     */
    public function hasLanguage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <language> value
     *
     * @return \google\cloud\language\v1\AnalyzeEntitiesResponse
     */
    public function clearLanguage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <language> value
     *
     * @return string
     */
    public function getLanguage(){
      return $this->_get(2);
    }
    
    /**
     * Set <language> value
     *
     * @param string $value
     * @return \google\cloud\language\v1\AnalyzeEntitiesResponse
     */
    public function setLanguage( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class AnalyzeSyntaxRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\language\v1\Document */
    public $document = null;
    
    /**  @var int - \google\cloud\language\v1\EncodingType */
    public $encoding_type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.AnalyzeSyntaxRequest');

      // OPTIONAL MESSAGE document = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "document";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\Document';
      $descriptor->addField($f);

      // OPTIONAL ENUM encoding_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "encoding_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\EncodingType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <document> has a value
     *
     * @return boolean
     */
    public function hasDocument(){
      return $this->_has(1);
    }
    
    /**
     * Clear <document> value
     *
     * @return \google\cloud\language\v1\AnalyzeSyntaxRequest
     */
    public function clearDocument(){
      return $this->_clear(1);
    }
    
    /**
     * Get <document> value
     *
     * @return \google\cloud\language\v1\Document
     */
    public function getDocument(){
      return $this->_get(1);
    }
    
    /**
     * Set <document> value
     *
     * @param \google\cloud\language\v1\Document $value
     * @return \google\cloud\language\v1\AnalyzeSyntaxRequest
     */
    public function setDocument(\google\cloud\language\v1\Document $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <encoding_type> has a value
     *
     * @return boolean
     */
    public function hasEncodingType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <encoding_type> value
     *
     * @return \google\cloud\language\v1\AnalyzeSyntaxRequest
     */
    public function clearEncodingType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <encoding_type> value
     *
     * @return int - \google\cloud\language\v1\EncodingType
     */
    public function getEncodingType(){
      return $this->_get(2);
    }
    
    /**
     * Set <encoding_type> value
     *
     * @param int - \google\cloud\language\v1\EncodingType $value
     * @return \google\cloud\language\v1\AnalyzeSyntaxRequest
     */
    public function setEncodingType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class AnalyzeSyntaxResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\language\v1\Sentence[]  */
    public $sentences = array();
    
    /**  @var \google\cloud\language\v1\Token[]  */
    public $tokens = array();
    
    /**  @var string */
    public $language = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.AnalyzeSyntaxResponse');

      // REPEATED MESSAGE sentences = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sentences";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\language\v1\Sentence';
      $descriptor->addField($f);

      // REPEATED MESSAGE tokens = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "tokens";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\language\v1\Token';
      $descriptor->addField($f);

      // OPTIONAL STRING language = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "language";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sentences> has a value
     *
     * @return boolean
     */
    public function hasSentences(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sentences> value
     *
     * @return \google\cloud\language\v1\AnalyzeSyntaxResponse
     */
    public function clearSentences(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sentences> value
     *
     * @param int $idx
     * @return \google\cloud\language\v1\Sentence
     */
    public function getSentences($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <sentences> value
     *
     * @param \google\cloud\language\v1\Sentence $value
     * @return \google\cloud\language\v1\AnalyzeSyntaxResponse
     */
    public function setSentences(\google\cloud\language\v1\Sentence $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <sentences>
     *
     * @return \google\cloud\language\v1\Sentence[]
     */
    public function getSentencesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <sentences>
     *
     * @param \google\cloud\language\v1\Sentence $value
     * @return \google\cloud\language\v1\AnalyzeSyntaxResponse
     */
    public function addSentences(\google\cloud\language\v1\Sentence $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <tokens> has a value
     *
     * @return boolean
     */
    public function hasTokens(){
      return $this->_has(2);
    }
    
    /**
     * Clear <tokens> value
     *
     * @return \google\cloud\language\v1\AnalyzeSyntaxResponse
     */
    public function clearTokens(){
      return $this->_clear(2);
    }
    
    /**
     * Get <tokens> value
     *
     * @param int $idx
     * @return \google\cloud\language\v1\Token
     */
    public function getTokens($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <tokens> value
     *
     * @param \google\cloud\language\v1\Token $value
     * @return \google\cloud\language\v1\AnalyzeSyntaxResponse
     */
    public function setTokens(\google\cloud\language\v1\Token $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <tokens>
     *
     * @return \google\cloud\language\v1\Token[]
     */
    public function getTokensList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <tokens>
     *
     * @param \google\cloud\language\v1\Token $value
     * @return \google\cloud\language\v1\AnalyzeSyntaxResponse
     */
    public function addTokens(\google\cloud\language\v1\Token $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <language> has a value
     *
     * @return boolean
     */
    public function hasLanguage(){
      return $this->_has(3);
    }
    
    /**
     * Clear <language> value
     *
     * @return \google\cloud\language\v1\AnalyzeSyntaxResponse
     */
    public function clearLanguage(){
      return $this->_clear(3);
    }
    
    /**
     * Get <language> value
     *
     * @return string
     */
    public function getLanguage(){
      return $this->_get(3);
    }
    
    /**
     * Set <language> value
     *
     * @param string $value
     * @return \google\cloud\language\v1\AnalyzeSyntaxResponse
     */
    public function setLanguage( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\cloud\language\v1\AnnotateTextRequest {

  class Features extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $extract_syntax = null;
    
    /**  @var boolean */
    public $extract_entities = null;
    
    /**  @var boolean */
    public $extract_document_sentiment = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.AnnotateTextRequest.Features');

      // OPTIONAL BOOL extract_syntax = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "extract_syntax";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL extract_entities = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "extract_entities";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL extract_document_sentiment = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "extract_document_sentiment";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <extract_syntax> has a value
     *
     * @return boolean
     */
    public function hasExtractSyntax(){
      return $this->_has(1);
    }
    
    /**
     * Clear <extract_syntax> value
     *
     * @return \google\cloud\language\v1\AnnotateTextRequest\Features
     */
    public function clearExtractSyntax(){
      return $this->_clear(1);
    }
    
    /**
     * Get <extract_syntax> value
     *
     * @return boolean
     */
    public function getExtractSyntax(){
      return $this->_get(1);
    }
    
    /**
     * Set <extract_syntax> value
     *
     * @param boolean $value
     * @return \google\cloud\language\v1\AnnotateTextRequest\Features
     */
    public function setExtractSyntax( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <extract_entities> has a value
     *
     * @return boolean
     */
    public function hasExtractEntities(){
      return $this->_has(2);
    }
    
    /**
     * Clear <extract_entities> value
     *
     * @return \google\cloud\language\v1\AnnotateTextRequest\Features
     */
    public function clearExtractEntities(){
      return $this->_clear(2);
    }
    
    /**
     * Get <extract_entities> value
     *
     * @return boolean
     */
    public function getExtractEntities(){
      return $this->_get(2);
    }
    
    /**
     * Set <extract_entities> value
     *
     * @param boolean $value
     * @return \google\cloud\language\v1\AnnotateTextRequest\Features
     */
    public function setExtractEntities( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <extract_document_sentiment> has a value
     *
     * @return boolean
     */
    public function hasExtractDocumentSentiment(){
      return $this->_has(3);
    }
    
    /**
     * Clear <extract_document_sentiment> value
     *
     * @return \google\cloud\language\v1\AnnotateTextRequest\Features
     */
    public function clearExtractDocumentSentiment(){
      return $this->_clear(3);
    }
    
    /**
     * Get <extract_document_sentiment> value
     *
     * @return boolean
     */
    public function getExtractDocumentSentiment(){
      return $this->_get(3);
    }
    
    /**
     * Set <extract_document_sentiment> value
     *
     * @param boolean $value
     * @return \google\cloud\language\v1\AnnotateTextRequest\Features
     */
    public function setExtractDocumentSentiment( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class AnnotateTextRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\language\v1\Document */
    public $document = null;
    
    /**  @var \google\cloud\language\v1\AnnotateTextRequest\Features */
    public $features = null;
    
    /**  @var int - \google\cloud\language\v1\EncodingType */
    public $encoding_type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.AnnotateTextRequest');

      // OPTIONAL MESSAGE document = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "document";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\Document';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE features = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "features";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\AnnotateTextRequest\Features';
      $descriptor->addField($f);

      // OPTIONAL ENUM encoding_type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "encoding_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\EncodingType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <document> has a value
     *
     * @return boolean
     */
    public function hasDocument(){
      return $this->_has(1);
    }
    
    /**
     * Clear <document> value
     *
     * @return \google\cloud\language\v1\AnnotateTextRequest
     */
    public function clearDocument(){
      return $this->_clear(1);
    }
    
    /**
     * Get <document> value
     *
     * @return \google\cloud\language\v1\Document
     */
    public function getDocument(){
      return $this->_get(1);
    }
    
    /**
     * Set <document> value
     *
     * @param \google\cloud\language\v1\Document $value
     * @return \google\cloud\language\v1\AnnotateTextRequest
     */
    public function setDocument(\google\cloud\language\v1\Document $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <features> has a value
     *
     * @return boolean
     */
    public function hasFeatures(){
      return $this->_has(2);
    }
    
    /**
     * Clear <features> value
     *
     * @return \google\cloud\language\v1\AnnotateTextRequest
     */
    public function clearFeatures(){
      return $this->_clear(2);
    }
    
    /**
     * Get <features> value
     *
     * @return \google\cloud\language\v1\AnnotateTextRequest\Features
     */
    public function getFeatures(){
      return $this->_get(2);
    }
    
    /**
     * Set <features> value
     *
     * @param \google\cloud\language\v1\AnnotateTextRequest\Features $value
     * @return \google\cloud\language\v1\AnnotateTextRequest
     */
    public function setFeatures(\google\cloud\language\v1\AnnotateTextRequest\Features $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <encoding_type> has a value
     *
     * @return boolean
     */
    public function hasEncodingType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <encoding_type> value
     *
     * @return \google\cloud\language\v1\AnnotateTextRequest
     */
    public function clearEncodingType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <encoding_type> value
     *
     * @return int - \google\cloud\language\v1\EncodingType
     */
    public function getEncodingType(){
      return $this->_get(3);
    }
    
    /**
     * Set <encoding_type> value
     *
     * @param int - \google\cloud\language\v1\EncodingType $value
     * @return \google\cloud\language\v1\AnnotateTextRequest
     */
    public function setEncodingType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class AnnotateTextResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\language\v1\Sentence[]  */
    public $sentences = array();
    
    /**  @var \google\cloud\language\v1\Token[]  */
    public $tokens = array();
    
    /**  @var \google\cloud\language\v1\Entity[]  */
    public $entities = array();
    
    /**  @var \google\cloud\language\v1\Sentiment */
    public $document_sentiment = null;
    
    /**  @var string */
    public $language = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.language.v1.AnnotateTextResponse');

      // REPEATED MESSAGE sentences = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sentences";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\language\v1\Sentence';
      $descriptor->addField($f);

      // REPEATED MESSAGE tokens = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "tokens";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\language\v1\Token';
      $descriptor->addField($f);

      // REPEATED MESSAGE entities = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "entities";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\language\v1\Entity';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE document_sentiment = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "document_sentiment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\language\v1\Sentiment';
      $descriptor->addField($f);

      // OPTIONAL STRING language = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "language";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sentences> has a value
     *
     * @return boolean
     */
    public function hasSentences(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sentences> value
     *
     * @return \google\cloud\language\v1\AnnotateTextResponse
     */
    public function clearSentences(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sentences> value
     *
     * @param int $idx
     * @return \google\cloud\language\v1\Sentence
     */
    public function getSentences($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <sentences> value
     *
     * @param \google\cloud\language\v1\Sentence $value
     * @return \google\cloud\language\v1\AnnotateTextResponse
     */
    public function setSentences(\google\cloud\language\v1\Sentence $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <sentences>
     *
     * @return \google\cloud\language\v1\Sentence[]
     */
    public function getSentencesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <sentences>
     *
     * @param \google\cloud\language\v1\Sentence $value
     * @return \google\cloud\language\v1\AnnotateTextResponse
     */
    public function addSentences(\google\cloud\language\v1\Sentence $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <tokens> has a value
     *
     * @return boolean
     */
    public function hasTokens(){
      return $this->_has(2);
    }
    
    /**
     * Clear <tokens> value
     *
     * @return \google\cloud\language\v1\AnnotateTextResponse
     */
    public function clearTokens(){
      return $this->_clear(2);
    }
    
    /**
     * Get <tokens> value
     *
     * @param int $idx
     * @return \google\cloud\language\v1\Token
     */
    public function getTokens($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <tokens> value
     *
     * @param \google\cloud\language\v1\Token $value
     * @return \google\cloud\language\v1\AnnotateTextResponse
     */
    public function setTokens(\google\cloud\language\v1\Token $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <tokens>
     *
     * @return \google\cloud\language\v1\Token[]
     */
    public function getTokensList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <tokens>
     *
     * @param \google\cloud\language\v1\Token $value
     * @return \google\cloud\language\v1\AnnotateTextResponse
     */
    public function addTokens(\google\cloud\language\v1\Token $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <entities> has a value
     *
     * @return boolean
     */
    public function hasEntities(){
      return $this->_has(3);
    }
    
    /**
     * Clear <entities> value
     *
     * @return \google\cloud\language\v1\AnnotateTextResponse
     */
    public function clearEntities(){
      return $this->_clear(3);
    }
    
    /**
     * Get <entities> value
     *
     * @param int $idx
     * @return \google\cloud\language\v1\Entity
     */
    public function getEntities($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <entities> value
     *
     * @param \google\cloud\language\v1\Entity $value
     * @return \google\cloud\language\v1\AnnotateTextResponse
     */
    public function setEntities(\google\cloud\language\v1\Entity $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <entities>
     *
     * @return \google\cloud\language\v1\Entity[]
     */
    public function getEntitiesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <entities>
     *
     * @param \google\cloud\language\v1\Entity $value
     * @return \google\cloud\language\v1\AnnotateTextResponse
     */
    public function addEntities(\google\cloud\language\v1\Entity $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <document_sentiment> has a value
     *
     * @return boolean
     */
    public function hasDocumentSentiment(){
      return $this->_has(4);
    }
    
    /**
     * Clear <document_sentiment> value
     *
     * @return \google\cloud\language\v1\AnnotateTextResponse
     */
    public function clearDocumentSentiment(){
      return $this->_clear(4);
    }
    
    /**
     * Get <document_sentiment> value
     *
     * @return \google\cloud\language\v1\Sentiment
     */
    public function getDocumentSentiment(){
      return $this->_get(4);
    }
    
    /**
     * Set <document_sentiment> value
     *
     * @param \google\cloud\language\v1\Sentiment $value
     * @return \google\cloud\language\v1\AnnotateTextResponse
     */
    public function setDocumentSentiment(\google\cloud\language\v1\Sentiment $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <language> has a value
     *
     * @return boolean
     */
    public function hasLanguage(){
      return $this->_has(5);
    }
    
    /**
     * Clear <language> value
     *
     * @return \google\cloud\language\v1\AnnotateTextResponse
     */
    public function clearLanguage(){
      return $this->_clear(5);
    }
    
    /**
     * Get <language> value
     *
     * @return string
     */
    public function getLanguage(){
      return $this->_get(5);
    }
    
    /**
     * Set <language> value
     *
     * @param string $value
     * @return \google\cloud\language\v1\AnnotateTextResponse
     */
    public function setLanguage( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\cloud\language\v1 {

  class LanguageServiceGrpcClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param google\cloud\language\v1\AnalyzeSentimentRequest $input
     */
    public function AnalyzeSentiment(\google\cloud\language\v1\AnalyzeSentimentRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.cloud.language.v1.LanguageService/AnalyzeSentiment', $argument, '\google\cloud\language\v1\AnalyzeSentimentResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\cloud\language\v1\AnalyzeEntitiesRequest $input
     */
    public function AnalyzeEntities(\google\cloud\language\v1\AnalyzeEntitiesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.cloud.language.v1.LanguageService/AnalyzeEntities', $argument, '\google\cloud\language\v1\AnalyzeEntitiesResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\cloud\language\v1\AnalyzeSyntaxRequest $input
     */
    public function AnalyzeSyntax(\google\cloud\language\v1\AnalyzeSyntaxRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.cloud.language.v1.LanguageService/AnalyzeSyntax', $argument, '\google\cloud\language\v1\AnalyzeSyntaxResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\cloud\language\v1\AnnotateTextRequest $input
     */
    public function AnnotateText(\google\cloud\language\v1\AnnotateTextRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.cloud.language.v1.LanguageService/AnnotateText', $argument, '\google\cloud\language\v1\AnnotateTextResponse::deserialize', $metadata, $options);
    }
  }
}
