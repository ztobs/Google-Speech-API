<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/monitoring/v3/metric.proto
//   Date: 2016-12-21 23:03:55

namespace google\monitoring\v3 {

  class Point extends \DrSlump\Protobuf\Message {

    /**  @var \google\monitoring\v3\TimeInterval */
    public $interval = null;
    
    /**  @var \google\monitoring\v3\TypedValue */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.Point');

      // OPTIONAL MESSAGE interval = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "interval";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\monitoring\v3\TimeInterval';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\monitoring\v3\TypedValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <interval> has a value
     *
     * @return boolean
     */
    public function hasInterval(){
      return $this->_has(1);
    }
    
    /**
     * Clear <interval> value
     *
     * @return \google\monitoring\v3\Point
     */
    public function clearInterval(){
      return $this->_clear(1);
    }
    
    /**
     * Get <interval> value
     *
     * @return \google\monitoring\v3\TimeInterval
     */
    public function getInterval(){
      return $this->_get(1);
    }
    
    /**
     * Set <interval> value
     *
     * @param \google\monitoring\v3\TimeInterval $value
     * @return \google\monitoring\v3\Point
     */
    public function setInterval(\google\monitoring\v3\TimeInterval $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\monitoring\v3\Point
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \google\monitoring\v3\TypedValue
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\monitoring\v3\TypedValue $value
     * @return \google\monitoring\v3\Point
     */
    public function setValue(\google\monitoring\v3\TypedValue $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\monitoring\v3 {

  class TimeSeries extends \DrSlump\Protobuf\Message {

    /**  @var \google\api\Metric */
    public $metric = null;
    
    /**  @var \google\api\MonitoredResource */
    public $resource = null;
    
    /**  @var int - \google\api\MetricDescriptor\MetricKind */
    public $metric_kind = null;
    
    /**  @var int - \google\api\MetricDescriptor\ValueType */
    public $value_type = null;
    
    /**  @var \google\monitoring\v3\Point[]  */
    public $points = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.TimeSeries');

      // OPTIONAL MESSAGE metric = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "metric";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\api\Metric';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE resource = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "resource";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\api\MonitoredResource';
      $descriptor->addField($f);

      // OPTIONAL ENUM metric_kind = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "metric_kind";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\api\MetricDescriptor\MetricKind';
      $descriptor->addField($f);

      // OPTIONAL ENUM value_type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "value_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\api\MetricDescriptor\ValueType';
      $descriptor->addField($f);

      // REPEATED MESSAGE points = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "points";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\monitoring\v3\Point';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <metric> has a value
     *
     * @return boolean
     */
    public function hasMetric(){
      return $this->_has(1);
    }
    
    /**
     * Clear <metric> value
     *
     * @return \google\monitoring\v3\TimeSeries
     */
    public function clearMetric(){
      return $this->_clear(1);
    }
    
    /**
     * Get <metric> value
     *
     * @return \google\api\Metric
     */
    public function getMetric(){
      return $this->_get(1);
    }
    
    /**
     * Set <metric> value
     *
     * @param \google\api\Metric $value
     * @return \google\monitoring\v3\TimeSeries
     */
    public function setMetric(\google\api\Metric $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <resource> has a value
     *
     * @return boolean
     */
    public function hasResource(){
      return $this->_has(2);
    }
    
    /**
     * Clear <resource> value
     *
     * @return \google\monitoring\v3\TimeSeries
     */
    public function clearResource(){
      return $this->_clear(2);
    }
    
    /**
     * Get <resource> value
     *
     * @return \google\api\MonitoredResource
     */
    public function getResource(){
      return $this->_get(2);
    }
    
    /**
     * Set <resource> value
     *
     * @param \google\api\MonitoredResource $value
     * @return \google\monitoring\v3\TimeSeries
     */
    public function setResource(\google\api\MonitoredResource $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <metric_kind> has a value
     *
     * @return boolean
     */
    public function hasMetricKind(){
      return $this->_has(3);
    }
    
    /**
     * Clear <metric_kind> value
     *
     * @return \google\monitoring\v3\TimeSeries
     */
    public function clearMetricKind(){
      return $this->_clear(3);
    }
    
    /**
     * Get <metric_kind> value
     *
     * @return int - \google\api\MetricDescriptor\MetricKind
     */
    public function getMetricKind(){
      return $this->_get(3);
    }
    
    /**
     * Set <metric_kind> value
     *
     * @param int - \google\api\MetricDescriptor\MetricKind $value
     * @return \google\monitoring\v3\TimeSeries
     */
    public function setMetricKind( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <value_type> has a value
     *
     * @return boolean
     */
    public function hasValueType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <value_type> value
     *
     * @return \google\monitoring\v3\TimeSeries
     */
    public function clearValueType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <value_type> value
     *
     * @return int - \google\api\MetricDescriptor\ValueType
     */
    public function getValueType(){
      return $this->_get(4);
    }
    
    /**
     * Set <value_type> value
     *
     * @param int - \google\api\MetricDescriptor\ValueType $value
     * @return \google\monitoring\v3\TimeSeries
     */
    public function setValueType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <points> has a value
     *
     * @return boolean
     */
    public function hasPoints(){
      return $this->_has(5);
    }
    
    /**
     * Clear <points> value
     *
     * @return \google\monitoring\v3\TimeSeries
     */
    public function clearPoints(){
      return $this->_clear(5);
    }
    
    /**
     * Get <points> value
     *
     * @param int $idx
     * @return \google\monitoring\v3\Point
     */
    public function getPoints($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <points> value
     *
     * @param \google\monitoring\v3\Point $value
     * @return \google\monitoring\v3\TimeSeries
     */
    public function setPoints(\google\monitoring\v3\Point $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <points>
     *
     * @return \google\monitoring\v3\Point[]
     */
    public function getPointsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <points>
     *
     * @param \google\monitoring\v3\Point $value
     * @return \google\monitoring\v3\TimeSeries
     */
    public function addPoints(\google\monitoring\v3\Point $value){
     return $this->_add(5, $value);
    }
  }
}

