<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/monitoring/v3/metric_service.proto
//   Date: 2016-12-21 23:03:55

namespace google\monitoring\v3 {

  class ListMonitoredResourceDescriptorsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $filter = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.ListMonitoredResourceDescriptorsRequest');

      // OPTIONAL STRING name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING filter = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\monitoring\v3\ListMonitoredResourceDescriptorsRequest
     */
    public function clearName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(5);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\monitoring\v3\ListMonitoredResourceDescriptorsRequest
     */
    public function setName( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(2);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \google\monitoring\v3\ListMonitoredResourceDescriptorsRequest
     */
    public function clearFilter(){
      return $this->_clear(2);
    }
    
    /**
     * Get <filter> value
     *
     * @return string
     */
    public function getFilter(){
      return $this->_get(2);
    }
    
    /**
     * Set <filter> value
     *
     * @param string $value
     * @return \google\monitoring\v3\ListMonitoredResourceDescriptorsRequest
     */
    public function setFilter( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\monitoring\v3\ListMonitoredResourceDescriptorsRequest
     */
    public function clearPageSize(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\monitoring\v3\ListMonitoredResourceDescriptorsRequest
     */
    public function setPageSize( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(4);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\monitoring\v3\ListMonitoredResourceDescriptorsRequest
     */
    public function clearPageToken(){
      return $this->_clear(4);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(4);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\monitoring\v3\ListMonitoredResourceDescriptorsRequest
     */
    public function setPageToken( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\monitoring\v3 {

  class ListMonitoredResourceDescriptorsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\api\MonitoredResourceDescriptor[]  */
    public $resource_descriptors = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.ListMonitoredResourceDescriptorsResponse');

      // REPEATED MESSAGE resource_descriptors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "resource_descriptors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\MonitoredResourceDescriptor';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <resource_descriptors> has a value
     *
     * @return boolean
     */
    public function hasResourceDescriptors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <resource_descriptors> value
     *
     * @return \google\monitoring\v3\ListMonitoredResourceDescriptorsResponse
     */
    public function clearResourceDescriptors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <resource_descriptors> value
     *
     * @param int $idx
     * @return \google\api\MonitoredResourceDescriptor
     */
    public function getResourceDescriptors($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <resource_descriptors> value
     *
     * @param \google\api\MonitoredResourceDescriptor $value
     * @return \google\monitoring\v3\ListMonitoredResourceDescriptorsResponse
     */
    public function setResourceDescriptors(\google\api\MonitoredResourceDescriptor $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <resource_descriptors>
     *
     * @return \google\api\MonitoredResourceDescriptor[]
     */
    public function getResourceDescriptorsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <resource_descriptors>
     *
     * @param \google\api\MonitoredResourceDescriptor $value
     * @return \google\monitoring\v3\ListMonitoredResourceDescriptorsResponse
     */
    public function addResourceDescriptors(\google\api\MonitoredResourceDescriptor $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\monitoring\v3\ListMonitoredResourceDescriptorsResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\monitoring\v3\ListMonitoredResourceDescriptorsResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\monitoring\v3 {

  class GetMonitoredResourceDescriptorRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.GetMonitoredResourceDescriptorRequest');

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\monitoring\v3\GetMonitoredResourceDescriptorRequest
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\monitoring\v3\GetMonitoredResourceDescriptorRequest
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\monitoring\v3 {

  class ListMetricDescriptorsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $filter = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.ListMetricDescriptorsRequest');

      // OPTIONAL STRING name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING filter = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\monitoring\v3\ListMetricDescriptorsRequest
     */
    public function clearName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(5);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\monitoring\v3\ListMetricDescriptorsRequest
     */
    public function setName( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(2);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \google\monitoring\v3\ListMetricDescriptorsRequest
     */
    public function clearFilter(){
      return $this->_clear(2);
    }
    
    /**
     * Get <filter> value
     *
     * @return string
     */
    public function getFilter(){
      return $this->_get(2);
    }
    
    /**
     * Set <filter> value
     *
     * @param string $value
     * @return \google\monitoring\v3\ListMetricDescriptorsRequest
     */
    public function setFilter( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\monitoring\v3\ListMetricDescriptorsRequest
     */
    public function clearPageSize(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\monitoring\v3\ListMetricDescriptorsRequest
     */
    public function setPageSize( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(4);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\monitoring\v3\ListMetricDescriptorsRequest
     */
    public function clearPageToken(){
      return $this->_clear(4);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(4);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\monitoring\v3\ListMetricDescriptorsRequest
     */
    public function setPageToken( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\monitoring\v3 {

  class ListMetricDescriptorsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\api\MetricDescriptor[]  */
    public $metric_descriptors = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.ListMetricDescriptorsResponse');

      // REPEATED MESSAGE metric_descriptors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "metric_descriptors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\MetricDescriptor';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <metric_descriptors> has a value
     *
     * @return boolean
     */
    public function hasMetricDescriptors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <metric_descriptors> value
     *
     * @return \google\monitoring\v3\ListMetricDescriptorsResponse
     */
    public function clearMetricDescriptors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <metric_descriptors> value
     *
     * @param int $idx
     * @return \google\api\MetricDescriptor
     */
    public function getMetricDescriptors($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <metric_descriptors> value
     *
     * @param \google\api\MetricDescriptor $value
     * @return \google\monitoring\v3\ListMetricDescriptorsResponse
     */
    public function setMetricDescriptors(\google\api\MetricDescriptor $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <metric_descriptors>
     *
     * @return \google\api\MetricDescriptor[]
     */
    public function getMetricDescriptorsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <metric_descriptors>
     *
     * @param \google\api\MetricDescriptor $value
     * @return \google\monitoring\v3\ListMetricDescriptorsResponse
     */
    public function addMetricDescriptors(\google\api\MetricDescriptor $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\monitoring\v3\ListMetricDescriptorsResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\monitoring\v3\ListMetricDescriptorsResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\monitoring\v3 {

  class GetMetricDescriptorRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.GetMetricDescriptorRequest');

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\monitoring\v3\GetMetricDescriptorRequest
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\monitoring\v3\GetMetricDescriptorRequest
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\monitoring\v3 {

  class CreateMetricDescriptorRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \google\api\MetricDescriptor */
    public $metric_descriptor = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.CreateMetricDescriptorRequest');

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE metric_descriptor = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "metric_descriptor";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\api\MetricDescriptor';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\monitoring\v3\CreateMetricDescriptorRequest
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\monitoring\v3\CreateMetricDescriptorRequest
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <metric_descriptor> has a value
     *
     * @return boolean
     */
    public function hasMetricDescriptor(){
      return $this->_has(2);
    }
    
    /**
     * Clear <metric_descriptor> value
     *
     * @return \google\monitoring\v3\CreateMetricDescriptorRequest
     */
    public function clearMetricDescriptor(){
      return $this->_clear(2);
    }
    
    /**
     * Get <metric_descriptor> value
     *
     * @return \google\api\MetricDescriptor
     */
    public function getMetricDescriptor(){
      return $this->_get(2);
    }
    
    /**
     * Set <metric_descriptor> value
     *
     * @param \google\api\MetricDescriptor $value
     * @return \google\monitoring\v3\CreateMetricDescriptorRequest
     */
    public function setMetricDescriptor(\google\api\MetricDescriptor $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\monitoring\v3 {

  class DeleteMetricDescriptorRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.DeleteMetricDescriptorRequest');

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\monitoring\v3\DeleteMetricDescriptorRequest
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\monitoring\v3\DeleteMetricDescriptorRequest
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\monitoring\v3\ListTimeSeriesRequest {

  class TimeSeriesView extends \DrSlump\Protobuf\Enum {
    const FULL = 0;
    const HEADERS = 1;
  }
}
namespace google\monitoring\v3 {

  class ListTimeSeriesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $filter = null;
    
    /**  @var \google\monitoring\v3\TimeInterval */
    public $interval = null;
    
    /**  @var \google\monitoring\v3\Aggregation */
    public $aggregation = null;
    
    /**  @var string */
    public $order_by = null;
    
    /**  @var int - \google\monitoring\v3\ListTimeSeriesRequest\TimeSeriesView */
    public $view = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.ListTimeSeriesRequest');

      // OPTIONAL STRING name = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING filter = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE interval = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "interval";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\monitoring\v3\TimeInterval';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE aggregation = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "aggregation";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\monitoring\v3\Aggregation';
      $descriptor->addField($f);

      // OPTIONAL STRING order_by = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "order_by";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM view = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "view";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\monitoring\v3\ListTimeSeriesRequest\TimeSeriesView';
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(10);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function clearName(){
      return $this->_clear(10);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(10);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function setName( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(2);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function clearFilter(){
      return $this->_clear(2);
    }
    
    /**
     * Get <filter> value
     *
     * @return string
     */
    public function getFilter(){
      return $this->_get(2);
    }
    
    /**
     * Set <filter> value
     *
     * @param string $value
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function setFilter( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <interval> has a value
     *
     * @return boolean
     */
    public function hasInterval(){
      return $this->_has(4);
    }
    
    /**
     * Clear <interval> value
     *
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function clearInterval(){
      return $this->_clear(4);
    }
    
    /**
     * Get <interval> value
     *
     * @return \google\monitoring\v3\TimeInterval
     */
    public function getInterval(){
      return $this->_get(4);
    }
    
    /**
     * Set <interval> value
     *
     * @param \google\monitoring\v3\TimeInterval $value
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function setInterval(\google\monitoring\v3\TimeInterval $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <aggregation> has a value
     *
     * @return boolean
     */
    public function hasAggregation(){
      return $this->_has(5);
    }
    
    /**
     * Clear <aggregation> value
     *
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function clearAggregation(){
      return $this->_clear(5);
    }
    
    /**
     * Get <aggregation> value
     *
     * @return \google\monitoring\v3\Aggregation
     */
    public function getAggregation(){
      return $this->_get(5);
    }
    
    /**
     * Set <aggregation> value
     *
     * @param \google\monitoring\v3\Aggregation $value
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function setAggregation(\google\monitoring\v3\Aggregation $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <order_by> has a value
     *
     * @return boolean
     */
    public function hasOrderBy(){
      return $this->_has(6);
    }
    
    /**
     * Clear <order_by> value
     *
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function clearOrderBy(){
      return $this->_clear(6);
    }
    
    /**
     * Get <order_by> value
     *
     * @return string
     */
    public function getOrderBy(){
      return $this->_get(6);
    }
    
    /**
     * Set <order_by> value
     *
     * @param string $value
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function setOrderBy( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <view> has a value
     *
     * @return boolean
     */
    public function hasView(){
      return $this->_has(7);
    }
    
    /**
     * Clear <view> value
     *
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function clearView(){
      return $this->_clear(7);
    }
    
    /**
     * Get <view> value
     *
     * @return int - \google\monitoring\v3\ListTimeSeriesRequest\TimeSeriesView
     */
    public function getView(){
      return $this->_get(7);
    }
    
    /**
     * Set <view> value
     *
     * @param int - \google\monitoring\v3\ListTimeSeriesRequest\TimeSeriesView $value
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function setView( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(8);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function clearPageSize(){
      return $this->_clear(8);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(8);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function setPageSize( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(9);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function clearPageToken(){
      return $this->_clear(9);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(9);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\monitoring\v3\ListTimeSeriesRequest
     */
    public function setPageToken( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace google\monitoring\v3 {

  class ListTimeSeriesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\monitoring\v3\TimeSeries[]  */
    public $time_series = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.ListTimeSeriesResponse');

      // REPEATED MESSAGE time_series = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "time_series";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\monitoring\v3\TimeSeries';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <time_series> has a value
     *
     * @return boolean
     */
    public function hasTimeSeries(){
      return $this->_has(1);
    }
    
    /**
     * Clear <time_series> value
     *
     * @return \google\monitoring\v3\ListTimeSeriesResponse
     */
    public function clearTimeSeries(){
      return $this->_clear(1);
    }
    
    /**
     * Get <time_series> value
     *
     * @param int $idx
     * @return \google\monitoring\v3\TimeSeries
     */
    public function getTimeSeries($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <time_series> value
     *
     * @param \google\monitoring\v3\TimeSeries $value
     * @return \google\monitoring\v3\ListTimeSeriesResponse
     */
    public function setTimeSeries(\google\monitoring\v3\TimeSeries $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <time_series>
     *
     * @return \google\monitoring\v3\TimeSeries[]
     */
    public function getTimeSeriesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <time_series>
     *
     * @param \google\monitoring\v3\TimeSeries $value
     * @return \google\monitoring\v3\ListTimeSeriesResponse
     */
    public function addTimeSeries(\google\monitoring\v3\TimeSeries $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\monitoring\v3\ListTimeSeriesResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\monitoring\v3\ListTimeSeriesResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\monitoring\v3 {

  class CreateTimeSeriesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \google\monitoring\v3\TimeSeries[]  */
    public $time_series = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.CreateTimeSeriesRequest');

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE time_series = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "time_series";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\monitoring\v3\TimeSeries';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\monitoring\v3\CreateTimeSeriesRequest
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\monitoring\v3\CreateTimeSeriesRequest
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <time_series> has a value
     *
     * @return boolean
     */
    public function hasTimeSeries(){
      return $this->_has(2);
    }
    
    /**
     * Clear <time_series> value
     *
     * @return \google\monitoring\v3\CreateTimeSeriesRequest
     */
    public function clearTimeSeries(){
      return $this->_clear(2);
    }
    
    /**
     * Get <time_series> value
     *
     * @param int $idx
     * @return \google\monitoring\v3\TimeSeries
     */
    public function getTimeSeries($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <time_series> value
     *
     * @param \google\monitoring\v3\TimeSeries $value
     * @return \google\monitoring\v3\CreateTimeSeriesRequest
     */
    public function setTimeSeries(\google\monitoring\v3\TimeSeries $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <time_series>
     *
     * @return \google\monitoring\v3\TimeSeries[]
     */
    public function getTimeSeriesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <time_series>
     *
     * @param \google\monitoring\v3\TimeSeries $value
     * @return \google\monitoring\v3\CreateTimeSeriesRequest
     */
    public function addTimeSeries(\google\monitoring\v3\TimeSeries $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\monitoring\v3 {

  class CreateTimeSeriesError extends \DrSlump\Protobuf\Message {

    /**  @var \google\monitoring\v3\TimeSeries */
    public $time_series = null;
    
    /**  @var \google\rpc\Status */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.monitoring.v3.CreateTimeSeriesError');

      // OPTIONAL MESSAGE time_series = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "time_series";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\monitoring\v3\TimeSeries';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\rpc\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <time_series> has a value
     *
     * @return boolean
     */
    public function hasTimeSeries(){
      return $this->_has(1);
    }
    
    /**
     * Clear <time_series> value
     *
     * @return \google\monitoring\v3\CreateTimeSeriesError
     */
    public function clearTimeSeries(){
      return $this->_clear(1);
    }
    
    /**
     * Get <time_series> value
     *
     * @return \google\monitoring\v3\TimeSeries
     */
    public function getTimeSeries(){
      return $this->_get(1);
    }
    
    /**
     * Set <time_series> value
     *
     * @param \google\monitoring\v3\TimeSeries $value
     * @return \google\monitoring\v3\CreateTimeSeriesError
     */
    public function setTimeSeries(\google\monitoring\v3\TimeSeries $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \google\monitoring\v3\CreateTimeSeriesError
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return \google\rpc\Status
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param \google\rpc\Status $value
     * @return \google\monitoring\v3\CreateTimeSeriesError
     */
    public function setStatus(\google\rpc\Status $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\monitoring\v3 {

  class MetricServiceGrpcClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param google\monitoring\v3\ListMonitoredResourceDescriptorsRequest $input
     */
    public function ListMonitoredResourceDescriptors(\google\monitoring\v3\ListMonitoredResourceDescriptorsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.monitoring.v3.MetricService/ListMonitoredResourceDescriptors', $argument, '\google\monitoring\v3\ListMonitoredResourceDescriptorsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\monitoring\v3\GetMonitoredResourceDescriptorRequest $input
     */
    public function GetMonitoredResourceDescriptor(\google\monitoring\v3\GetMonitoredResourceDescriptorRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.monitoring.v3.MetricService/GetMonitoredResourceDescriptor', $argument, '\google\api\MonitoredResourceDescriptor::deserialize', $metadata, $options);
    }
    /**
     * @param google\monitoring\v3\ListMetricDescriptorsRequest $input
     */
    public function ListMetricDescriptors(\google\monitoring\v3\ListMetricDescriptorsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.monitoring.v3.MetricService/ListMetricDescriptors', $argument, '\google\monitoring\v3\ListMetricDescriptorsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\monitoring\v3\GetMetricDescriptorRequest $input
     */
    public function GetMetricDescriptor(\google\monitoring\v3\GetMetricDescriptorRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.monitoring.v3.MetricService/GetMetricDescriptor', $argument, '\google\api\MetricDescriptor::deserialize', $metadata, $options);
    }
    /**
     * @param google\monitoring\v3\CreateMetricDescriptorRequest $input
     */
    public function CreateMetricDescriptor(\google\monitoring\v3\CreateMetricDescriptorRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.monitoring.v3.MetricService/CreateMetricDescriptor', $argument, '\google\api\MetricDescriptor::deserialize', $metadata, $options);
    }
    /**
     * @param google\monitoring\v3\DeleteMetricDescriptorRequest $input
     */
    public function DeleteMetricDescriptor(\google\monitoring\v3\DeleteMetricDescriptorRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.monitoring.v3.MetricService/DeleteMetricDescriptor', $argument, '\google\protobuf\EmptyC::deserialize', $metadata, $options);
    }
    /**
     * @param google\monitoring\v3\ListTimeSeriesRequest $input
     */
    public function ListTimeSeries(\google\monitoring\v3\ListTimeSeriesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.monitoring.v3.MetricService/ListTimeSeries', $argument, '\google\monitoring\v3\ListTimeSeriesResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\monitoring\v3\CreateTimeSeriesRequest $input
     */
    public function CreateTimeSeries(\google\monitoring\v3\CreateTimeSeriesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.monitoring.v3.MetricService/CreateTimeSeries', $argument, '\google\protobuf\EmptyC::deserialize', $metadata, $options);
    }
  }
}
