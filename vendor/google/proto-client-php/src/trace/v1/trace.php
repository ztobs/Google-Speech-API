<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/devtools/cloudtrace/v1/trace.proto
//   Date: 2016-12-21 23:04:00

namespace google\devtools\cloudtrace\v1 {

  class Trace extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $trace_id = null;
    
    /**  @var \google\devtools\cloudtrace\v1\TraceSpan[]  */
    public $spans = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudtrace.v1.Trace');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING trace_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "trace_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE spans = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "spans";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\cloudtrace\v1\TraceSpan';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudtrace\v1\Trace
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudtrace\v1\Trace
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <trace_id> has a value
     *
     * @return boolean
     */
    public function hasTraceId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <trace_id> value
     *
     * @return \google\devtools\cloudtrace\v1\Trace
     */
    public function clearTraceId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <trace_id> value
     *
     * @return string
     */
    public function getTraceId(){
      return $this->_get(2);
    }
    
    /**
     * Set <trace_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudtrace\v1\Trace
     */
    public function setTraceId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <spans> has a value
     *
     * @return boolean
     */
    public function hasSpans(){
      return $this->_has(3);
    }
    
    /**
     * Clear <spans> value
     *
     * @return \google\devtools\cloudtrace\v1\Trace
     */
    public function clearSpans(){
      return $this->_clear(3);
    }
    
    /**
     * Get <spans> value
     *
     * @param int $idx
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function getSpans($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <spans> value
     *
     * @param \google\devtools\cloudtrace\v1\TraceSpan $value
     * @return \google\devtools\cloudtrace\v1\Trace
     */
    public function setSpans(\google\devtools\cloudtrace\v1\TraceSpan $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <spans>
     *
     * @return \google\devtools\cloudtrace\v1\TraceSpan[]
     */
    public function getSpansList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <spans>
     *
     * @param \google\devtools\cloudtrace\v1\TraceSpan $value
     * @return \google\devtools\cloudtrace\v1\Trace
     */
    public function addSpans(\google\devtools\cloudtrace\v1\TraceSpan $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\devtools\cloudtrace\v1 {

  class Traces extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\cloudtrace\v1\Trace[]  */
    public $traces = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudtrace.v1.Traces');

      // REPEATED MESSAGE traces = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "traces";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\cloudtrace\v1\Trace';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <traces> has a value
     *
     * @return boolean
     */
    public function hasTraces(){
      return $this->_has(1);
    }
    
    /**
     * Clear <traces> value
     *
     * @return \google\devtools\cloudtrace\v1\Traces
     */
    public function clearTraces(){
      return $this->_clear(1);
    }
    
    /**
     * Get <traces> value
     *
     * @param int $idx
     * @return \google\devtools\cloudtrace\v1\Trace
     */
    public function getTraces($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <traces> value
     *
     * @param \google\devtools\cloudtrace\v1\Trace $value
     * @return \google\devtools\cloudtrace\v1\Traces
     */
    public function setTraces(\google\devtools\cloudtrace\v1\Trace $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <traces>
     *
     * @return \google\devtools\cloudtrace\v1\Trace[]
     */
    public function getTracesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <traces>
     *
     * @param \google\devtools\cloudtrace\v1\Trace $value
     * @return \google\devtools\cloudtrace\v1\Traces
     */
    public function addTraces(\google\devtools\cloudtrace\v1\Trace $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\devtools\cloudtrace\v1\TraceSpan {

  class SpanKind extends \DrSlump\Protobuf\Enum {
    const SPAN_KIND_UNSPECIFIED = 0;
    const RPC_SERVER = 1;
    const RPC_CLIENT = 2;
  }
}
namespace google\devtools\cloudtrace\v1\TraceSpan {

  class LabelsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudtrace.v1.TraceSpan.LabelsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\devtools\cloudtrace\v1\TraceSpan\LabelsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\devtools\cloudtrace\v1\TraceSpan\LabelsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\devtools\cloudtrace\v1\TraceSpan\LabelsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\devtools\cloudtrace\v1\TraceSpan\LabelsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudtrace\v1 {

  class TraceSpan extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $span_id = null;
    
    /**  @var int - \google\devtools\cloudtrace\v1\TraceSpan\SpanKind */
    public $kind = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $start_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $end_time = null;
    
    /**  @var int */
    public $parent_span_id = null;
    
    /**  @var \google\devtools\cloudtrace\v1\TraceSpan\LabelsEntry[]  */
    public $labels = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudtrace.v1.TraceSpan');

      // OPTIONAL FIXED64 span_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "span_id";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM kind = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "kind";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudtrace\v1\TraceSpan\SpanKind';
      $descriptor->addField($f);

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE start_time = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "start_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE end_time = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "end_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL FIXED64 parent_span_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "parent_span_id";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE labels = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\cloudtrace\v1\TraceSpan\LabelsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <span_id> has a value
     *
     * @return boolean
     */
    public function hasSpanId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <span_id> value
     *
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function clearSpanId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <span_id> value
     *
     * @return int
     */
    public function getSpanId(){
      return $this->_get(1);
    }
    
    /**
     * Set <span_id> value
     *
     * @param int $value
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function setSpanId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <kind> has a value
     *
     * @return boolean
     */
    public function hasKind(){
      return $this->_has(2);
    }
    
    /**
     * Clear <kind> value
     *
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function clearKind(){
      return $this->_clear(2);
    }
    
    /**
     * Get <kind> value
     *
     * @return int - \google\devtools\cloudtrace\v1\TraceSpan\SpanKind
     */
    public function getKind(){
      return $this->_get(2);
    }
    
    /**
     * Set <kind> value
     *
     * @param int - \google\devtools\cloudtrace\v1\TraceSpan\SpanKind $value
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function setKind( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <start_time> has a value
     *
     * @return boolean
     */
    public function hasStartTime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <start_time> value
     *
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function clearStartTime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <start_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getStartTime(){
      return $this->_get(4);
    }
    
    /**
     * Set <start_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function setStartTime(\google\protobuf\Timestamp $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <end_time> has a value
     *
     * @return boolean
     */
    public function hasEndTime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <end_time> value
     *
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function clearEndTime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <end_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getEndTime(){
      return $this->_get(5);
    }
    
    /**
     * Set <end_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function setEndTime(\google\protobuf\Timestamp $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <parent_span_id> has a value
     *
     * @return boolean
     */
    public function hasParentSpanId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <parent_span_id> value
     *
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function clearParentSpanId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <parent_span_id> value
     *
     * @return int
     */
    public function getParentSpanId(){
      return $this->_get(6);
    }
    
    /**
     * Set <parent_span_id> value
     *
     * @param int $value
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function setParentSpanId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(7);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function clearLabels(){
      return $this->_clear(7);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return \google\devtools\cloudtrace\v1\TraceSpan\LabelsEntry
     */
    public function getLabels($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param \google\devtools\cloudtrace\v1\TraceSpan\LabelsEntry $value
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function setLabels(\google\devtools\cloudtrace\v1\TraceSpan\LabelsEntry $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return \google\devtools\cloudtrace\v1\TraceSpan\LabelsEntry[]
     */
    public function getLabelsList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param \google\devtools\cloudtrace\v1\TraceSpan\LabelsEntry $value
     * @return \google\devtools\cloudtrace\v1\TraceSpan
     */
    public function addLabels(\google\devtools\cloudtrace\v1\TraceSpan\LabelsEntry $value){
     return $this->_add(7, $value);
    }
  }
}

namespace google\devtools\cloudtrace\v1\ListTracesRequest {

  class ViewType extends \DrSlump\Protobuf\Enum {
    const VIEW_TYPE_UNSPECIFIED = 0;
    const MINIMAL = 1;
    const ROOTSPAN = 2;
    const COMPLETE = 3;
  }
}
namespace google\devtools\cloudtrace\v1 {

  class ListTracesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var int - \google\devtools\cloudtrace\v1\ListTracesRequest\ViewType */
    public $view = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $start_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $end_time = null;
    
    /**  @var string */
    public $filter = null;
    
    /**  @var string */
    public $order_by = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudtrace.v1.ListTracesRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM view = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "view";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudtrace\v1\ListTracesRequest\ViewType';
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE start_time = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "start_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE end_time = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "end_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL STRING filter = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING order_by = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "order_by";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <view> has a value
     *
     * @return boolean
     */
    public function hasView(){
      return $this->_has(2);
    }
    
    /**
     * Clear <view> value
     *
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function clearView(){
      return $this->_clear(2);
    }
    
    /**
     * Get <view> value
     *
     * @return int - \google\devtools\cloudtrace\v1\ListTracesRequest\ViewType
     */
    public function getView(){
      return $this->_get(2);
    }
    
    /**
     * Set <view> value
     *
     * @param int - \google\devtools\cloudtrace\v1\ListTracesRequest\ViewType $value
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function setView( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function clearPageSize(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function setPageSize( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(4);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function clearPageToken(){
      return $this->_clear(4);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(4);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function setPageToken( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <start_time> has a value
     *
     * @return boolean
     */
    public function hasStartTime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <start_time> value
     *
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function clearStartTime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <start_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getStartTime(){
      return $this->_get(5);
    }
    
    /**
     * Set <start_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function setStartTime(\google\protobuf\Timestamp $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <end_time> has a value
     *
     * @return boolean
     */
    public function hasEndTime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <end_time> value
     *
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function clearEndTime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <end_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getEndTime(){
      return $this->_get(6);
    }
    
    /**
     * Set <end_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function setEndTime(\google\protobuf\Timestamp $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(7);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function clearFilter(){
      return $this->_clear(7);
    }
    
    /**
     * Get <filter> value
     *
     * @return string
     */
    public function getFilter(){
      return $this->_get(7);
    }
    
    /**
     * Set <filter> value
     *
     * @param string $value
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function setFilter( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <order_by> has a value
     *
     * @return boolean
     */
    public function hasOrderBy(){
      return $this->_has(8);
    }
    
    /**
     * Clear <order_by> value
     *
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function clearOrderBy(){
      return $this->_clear(8);
    }
    
    /**
     * Get <order_by> value
     *
     * @return string
     */
    public function getOrderBy(){
      return $this->_get(8);
    }
    
    /**
     * Set <order_by> value
     *
     * @param string $value
     * @return \google\devtools\cloudtrace\v1\ListTracesRequest
     */
    public function setOrderBy( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace google\devtools\cloudtrace\v1 {

  class ListTracesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\cloudtrace\v1\Trace[]  */
    public $traces = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudtrace.v1.ListTracesResponse');

      // REPEATED MESSAGE traces = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "traces";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\cloudtrace\v1\Trace';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <traces> has a value
     *
     * @return boolean
     */
    public function hasTraces(){
      return $this->_has(1);
    }
    
    /**
     * Clear <traces> value
     *
     * @return \google\devtools\cloudtrace\v1\ListTracesResponse
     */
    public function clearTraces(){
      return $this->_clear(1);
    }
    
    /**
     * Get <traces> value
     *
     * @param int $idx
     * @return \google\devtools\cloudtrace\v1\Trace
     */
    public function getTraces($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <traces> value
     *
     * @param \google\devtools\cloudtrace\v1\Trace $value
     * @return \google\devtools\cloudtrace\v1\ListTracesResponse
     */
    public function setTraces(\google\devtools\cloudtrace\v1\Trace $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <traces>
     *
     * @return \google\devtools\cloudtrace\v1\Trace[]
     */
    public function getTracesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <traces>
     *
     * @param \google\devtools\cloudtrace\v1\Trace $value
     * @return \google\devtools\cloudtrace\v1\ListTracesResponse
     */
    public function addTraces(\google\devtools\cloudtrace\v1\Trace $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\devtools\cloudtrace\v1\ListTracesResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\devtools\cloudtrace\v1\ListTracesResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudtrace\v1 {

  class GetTraceRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $trace_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudtrace.v1.GetTraceRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING trace_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "trace_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudtrace\v1\GetTraceRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudtrace\v1\GetTraceRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <trace_id> has a value
     *
     * @return boolean
     */
    public function hasTraceId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <trace_id> value
     *
     * @return \google\devtools\cloudtrace\v1\GetTraceRequest
     */
    public function clearTraceId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <trace_id> value
     *
     * @return string
     */
    public function getTraceId(){
      return $this->_get(2);
    }
    
    /**
     * Set <trace_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudtrace\v1\GetTraceRequest
     */
    public function setTraceId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudtrace\v1 {

  class PatchTracesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var \google\devtools\cloudtrace\v1\Traces */
    public $traces = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudtrace.v1.PatchTracesRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE traces = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "traces";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudtrace\v1\Traces';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudtrace\v1\PatchTracesRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudtrace\v1\PatchTracesRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <traces> has a value
     *
     * @return boolean
     */
    public function hasTraces(){
      return $this->_has(2);
    }
    
    /**
     * Clear <traces> value
     *
     * @return \google\devtools\cloudtrace\v1\PatchTracesRequest
     */
    public function clearTraces(){
      return $this->_clear(2);
    }
    
    /**
     * Get <traces> value
     *
     * @return \google\devtools\cloudtrace\v1\Traces
     */
    public function getTraces(){
      return $this->_get(2);
    }
    
    /**
     * Set <traces> value
     *
     * @param \google\devtools\cloudtrace\v1\Traces $value
     * @return \google\devtools\cloudtrace\v1\PatchTracesRequest
     */
    public function setTraces(\google\devtools\cloudtrace\v1\Traces $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudtrace\v1 {

  class TraceServiceGrpcClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param google\devtools\cloudtrace\v1\ListTracesRequest $input
     */
    public function ListTraces(\google\devtools\cloudtrace\v1\ListTracesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.cloudtrace.v1.TraceService/ListTraces', $argument, '\google\devtools\cloudtrace\v1\ListTracesResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\cloudtrace\v1\GetTraceRequest $input
     */
    public function GetTrace(\google\devtools\cloudtrace\v1\GetTraceRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.cloudtrace.v1.TraceService/GetTrace', $argument, '\google\devtools\cloudtrace\v1\Trace::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\cloudtrace\v1\PatchTracesRequest $input
     */
    public function PatchTraces(\google\devtools\cloudtrace\v1\PatchTracesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.cloudtrace.v1.TraceService/PatchTraces', $argument, '\google\protobuf\EmptyC::deserialize', $metadata, $options);
    }
  }
}
