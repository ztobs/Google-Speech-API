<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/spanner/admin/instance/v1/spanner_instance_admin.proto
//   Date: 2016-12-14 20:36:07

namespace google\spanner\admin\instance\v1 {

  class InstanceConfig extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $display_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.InstanceConfig');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING display_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "display_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\spanner\admin\instance\v1\InstanceConfig
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\InstanceConfig
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <display_name> has a value
     *
     * @return boolean
     */
    public function hasDisplayName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <display_name> value
     *
     * @return \google\spanner\admin\instance\v1\InstanceConfig
     */
    public function clearDisplayName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <display_name> value
     *
     * @return string
     */
    public function getDisplayName(){
      return $this->_get(2);
    }
    
    /**
     * Set <display_name> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\InstanceConfig
     */
    public function setDisplayName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1\Instance {

  class State extends \DrSlump\Protobuf\Enum {
    const STATE_UNSPECIFIED = 0;
    const CREATING = 1;
    const READY = 2;
  }
}
namespace google\spanner\admin\instance\v1\Instance {

  class LabelsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.Instance.LabelsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\spanner\admin\instance\v1\Instance\LabelsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\Instance\LabelsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\spanner\admin\instance\v1\Instance\LabelsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\Instance\LabelsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1 {

  class Instance extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $config = null;
    
    /**  @var string */
    public $display_name = null;
    
    /**  @var int */
    public $node_count = null;
    
    /**  @var int - \google\spanner\admin\instance\v1\Instance\State */
    public $state = null;
    
    /**  @var \google\spanner\admin\instance\v1\Instance\LabelsEntry[]  */
    public $labels = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.Instance');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING config = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "config";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING display_name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "display_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 node_count = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "node_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\spanner\admin\instance\v1\Instance\State';
      $descriptor->addField($f);

      // REPEATED MESSAGE labels = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\spanner\admin\instance\v1\Instance\LabelsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <config> has a value
     *
     * @return boolean
     */
    public function hasConfig(){
      return $this->_has(2);
    }
    
    /**
     * Clear <config> value
     *
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function clearConfig(){
      return $this->_clear(2);
    }
    
    /**
     * Get <config> value
     *
     * @return string
     */
    public function getConfig(){
      return $this->_get(2);
    }
    
    /**
     * Set <config> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function setConfig( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <display_name> has a value
     *
     * @return boolean
     */
    public function hasDisplayName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <display_name> value
     *
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function clearDisplayName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <display_name> value
     *
     * @return string
     */
    public function getDisplayName(){
      return $this->_get(3);
    }
    
    /**
     * Set <display_name> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function setDisplayName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <node_count> has a value
     *
     * @return boolean
     */
    public function hasNodeCount(){
      return $this->_has(5);
    }
    
    /**
     * Clear <node_count> value
     *
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function clearNodeCount(){
      return $this->_clear(5);
    }
    
    /**
     * Get <node_count> value
     *
     * @return int
     */
    public function getNodeCount(){
      return $this->_get(5);
    }
    
    /**
     * Set <node_count> value
     *
     * @param int $value
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function setNodeCount( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(6);
    }
    
    /**
     * Clear <state> value
     *
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function clearState(){
      return $this->_clear(6);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \google\spanner\admin\instance\v1\Instance\State
     */
    public function getState(){
      return $this->_get(6);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \google\spanner\admin\instance\v1\Instance\State $value
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function setState( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(7);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function clearLabels(){
      return $this->_clear(7);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return \google\spanner\admin\instance\v1\Instance\LabelsEntry
     */
    public function getLabels($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param \google\spanner\admin\instance\v1\Instance\LabelsEntry $value
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function setLabels(\google\spanner\admin\instance\v1\Instance\LabelsEntry $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return \google\spanner\admin\instance\v1\Instance\LabelsEntry[]
     */
    public function getLabelsList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param \google\spanner\admin\instance\v1\Instance\LabelsEntry $value
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function addLabels(\google\spanner\admin\instance\v1\Instance\LabelsEntry $value){
     return $this->_add(7, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1 {

  class ListInstanceConfigsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $parent = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.ListInstanceConfigsRequest');

      // OPTIONAL STRING parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \google\spanner\admin\instance\v1\ListInstanceConfigsRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return string
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\ListInstanceConfigsRequest
     */
    public function setParent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\spanner\admin\instance\v1\ListInstanceConfigsRequest
     */
    public function clearPageSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\spanner\admin\instance\v1\ListInstanceConfigsRequest
     */
    public function setPageSize( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\spanner\admin\instance\v1\ListInstanceConfigsRequest
     */
    public function clearPageToken(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\ListInstanceConfigsRequest
     */
    public function setPageToken( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1 {

  class ListInstanceConfigsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\spanner\admin\instance\v1\InstanceConfig[]  */
    public $instance_configs = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.ListInstanceConfigsResponse');

      // REPEATED MESSAGE instance_configs = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "instance_configs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\spanner\admin\instance\v1\InstanceConfig';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <instance_configs> has a value
     *
     * @return boolean
     */
    public function hasInstanceConfigs(){
      return $this->_has(1);
    }
    
    /**
     * Clear <instance_configs> value
     *
     * @return \google\spanner\admin\instance\v1\ListInstanceConfigsResponse
     */
    public function clearInstanceConfigs(){
      return $this->_clear(1);
    }
    
    /**
     * Get <instance_configs> value
     *
     * @param int $idx
     * @return \google\spanner\admin\instance\v1\InstanceConfig
     */
    public function getInstanceConfigs($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <instance_configs> value
     *
     * @param \google\spanner\admin\instance\v1\InstanceConfig $value
     * @return \google\spanner\admin\instance\v1\ListInstanceConfigsResponse
     */
    public function setInstanceConfigs(\google\spanner\admin\instance\v1\InstanceConfig $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <instance_configs>
     *
     * @return \google\spanner\admin\instance\v1\InstanceConfig[]
     */
    public function getInstanceConfigsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <instance_configs>
     *
     * @param \google\spanner\admin\instance\v1\InstanceConfig $value
     * @return \google\spanner\admin\instance\v1\ListInstanceConfigsResponse
     */
    public function addInstanceConfigs(\google\spanner\admin\instance\v1\InstanceConfig $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\spanner\admin\instance\v1\ListInstanceConfigsResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\ListInstanceConfigsResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1 {

  class GetInstanceConfigRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.GetInstanceConfigRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\spanner\admin\instance\v1\GetInstanceConfigRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\GetInstanceConfigRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1 {

  class GetInstanceRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.GetInstanceRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\spanner\admin\instance\v1\GetInstanceRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\GetInstanceRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1 {

  class CreateInstanceRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $parent = null;
    
    /**  @var string */
    public $instance_id = null;
    
    /**  @var \google\spanner\admin\instance\v1\Instance */
    public $instance = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.CreateInstanceRequest');

      // OPTIONAL STRING parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING instance_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "instance_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE instance = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "instance";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\spanner\admin\instance\v1\Instance';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \google\spanner\admin\instance\v1\CreateInstanceRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return string
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\CreateInstanceRequest
     */
    public function setParent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <instance_id> has a value
     *
     * @return boolean
     */
    public function hasInstanceId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <instance_id> value
     *
     * @return \google\spanner\admin\instance\v1\CreateInstanceRequest
     */
    public function clearInstanceId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <instance_id> value
     *
     * @return string
     */
    public function getInstanceId(){
      return $this->_get(2);
    }
    
    /**
     * Set <instance_id> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\CreateInstanceRequest
     */
    public function setInstanceId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <instance> has a value
     *
     * @return boolean
     */
    public function hasInstance(){
      return $this->_has(3);
    }
    
    /**
     * Clear <instance> value
     *
     * @return \google\spanner\admin\instance\v1\CreateInstanceRequest
     */
    public function clearInstance(){
      return $this->_clear(3);
    }
    
    /**
     * Get <instance> value
     *
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function getInstance(){
      return $this->_get(3);
    }
    
    /**
     * Set <instance> value
     *
     * @param \google\spanner\admin\instance\v1\Instance $value
     * @return \google\spanner\admin\instance\v1\CreateInstanceRequest
     */
    public function setInstance(\google\spanner\admin\instance\v1\Instance $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1 {

  class ListInstancesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $parent = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    
    /**  @var string */
    public $filter = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.ListInstancesRequest');

      // OPTIONAL STRING parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING filter = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \google\spanner\admin\instance\v1\ListInstancesRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return string
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\ListInstancesRequest
     */
    public function setParent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\spanner\admin\instance\v1\ListInstancesRequest
     */
    public function clearPageSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\spanner\admin\instance\v1\ListInstancesRequest
     */
    public function setPageSize( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\spanner\admin\instance\v1\ListInstancesRequest
     */
    public function clearPageToken(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\ListInstancesRequest
     */
    public function setPageToken( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(4);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \google\spanner\admin\instance\v1\ListInstancesRequest
     */
    public function clearFilter(){
      return $this->_clear(4);
    }
    
    /**
     * Get <filter> value
     *
     * @return string
     */
    public function getFilter(){
      return $this->_get(4);
    }
    
    /**
     * Set <filter> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\ListInstancesRequest
     */
    public function setFilter( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1 {

  class ListInstancesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\spanner\admin\instance\v1\Instance[]  */
    public $instances = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.ListInstancesResponse');

      // REPEATED MESSAGE instances = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "instances";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\spanner\admin\instance\v1\Instance';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <instances> has a value
     *
     * @return boolean
     */
    public function hasInstances(){
      return $this->_has(1);
    }
    
    /**
     * Clear <instances> value
     *
     * @return \google\spanner\admin\instance\v1\ListInstancesResponse
     */
    public function clearInstances(){
      return $this->_clear(1);
    }
    
    /**
     * Get <instances> value
     *
     * @param int $idx
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function getInstances($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <instances> value
     *
     * @param \google\spanner\admin\instance\v1\Instance $value
     * @return \google\spanner\admin\instance\v1\ListInstancesResponse
     */
    public function setInstances(\google\spanner\admin\instance\v1\Instance $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <instances>
     *
     * @return \google\spanner\admin\instance\v1\Instance[]
     */
    public function getInstancesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <instances>
     *
     * @param \google\spanner\admin\instance\v1\Instance $value
     * @return \google\spanner\admin\instance\v1\ListInstancesResponse
     */
    public function addInstances(\google\spanner\admin\instance\v1\Instance $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\spanner\admin\instance\v1\ListInstancesResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\ListInstancesResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1 {

  class UpdateInstanceRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\spanner\admin\instance\v1\Instance */
    public $instance = null;
    
    /**  @var \google\protobuf\FieldMask */
    public $field_mask = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.UpdateInstanceRequest');

      // OPTIONAL MESSAGE instance = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "instance";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\spanner\admin\instance\v1\Instance';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE field_mask = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "field_mask";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\FieldMask';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <instance> has a value
     *
     * @return boolean
     */
    public function hasInstance(){
      return $this->_has(1);
    }
    
    /**
     * Clear <instance> value
     *
     * @return \google\spanner\admin\instance\v1\UpdateInstanceRequest
     */
    public function clearInstance(){
      return $this->_clear(1);
    }
    
    /**
     * Get <instance> value
     *
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function getInstance(){
      return $this->_get(1);
    }
    
    /**
     * Set <instance> value
     *
     * @param \google\spanner\admin\instance\v1\Instance $value
     * @return \google\spanner\admin\instance\v1\UpdateInstanceRequest
     */
    public function setInstance(\google\spanner\admin\instance\v1\Instance $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <field_mask> has a value
     *
     * @return boolean
     */
    public function hasFieldMask(){
      return $this->_has(2);
    }
    
    /**
     * Clear <field_mask> value
     *
     * @return \google\spanner\admin\instance\v1\UpdateInstanceRequest
     */
    public function clearFieldMask(){
      return $this->_clear(2);
    }
    
    /**
     * Get <field_mask> value
     *
     * @return \google\protobuf\FieldMask
     */
    public function getFieldMask(){
      return $this->_get(2);
    }
    
    /**
     * Set <field_mask> value
     *
     * @param \google\protobuf\FieldMask $value
     * @return \google\spanner\admin\instance\v1\UpdateInstanceRequest
     */
    public function setFieldMask(\google\protobuf\FieldMask $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1 {

  class DeleteInstanceRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.DeleteInstanceRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\spanner\admin\instance\v1\DeleteInstanceRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\spanner\admin\instance\v1\DeleteInstanceRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1 {

  class CreateInstanceMetadata extends \DrSlump\Protobuf\Message {

    /**  @var \google\spanner\admin\instance\v1\Instance */
    public $instance = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $start_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $cancel_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $end_time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.CreateInstanceMetadata');

      // OPTIONAL MESSAGE instance = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "instance";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\spanner\admin\instance\v1\Instance';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE start_time = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "start_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cancel_time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cancel_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE end_time = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "end_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <instance> has a value
     *
     * @return boolean
     */
    public function hasInstance(){
      return $this->_has(1);
    }
    
    /**
     * Clear <instance> value
     *
     * @return \google\spanner\admin\instance\v1\CreateInstanceMetadata
     */
    public function clearInstance(){
      return $this->_clear(1);
    }
    
    /**
     * Get <instance> value
     *
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function getInstance(){
      return $this->_get(1);
    }
    
    /**
     * Set <instance> value
     *
     * @param \google\spanner\admin\instance\v1\Instance $value
     * @return \google\spanner\admin\instance\v1\CreateInstanceMetadata
     */
    public function setInstance(\google\spanner\admin\instance\v1\Instance $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <start_time> has a value
     *
     * @return boolean
     */
    public function hasStartTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <start_time> value
     *
     * @return \google\spanner\admin\instance\v1\CreateInstanceMetadata
     */
    public function clearStartTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <start_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getStartTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <start_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\spanner\admin\instance\v1\CreateInstanceMetadata
     */
    public function setStartTime(\google\protobuf\Timestamp $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cancel_time> has a value
     *
     * @return boolean
     */
    public function hasCancelTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cancel_time> value
     *
     * @return \google\spanner\admin\instance\v1\CreateInstanceMetadata
     */
    public function clearCancelTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cancel_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getCancelTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <cancel_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\spanner\admin\instance\v1\CreateInstanceMetadata
     */
    public function setCancelTime(\google\protobuf\Timestamp $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <end_time> has a value
     *
     * @return boolean
     */
    public function hasEndTime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <end_time> value
     *
     * @return \google\spanner\admin\instance\v1\CreateInstanceMetadata
     */
    public function clearEndTime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <end_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getEndTime(){
      return $this->_get(4);
    }
    
    /**
     * Set <end_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\spanner\admin\instance\v1\CreateInstanceMetadata
     */
    public function setEndTime(\google\protobuf\Timestamp $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1 {

  class UpdateInstanceMetadata extends \DrSlump\Protobuf\Message {

    /**  @var \google\spanner\admin\instance\v1\Instance */
    public $instance = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $start_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $cancel_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $end_time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.instance.v1.UpdateInstanceMetadata');

      // OPTIONAL MESSAGE instance = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "instance";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\spanner\admin\instance\v1\Instance';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE start_time = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "start_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cancel_time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cancel_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE end_time = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "end_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <instance> has a value
     *
     * @return boolean
     */
    public function hasInstance(){
      return $this->_has(1);
    }
    
    /**
     * Clear <instance> value
     *
     * @return \google\spanner\admin\instance\v1\UpdateInstanceMetadata
     */
    public function clearInstance(){
      return $this->_clear(1);
    }
    
    /**
     * Get <instance> value
     *
     * @return \google\spanner\admin\instance\v1\Instance
     */
    public function getInstance(){
      return $this->_get(1);
    }
    
    /**
     * Set <instance> value
     *
     * @param \google\spanner\admin\instance\v1\Instance $value
     * @return \google\spanner\admin\instance\v1\UpdateInstanceMetadata
     */
    public function setInstance(\google\spanner\admin\instance\v1\Instance $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <start_time> has a value
     *
     * @return boolean
     */
    public function hasStartTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <start_time> value
     *
     * @return \google\spanner\admin\instance\v1\UpdateInstanceMetadata
     */
    public function clearStartTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <start_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getStartTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <start_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\spanner\admin\instance\v1\UpdateInstanceMetadata
     */
    public function setStartTime(\google\protobuf\Timestamp $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cancel_time> has a value
     *
     * @return boolean
     */
    public function hasCancelTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cancel_time> value
     *
     * @return \google\spanner\admin\instance\v1\UpdateInstanceMetadata
     */
    public function clearCancelTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cancel_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getCancelTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <cancel_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\spanner\admin\instance\v1\UpdateInstanceMetadata
     */
    public function setCancelTime(\google\protobuf\Timestamp $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <end_time> has a value
     *
     * @return boolean
     */
    public function hasEndTime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <end_time> value
     *
     * @return \google\spanner\admin\instance\v1\UpdateInstanceMetadata
     */
    public function clearEndTime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <end_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getEndTime(){
      return $this->_get(4);
    }
    
    /**
     * Set <end_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\spanner\admin\instance\v1\UpdateInstanceMetadata
     */
    public function setEndTime(\google\protobuf\Timestamp $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\spanner\admin\instance\v1 {

  class InstanceAdminGrpcClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param google\spanner\admin\instance\v1\ListInstanceConfigsRequest $input
     */
    public function ListInstanceConfigs(\google\spanner\admin\instance\v1\ListInstanceConfigsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.instance.v1.InstanceAdmin/ListInstanceConfigs', $argument, '\google\spanner\admin\instance\v1\ListInstanceConfigsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\admin\instance\v1\GetInstanceConfigRequest $input
     */
    public function GetInstanceConfig(\google\spanner\admin\instance\v1\GetInstanceConfigRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.instance.v1.InstanceAdmin/GetInstanceConfig', $argument, '\google\spanner\admin\instance\v1\InstanceConfig::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\admin\instance\v1\ListInstancesRequest $input
     */
    public function ListInstances(\google\spanner\admin\instance\v1\ListInstancesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.instance.v1.InstanceAdmin/ListInstances', $argument, '\google\spanner\admin\instance\v1\ListInstancesResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\admin\instance\v1\GetInstanceRequest $input
     */
    public function GetInstance(\google\spanner\admin\instance\v1\GetInstanceRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.instance.v1.InstanceAdmin/GetInstance', $argument, '\google\spanner\admin\instance\v1\Instance::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\admin\instance\v1\CreateInstanceRequest $input
     */
    public function CreateInstance(\google\spanner\admin\instance\v1\CreateInstanceRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.instance.v1.InstanceAdmin/CreateInstance', $argument, '\google\longrunning\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\admin\instance\v1\UpdateInstanceRequest $input
     */
    public function UpdateInstance(\google\spanner\admin\instance\v1\UpdateInstanceRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.instance.v1.InstanceAdmin/UpdateInstance', $argument, '\google\longrunning\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\admin\instance\v1\DeleteInstanceRequest $input
     */
    public function DeleteInstance(\google\spanner\admin\instance\v1\DeleteInstanceRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.instance.v1.InstanceAdmin/DeleteInstance', $argument, '\google\protobuf\EmptyC::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\v1\SetIamPolicyRequest $input
     */
    public function SetIamPolicy(\google\iam\v1\SetIamPolicyRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.instance.v1.InstanceAdmin/SetIamPolicy', $argument, '\google\iam\v1\Policy::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\v1\GetIamPolicyRequest $input
     */
    public function GetIamPolicy(\google\iam\v1\GetIamPolicyRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.instance.v1.InstanceAdmin/GetIamPolicy', $argument, '\google\iam\v1\Policy::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\v1\TestIamPermissionsRequest $input
     */
    public function TestIamPermissions(\google\iam\v1\TestIamPermissionsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.instance.v1.InstanceAdmin/TestIamPermissions', $argument, '\google\iam\v1\TestIamPermissionsResponse::deserialize', $metadata, $options);
    }
  }
}
