<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/spanner/admin/database/v1/spanner_database_admin.proto
//   Date: 2016-12-14 20:35:56

namespace google\spanner\admin\database\v1\Database {

  class State extends \DrSlump\Protobuf\Enum {
    const STATE_UNSPECIFIED = 0;
    const CREATING = 1;
    const READY = 2;
  }
}
namespace google\spanner\admin\database\v1 {

  class Database extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int - \google\spanner\admin\database\v1\Database\State */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.database.v1.Database');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\spanner\admin\database\v1\Database\State';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\spanner\admin\database\v1\Database
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\Database
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <state> value
     *
     * @return \google\spanner\admin\database\v1\Database
     */
    public function clearState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \google\spanner\admin\database\v1\Database\State
     */
    public function getState(){
      return $this->_get(2);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \google\spanner\admin\database\v1\Database\State $value
     * @return \google\spanner\admin\database\v1\Database
     */
    public function setState( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\spanner\admin\database\v1 {

  class ListDatabasesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $parent = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.database.v1.ListDatabasesRequest');

      // OPTIONAL STRING parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \google\spanner\admin\database\v1\ListDatabasesRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return string
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\ListDatabasesRequest
     */
    public function setParent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\spanner\admin\database\v1\ListDatabasesRequest
     */
    public function clearPageSize(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\spanner\admin\database\v1\ListDatabasesRequest
     */
    public function setPageSize( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(4);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\spanner\admin\database\v1\ListDatabasesRequest
     */
    public function clearPageToken(){
      return $this->_clear(4);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(4);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\ListDatabasesRequest
     */
    public function setPageToken( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\spanner\admin\database\v1 {

  class ListDatabasesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\spanner\admin\database\v1\Database[]  */
    public $databases = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.database.v1.ListDatabasesResponse');

      // REPEATED MESSAGE databases = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "databases";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\spanner\admin\database\v1\Database';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <databases> has a value
     *
     * @return boolean
     */
    public function hasDatabases(){
      return $this->_has(1);
    }
    
    /**
     * Clear <databases> value
     *
     * @return \google\spanner\admin\database\v1\ListDatabasesResponse
     */
    public function clearDatabases(){
      return $this->_clear(1);
    }
    
    /**
     * Get <databases> value
     *
     * @param int $idx
     * @return \google\spanner\admin\database\v1\Database
     */
    public function getDatabases($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <databases> value
     *
     * @param \google\spanner\admin\database\v1\Database $value
     * @return \google\spanner\admin\database\v1\ListDatabasesResponse
     */
    public function setDatabases(\google\spanner\admin\database\v1\Database $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <databases>
     *
     * @return \google\spanner\admin\database\v1\Database[]
     */
    public function getDatabasesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <databases>
     *
     * @param \google\spanner\admin\database\v1\Database $value
     * @return \google\spanner\admin\database\v1\ListDatabasesResponse
     */
    public function addDatabases(\google\spanner\admin\database\v1\Database $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\spanner\admin\database\v1\ListDatabasesResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\ListDatabasesResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\spanner\admin\database\v1 {

  class CreateDatabaseRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $parent = null;
    
    /**  @var string */
    public $create_statement = null;
    
    /**  @var string[]  */
    public $extra_statements = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.database.v1.CreateDatabaseRequest');

      // OPTIONAL STRING parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING create_statement = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "create_statement";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING extra_statements = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "extra_statements";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \google\spanner\admin\database\v1\CreateDatabaseRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return string
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\CreateDatabaseRequest
     */
    public function setParent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <create_statement> has a value
     *
     * @return boolean
     */
    public function hasCreateStatement(){
      return $this->_has(2);
    }
    
    /**
     * Clear <create_statement> value
     *
     * @return \google\spanner\admin\database\v1\CreateDatabaseRequest
     */
    public function clearCreateStatement(){
      return $this->_clear(2);
    }
    
    /**
     * Get <create_statement> value
     *
     * @return string
     */
    public function getCreateStatement(){
      return $this->_get(2);
    }
    
    /**
     * Set <create_statement> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\CreateDatabaseRequest
     */
    public function setCreateStatement( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <extra_statements> has a value
     *
     * @return boolean
     */
    public function hasExtraStatements(){
      return $this->_has(3);
    }
    
    /**
     * Clear <extra_statements> value
     *
     * @return \google\spanner\admin\database\v1\CreateDatabaseRequest
     */
    public function clearExtraStatements(){
      return $this->_clear(3);
    }
    
    /**
     * Get <extra_statements> value
     *
     * @param int $idx
     * @return string
     */
    public function getExtraStatements($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <extra_statements> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\CreateDatabaseRequest
     */
    public function setExtraStatements( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <extra_statements>
     *
     * @return string[]
     */
    public function getExtraStatementsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <extra_statements>
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\CreateDatabaseRequest
     */
    public function addExtraStatements( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\spanner\admin\database\v1 {

  class CreateDatabaseMetadata extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $database = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.database.v1.CreateDatabaseMetadata');

      // OPTIONAL STRING database = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "database";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <database> has a value
     *
     * @return boolean
     */
    public function hasDatabase(){
      return $this->_has(1);
    }
    
    /**
     * Clear <database> value
     *
     * @return \google\spanner\admin\database\v1\CreateDatabaseMetadata
     */
    public function clearDatabase(){
      return $this->_clear(1);
    }
    
    /**
     * Get <database> value
     *
     * @return string
     */
    public function getDatabase(){
      return $this->_get(1);
    }
    
    /**
     * Set <database> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\CreateDatabaseMetadata
     */
    public function setDatabase( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\spanner\admin\database\v1 {

  class GetDatabaseRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.database.v1.GetDatabaseRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\spanner\admin\database\v1\GetDatabaseRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\GetDatabaseRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\spanner\admin\database\v1 {

  class UpdateDatabaseDdlRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $database = null;
    
    /**  @var string[]  */
    public $statements = array();
    
    /**  @var string */
    public $operation_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.database.v1.UpdateDatabaseDdlRequest');

      // OPTIONAL STRING database = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "database";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING statements = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "statements";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING operation_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "operation_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <database> has a value
     *
     * @return boolean
     */
    public function hasDatabase(){
      return $this->_has(1);
    }
    
    /**
     * Clear <database> value
     *
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlRequest
     */
    public function clearDatabase(){
      return $this->_clear(1);
    }
    
    /**
     * Get <database> value
     *
     * @return string
     */
    public function getDatabase(){
      return $this->_get(1);
    }
    
    /**
     * Set <database> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlRequest
     */
    public function setDatabase( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <statements> has a value
     *
     * @return boolean
     */
    public function hasStatements(){
      return $this->_has(2);
    }
    
    /**
     * Clear <statements> value
     *
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlRequest
     */
    public function clearStatements(){
      return $this->_clear(2);
    }
    
    /**
     * Get <statements> value
     *
     * @param int $idx
     * @return string
     */
    public function getStatements($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <statements> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlRequest
     */
    public function setStatements( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <statements>
     *
     * @return string[]
     */
    public function getStatementsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <statements>
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlRequest
     */
    public function addStatements( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <operation_id> has a value
     *
     * @return boolean
     */
    public function hasOperationId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <operation_id> value
     *
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlRequest
     */
    public function clearOperationId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <operation_id> value
     *
     * @return string
     */
    public function getOperationId(){
      return $this->_get(3);
    }
    
    /**
     * Set <operation_id> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlRequest
     */
    public function setOperationId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\spanner\admin\database\v1 {

  class UpdateDatabaseDdlMetadata extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $database = null;
    
    /**  @var string[]  */
    public $statements = array();
    
    /**  @var \google\protobuf\Timestamp[]  */
    public $commit_timestamps = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata');

      // OPTIONAL STRING database = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "database";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING statements = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "statements";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE commit_timestamps = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "commit_timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <database> has a value
     *
     * @return boolean
     */
    public function hasDatabase(){
      return $this->_has(1);
    }
    
    /**
     * Clear <database> value
     *
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlMetadata
     */
    public function clearDatabase(){
      return $this->_clear(1);
    }
    
    /**
     * Get <database> value
     *
     * @return string
     */
    public function getDatabase(){
      return $this->_get(1);
    }
    
    /**
     * Set <database> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlMetadata
     */
    public function setDatabase( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <statements> has a value
     *
     * @return boolean
     */
    public function hasStatements(){
      return $this->_has(2);
    }
    
    /**
     * Clear <statements> value
     *
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlMetadata
     */
    public function clearStatements(){
      return $this->_clear(2);
    }
    
    /**
     * Get <statements> value
     *
     * @param int $idx
     * @return string
     */
    public function getStatements($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <statements> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlMetadata
     */
    public function setStatements( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <statements>
     *
     * @return string[]
     */
    public function getStatementsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <statements>
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlMetadata
     */
    public function addStatements( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <commit_timestamps> has a value
     *
     * @return boolean
     */
    public function hasCommitTimestamps(){
      return $this->_has(3);
    }
    
    /**
     * Clear <commit_timestamps> value
     *
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlMetadata
     */
    public function clearCommitTimestamps(){
      return $this->_clear(3);
    }
    
    /**
     * Get <commit_timestamps> value
     *
     * @param int $idx
     * @return \google\protobuf\Timestamp
     */
    public function getCommitTimestamps($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <commit_timestamps> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlMetadata
     */
    public function setCommitTimestamps(\google\protobuf\Timestamp $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <commit_timestamps>
     *
     * @return \google\protobuf\Timestamp[]
     */
    public function getCommitTimestampsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <commit_timestamps>
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\spanner\admin\database\v1\UpdateDatabaseDdlMetadata
     */
    public function addCommitTimestamps(\google\protobuf\Timestamp $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\spanner\admin\database\v1 {

  class DropDatabaseRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $database = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.database.v1.DropDatabaseRequest');

      // OPTIONAL STRING database = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "database";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <database> has a value
     *
     * @return boolean
     */
    public function hasDatabase(){
      return $this->_has(1);
    }
    
    /**
     * Clear <database> value
     *
     * @return \google\spanner\admin\database\v1\DropDatabaseRequest
     */
    public function clearDatabase(){
      return $this->_clear(1);
    }
    
    /**
     * Get <database> value
     *
     * @return string
     */
    public function getDatabase(){
      return $this->_get(1);
    }
    
    /**
     * Set <database> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\DropDatabaseRequest
     */
    public function setDatabase( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\spanner\admin\database\v1 {

  class GetDatabaseDdlRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $database = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.database.v1.GetDatabaseDdlRequest');

      // OPTIONAL STRING database = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "database";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <database> has a value
     *
     * @return boolean
     */
    public function hasDatabase(){
      return $this->_has(1);
    }
    
    /**
     * Clear <database> value
     *
     * @return \google\spanner\admin\database\v1\GetDatabaseDdlRequest
     */
    public function clearDatabase(){
      return $this->_clear(1);
    }
    
    /**
     * Get <database> value
     *
     * @return string
     */
    public function getDatabase(){
      return $this->_get(1);
    }
    
    /**
     * Set <database> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\GetDatabaseDdlRequest
     */
    public function setDatabase( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\spanner\admin\database\v1 {

  class GetDatabaseDdlResponse extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $statements = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.admin.database.v1.GetDatabaseDdlResponse');

      // REPEATED STRING statements = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "statements";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <statements> has a value
     *
     * @return boolean
     */
    public function hasStatements(){
      return $this->_has(1);
    }
    
    /**
     * Clear <statements> value
     *
     * @return \google\spanner\admin\database\v1\GetDatabaseDdlResponse
     */
    public function clearStatements(){
      return $this->_clear(1);
    }
    
    /**
     * Get <statements> value
     *
     * @param int $idx
     * @return string
     */
    public function getStatements($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <statements> value
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\GetDatabaseDdlResponse
     */
    public function setStatements( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <statements>
     *
     * @return string[]
     */
    public function getStatementsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <statements>
     *
     * @param string $value
     * @return \google\spanner\admin\database\v1\GetDatabaseDdlResponse
     */
    public function addStatements( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\spanner\admin\database\v1 {

  class DatabaseAdminGrpcClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param google\spanner\admin\database\v1\ListDatabasesRequest $input
     */
    public function ListDatabases(\google\spanner\admin\database\v1\ListDatabasesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.database.v1.DatabaseAdmin/ListDatabases', $argument, '\google\spanner\admin\database\v1\ListDatabasesResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\admin\database\v1\CreateDatabaseRequest $input
     */
    public function CreateDatabase(\google\spanner\admin\database\v1\CreateDatabaseRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.database.v1.DatabaseAdmin/CreateDatabase', $argument, '\google\longrunning\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\admin\database\v1\GetDatabaseRequest $input
     */
    public function GetDatabase(\google\spanner\admin\database\v1\GetDatabaseRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.database.v1.DatabaseAdmin/GetDatabase', $argument, '\google\spanner\admin\database\v1\Database::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\admin\database\v1\UpdateDatabaseDdlRequest $input
     */
    public function UpdateDatabaseDdl(\google\spanner\admin\database\v1\UpdateDatabaseDdlRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.database.v1.DatabaseAdmin/UpdateDatabaseDdl', $argument, '\google\longrunning\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\admin\database\v1\DropDatabaseRequest $input
     */
    public function DropDatabase(\google\spanner\admin\database\v1\DropDatabaseRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.database.v1.DatabaseAdmin/DropDatabase', $argument, '\google\protobuf\EmptyC::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\admin\database\v1\GetDatabaseDdlRequest $input
     */
    public function GetDatabaseDdl(\google\spanner\admin\database\v1\GetDatabaseDdlRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.database.v1.DatabaseAdmin/GetDatabaseDdl', $argument, '\google\spanner\admin\database\v1\GetDatabaseDdlResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\v1\SetIamPolicyRequest $input
     */
    public function SetIamPolicy(\google\iam\v1\SetIamPolicyRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.database.v1.DatabaseAdmin/SetIamPolicy', $argument, '\google\iam\v1\Policy::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\v1\GetIamPolicyRequest $input
     */
    public function GetIamPolicy(\google\iam\v1\GetIamPolicyRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.database.v1.DatabaseAdmin/GetIamPolicy', $argument, '\google\iam\v1\Policy::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\v1\TestIamPermissionsRequest $input
     */
    public function TestIamPermissions(\google\iam\v1\TestIamPermissionsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.admin.database.v1.DatabaseAdmin/TestIamPermissions', $argument, '\google\iam\v1\TestIamPermissionsResponse::deserialize', $metadata, $options);
    }
  }
}
