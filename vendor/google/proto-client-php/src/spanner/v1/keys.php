<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/spanner/v1/keys.proto
//   Date: 2016-12-14 20:33:11

namespace google\spanner\v1 {

  class KeyRange extends \DrSlump\Protobuf\Message {

    /**  @var \google\protobuf\ListValue */
    public $start_closed = null;
    
    /**  @var \google\protobuf\ListValue */
    public $start_open = null;
    
    /**  @var \google\protobuf\ListValue */
    public $end_closed = null;
    
    /**  @var \google\protobuf\ListValue */
    public $end_open = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.v1.KeyRange');

      // OPTIONAL MESSAGE start_closed = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "start_closed";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\ListValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE start_open = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "start_open";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\ListValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE end_closed = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "end_closed";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\ListValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE end_open = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "end_open";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\ListValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <start_closed> has a value
     *
     * @return boolean
     */
    public function hasStartClosed(){
      return $this->_has(1);
    }
    
    /**
     * Clear <start_closed> value
     *
     * @return \google\spanner\v1\KeyRange
     */
    public function clearStartClosed(){
      return $this->_clear(1);
    }
    
    /**
     * Get <start_closed> value
     *
     * @return \google\protobuf\ListValue
     */
    public function getStartClosed(){
      return $this->_get(1);
    }
    
    /**
     * Set <start_closed> value
     *
     * @param \google\protobuf\ListValue $value
     * @return \google\spanner\v1\KeyRange
     */
    public function setStartClosed(\google\protobuf\ListValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <start_open> has a value
     *
     * @return boolean
     */
    public function hasStartOpen(){
      return $this->_has(2);
    }
    
    /**
     * Clear <start_open> value
     *
     * @return \google\spanner\v1\KeyRange
     */
    public function clearStartOpen(){
      return $this->_clear(2);
    }
    
    /**
     * Get <start_open> value
     *
     * @return \google\protobuf\ListValue
     */
    public function getStartOpen(){
      return $this->_get(2);
    }
    
    /**
     * Set <start_open> value
     *
     * @param \google\protobuf\ListValue $value
     * @return \google\spanner\v1\KeyRange
     */
    public function setStartOpen(\google\protobuf\ListValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <end_closed> has a value
     *
     * @return boolean
     */
    public function hasEndClosed(){
      return $this->_has(3);
    }
    
    /**
     * Clear <end_closed> value
     *
     * @return \google\spanner\v1\KeyRange
     */
    public function clearEndClosed(){
      return $this->_clear(3);
    }
    
    /**
     * Get <end_closed> value
     *
     * @return \google\protobuf\ListValue
     */
    public function getEndClosed(){
      return $this->_get(3);
    }
    
    /**
     * Set <end_closed> value
     *
     * @param \google\protobuf\ListValue $value
     * @return \google\spanner\v1\KeyRange
     */
    public function setEndClosed(\google\protobuf\ListValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <end_open> has a value
     *
     * @return boolean
     */
    public function hasEndOpen(){
      return $this->_has(4);
    }
    
    /**
     * Clear <end_open> value
     *
     * @return \google\spanner\v1\KeyRange
     */
    public function clearEndOpen(){
      return $this->_clear(4);
    }
    
    /**
     * Get <end_open> value
     *
     * @return \google\protobuf\ListValue
     */
    public function getEndOpen(){
      return $this->_get(4);
    }
    
    /**
     * Set <end_open> value
     *
     * @param \google\protobuf\ListValue $value
     * @return \google\spanner\v1\KeyRange
     */
    public function setEndOpen(\google\protobuf\ListValue $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\spanner\v1 {

  class KeySet extends \DrSlump\Protobuf\Message {

    /**  @var \google\protobuf\ListValue[]  */
    public $keys = array();
    
    /**  @var \google\spanner\v1\KeyRange[]  */
    public $ranges = array();
    
    /**  @var boolean */
    public $all = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.v1.KeySet');

      // REPEATED MESSAGE keys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\ListValue';
      $descriptor->addField($f);

      // REPEATED MESSAGE ranges = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ranges";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\spanner\v1\KeyRange';
      $descriptor->addField($f);

      // OPTIONAL BOOL all = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "all";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keys> value
     *
     * @return \google\spanner\v1\KeySet
     */
    public function clearKeys(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return \google\protobuf\ListValue
     */
    public function getKeys($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <keys> value
     *
     * @param \google\protobuf\ListValue $value
     * @return \google\spanner\v1\KeySet
     */
    public function setKeys(\google\protobuf\ListValue $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <keys>
     *
     * @return \google\protobuf\ListValue[]
     */
    public function getKeysList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <keys>
     *
     * @param \google\protobuf\ListValue $value
     * @return \google\spanner\v1\KeySet
     */
    public function addKeys(\google\protobuf\ListValue $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <ranges> has a value
     *
     * @return boolean
     */
    public function hasRanges(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ranges> value
     *
     * @return \google\spanner\v1\KeySet
     */
    public function clearRanges(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ranges> value
     *
     * @param int $idx
     * @return \google\spanner\v1\KeyRange
     */
    public function getRanges($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <ranges> value
     *
     * @param \google\spanner\v1\KeyRange $value
     * @return \google\spanner\v1\KeySet
     */
    public function setRanges(\google\spanner\v1\KeyRange $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <ranges>
     *
     * @return \google\spanner\v1\KeyRange[]
     */
    public function getRangesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <ranges>
     *
     * @param \google\spanner\v1\KeyRange $value
     * @return \google\spanner\v1\KeySet
     */
    public function addRanges(\google\spanner\v1\KeyRange $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <all> has a value
     *
     * @return boolean
     */
    public function hasAll(){
      return $this->_has(3);
    }
    
    /**
     * Clear <all> value
     *
     * @return \google\spanner\v1\KeySet
     */
    public function clearAll(){
      return $this->_clear(3);
    }
    
    /**
     * Get <all> value
     *
     * @return boolean
     */
    public function getAll(){
      return $this->_get(3);
    }
    
    /**
     * Set <all> value
     *
     * @param boolean $value
     * @return \google\spanner\v1\KeySet
     */
    public function setAll( $value){
      return $this->_set(3, $value);
    }
  }
}

