<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/spanner/v1/spanner.proto
//   Date: 2016-12-14 20:33:12

namespace google\spanner\v1 {

  class CreateSessionRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $database = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.v1.CreateSessionRequest');

      // OPTIONAL STRING database = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "database";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <database> has a value
     *
     * @return boolean
     */
    public function hasDatabase(){
      return $this->_has(1);
    }
    
    /**
     * Clear <database> value
     *
     * @return \google\spanner\v1\CreateSessionRequest
     */
    public function clearDatabase(){
      return $this->_clear(1);
    }
    
    /**
     * Get <database> value
     *
     * @return string
     */
    public function getDatabase(){
      return $this->_get(1);
    }
    
    /**
     * Set <database> value
     *
     * @param string $value
     * @return \google\spanner\v1\CreateSessionRequest
     */
    public function setDatabase( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\spanner\v1 {

  class Session extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.v1.Session');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\spanner\v1\Session
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\spanner\v1\Session
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\spanner\v1 {

  class GetSessionRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.v1.GetSessionRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\spanner\v1\GetSessionRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\spanner\v1\GetSessionRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\spanner\v1 {

  class DeleteSessionRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.v1.DeleteSessionRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\spanner\v1\DeleteSessionRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\spanner\v1\DeleteSessionRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\spanner\v1\ExecuteSqlRequest {

  class QueryMode extends \DrSlump\Protobuf\Enum {
    const NORMAL = 0;
    const PLAN = 1;
    const PROFILE = 2;
  }
}
namespace google\spanner\v1\ExecuteSqlRequest {

  class ParamTypesEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \google\spanner\v1\Type */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.v1.ExecuteSqlRequest.ParamTypesEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\spanner\v1\Type';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\spanner\v1\ExecuteSqlRequest\ParamTypesEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\spanner\v1\ExecuteSqlRequest\ParamTypesEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\spanner\v1\ExecuteSqlRequest\ParamTypesEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \google\spanner\v1\Type
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\spanner\v1\Type $value
     * @return \google\spanner\v1\ExecuteSqlRequest\ParamTypesEntry
     */
    public function setValue(\google\spanner\v1\Type $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\spanner\v1 {

  class ExecuteSqlRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $session = null;
    
    /**  @var \google\spanner\v1\TransactionSelector */
    public $transaction = null;
    
    /**  @var string */
    public $sql = null;
    
    /**  @var \google\protobuf\Struct */
    public $params = null;
    
    /**  @var \google\spanner\v1\ExecuteSqlRequest\ParamTypesEntry[]  */
    public $param_types = array();
    
    /**  @var string */
    public $resume_token = null;
    
    /**  @var int - \google\spanner\v1\ExecuteSqlRequest\QueryMode */
    public $query_mode = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.v1.ExecuteSqlRequest');

      // OPTIONAL STRING session = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "session";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE transaction = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\spanner\v1\TransactionSelector';
      $descriptor->addField($f);

      // OPTIONAL STRING sql = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sql";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE params = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "params";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Struct';
      $descriptor->addField($f);

      // REPEATED MESSAGE param_types = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "param_types";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\spanner\v1\ExecuteSqlRequest\ParamTypesEntry';
      $descriptor->addField($f);

      // OPTIONAL BYTES resume_token = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "resume_token";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM query_mode = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "query_mode";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\spanner\v1\ExecuteSqlRequest\QueryMode';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <session> has a value
     *
     * @return boolean
     */
    public function hasSession(){
      return $this->_has(1);
    }
    
    /**
     * Clear <session> value
     *
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function clearSession(){
      return $this->_clear(1);
    }
    
    /**
     * Get <session> value
     *
     * @return string
     */
    public function getSession(){
      return $this->_get(1);
    }
    
    /**
     * Set <session> value
     *
     * @param string $value
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function setSession( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <transaction> has a value
     *
     * @return boolean
     */
    public function hasTransaction(){
      return $this->_has(2);
    }
    
    /**
     * Clear <transaction> value
     *
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function clearTransaction(){
      return $this->_clear(2);
    }
    
    /**
     * Get <transaction> value
     *
     * @return \google\spanner\v1\TransactionSelector
     */
    public function getTransaction(){
      return $this->_get(2);
    }
    
    /**
     * Set <transaction> value
     *
     * @param \google\spanner\v1\TransactionSelector $value
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function setTransaction(\google\spanner\v1\TransactionSelector $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sql> has a value
     *
     * @return boolean
     */
    public function hasSql(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sql> value
     *
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function clearSql(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sql> value
     *
     * @return string
     */
    public function getSql(){
      return $this->_get(3);
    }
    
    /**
     * Set <sql> value
     *
     * @param string $value
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function setSql( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <params> has a value
     *
     * @return boolean
     */
    public function hasParams(){
      return $this->_has(4);
    }
    
    /**
     * Clear <params> value
     *
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function clearParams(){
      return $this->_clear(4);
    }
    
    /**
     * Get <params> value
     *
     * @return \google\protobuf\Struct
     */
    public function getParams(){
      return $this->_get(4);
    }
    
    /**
     * Set <params> value
     *
     * @param \google\protobuf\Struct $value
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function setParams(\google\protobuf\Struct $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <param_types> has a value
     *
     * @return boolean
     */
    public function hasParamTypes(){
      return $this->_has(5);
    }
    
    /**
     * Clear <param_types> value
     *
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function clearParamTypes(){
      return $this->_clear(5);
    }
    
    /**
     * Get <param_types> value
     *
     * @param int $idx
     * @return \google\spanner\v1\ExecuteSqlRequest\ParamTypesEntry
     */
    public function getParamTypes($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <param_types> value
     *
     * @param \google\spanner\v1\ExecuteSqlRequest\ParamTypesEntry $value
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function setParamTypes(\google\spanner\v1\ExecuteSqlRequest\ParamTypesEntry $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <param_types>
     *
     * @return \google\spanner\v1\ExecuteSqlRequest\ParamTypesEntry[]
     */
    public function getParamTypesList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <param_types>
     *
     * @param \google\spanner\v1\ExecuteSqlRequest\ParamTypesEntry $value
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function addParamTypes(\google\spanner\v1\ExecuteSqlRequest\ParamTypesEntry $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <resume_token> has a value
     *
     * @return boolean
     */
    public function hasResumeToken(){
      return $this->_has(6);
    }
    
    /**
     * Clear <resume_token> value
     *
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function clearResumeToken(){
      return $this->_clear(6);
    }
    
    /**
     * Get <resume_token> value
     *
     * @return string
     */
    public function getResumeToken(){
      return $this->_get(6);
    }
    
    /**
     * Set <resume_token> value
     *
     * @param string $value
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function setResumeToken( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <query_mode> has a value
     *
     * @return boolean
     */
    public function hasQueryMode(){
      return $this->_has(7);
    }
    
    /**
     * Clear <query_mode> value
     *
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function clearQueryMode(){
      return $this->_clear(7);
    }
    
    /**
     * Get <query_mode> value
     *
     * @return int - \google\spanner\v1\ExecuteSqlRequest\QueryMode
     */
    public function getQueryMode(){
      return $this->_get(7);
    }
    
    /**
     * Set <query_mode> value
     *
     * @param int - \google\spanner\v1\ExecuteSqlRequest\QueryMode $value
     * @return \google\spanner\v1\ExecuteSqlRequest
     */
    public function setQueryMode( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace google\spanner\v1 {

  class ReadRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $session = null;
    
    /**  @var \google\spanner\v1\TransactionSelector */
    public $transaction = null;
    
    /**  @var string */
    public $table = null;
    
    /**  @var string */
    public $index = null;
    
    /**  @var string[]  */
    public $columns = array();
    
    /**  @var \google\spanner\v1\KeySet */
    public $key_set = null;
    
    /**  @var int */
    public $limit = null;
    
    /**  @var string */
    public $resume_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.v1.ReadRequest');

      // OPTIONAL STRING session = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "session";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE transaction = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\spanner\v1\TransactionSelector';
      $descriptor->addField($f);

      // OPTIONAL STRING table = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "table";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING index = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING columns = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "columns";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE key_set = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "key_set";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\spanner\v1\KeySet';
      $descriptor->addField($f);

      // OPTIONAL INT64 limit = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "limit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES resume_token = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "resume_token";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <session> has a value
     *
     * @return boolean
     */
    public function hasSession(){
      return $this->_has(1);
    }
    
    /**
     * Clear <session> value
     *
     * @return \google\spanner\v1\ReadRequest
     */
    public function clearSession(){
      return $this->_clear(1);
    }
    
    /**
     * Get <session> value
     *
     * @return string
     */
    public function getSession(){
      return $this->_get(1);
    }
    
    /**
     * Set <session> value
     *
     * @param string $value
     * @return \google\spanner\v1\ReadRequest
     */
    public function setSession( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <transaction> has a value
     *
     * @return boolean
     */
    public function hasTransaction(){
      return $this->_has(2);
    }
    
    /**
     * Clear <transaction> value
     *
     * @return \google\spanner\v1\ReadRequest
     */
    public function clearTransaction(){
      return $this->_clear(2);
    }
    
    /**
     * Get <transaction> value
     *
     * @return \google\spanner\v1\TransactionSelector
     */
    public function getTransaction(){
      return $this->_get(2);
    }
    
    /**
     * Set <transaction> value
     *
     * @param \google\spanner\v1\TransactionSelector $value
     * @return \google\spanner\v1\ReadRequest
     */
    public function setTransaction(\google\spanner\v1\TransactionSelector $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <table> has a value
     *
     * @return boolean
     */
    public function hasTable(){
      return $this->_has(3);
    }
    
    /**
     * Clear <table> value
     *
     * @return \google\spanner\v1\ReadRequest
     */
    public function clearTable(){
      return $this->_clear(3);
    }
    
    /**
     * Get <table> value
     *
     * @return string
     */
    public function getTable(){
      return $this->_get(3);
    }
    
    /**
     * Set <table> value
     *
     * @param string $value
     * @return \google\spanner\v1\ReadRequest
     */
    public function setTable( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(4);
    }
    
    /**
     * Clear <index> value
     *
     * @return \google\spanner\v1\ReadRequest
     */
    public function clearIndex(){
      return $this->_clear(4);
    }
    
    /**
     * Get <index> value
     *
     * @return string
     */
    public function getIndex(){
      return $this->_get(4);
    }
    
    /**
     * Set <index> value
     *
     * @param string $value
     * @return \google\spanner\v1\ReadRequest
     */
    public function setIndex( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <columns> has a value
     *
     * @return boolean
     */
    public function hasColumns(){
      return $this->_has(5);
    }
    
    /**
     * Clear <columns> value
     *
     * @return \google\spanner\v1\ReadRequest
     */
    public function clearColumns(){
      return $this->_clear(5);
    }
    
    /**
     * Get <columns> value
     *
     * @param int $idx
     * @return string
     */
    public function getColumns($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <columns> value
     *
     * @param string $value
     * @return \google\spanner\v1\ReadRequest
     */
    public function setColumns( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <columns>
     *
     * @return string[]
     */
    public function getColumnsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <columns>
     *
     * @param string $value
     * @return \google\spanner\v1\ReadRequest
     */
    public function addColumns( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <key_set> has a value
     *
     * @return boolean
     */
    public function hasKeySet(){
      return $this->_has(6);
    }
    
    /**
     * Clear <key_set> value
     *
     * @return \google\spanner\v1\ReadRequest
     */
    public function clearKeySet(){
      return $this->_clear(6);
    }
    
    /**
     * Get <key_set> value
     *
     * @return \google\spanner\v1\KeySet
     */
    public function getKeySet(){
      return $this->_get(6);
    }
    
    /**
     * Set <key_set> value
     *
     * @param \google\spanner\v1\KeySet $value
     * @return \google\spanner\v1\ReadRequest
     */
    public function setKeySet(\google\spanner\v1\KeySet $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <limit> has a value
     *
     * @return boolean
     */
    public function hasLimit(){
      return $this->_has(8);
    }
    
    /**
     * Clear <limit> value
     *
     * @return \google\spanner\v1\ReadRequest
     */
    public function clearLimit(){
      return $this->_clear(8);
    }
    
    /**
     * Get <limit> value
     *
     * @return int
     */
    public function getLimit(){
      return $this->_get(8);
    }
    
    /**
     * Set <limit> value
     *
     * @param int $value
     * @return \google\spanner\v1\ReadRequest
     */
    public function setLimit( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <resume_token> has a value
     *
     * @return boolean
     */
    public function hasResumeToken(){
      return $this->_has(9);
    }
    
    /**
     * Clear <resume_token> value
     *
     * @return \google\spanner\v1\ReadRequest
     */
    public function clearResumeToken(){
      return $this->_clear(9);
    }
    
    /**
     * Get <resume_token> value
     *
     * @return string
     */
    public function getResumeToken(){
      return $this->_get(9);
    }
    
    /**
     * Set <resume_token> value
     *
     * @param string $value
     * @return \google\spanner\v1\ReadRequest
     */
    public function setResumeToken( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace google\spanner\v1 {

  class BeginTransactionRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $session = null;
    
    /**  @var \google\spanner\v1\TransactionOptions */
    public $options = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.v1.BeginTransactionRequest');

      // OPTIONAL STRING session = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "session";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE options = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\spanner\v1\TransactionOptions';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <session> has a value
     *
     * @return boolean
     */
    public function hasSession(){
      return $this->_has(1);
    }
    
    /**
     * Clear <session> value
     *
     * @return \google\spanner\v1\BeginTransactionRequest
     */
    public function clearSession(){
      return $this->_clear(1);
    }
    
    /**
     * Get <session> value
     *
     * @return string
     */
    public function getSession(){
      return $this->_get(1);
    }
    
    /**
     * Set <session> value
     *
     * @param string $value
     * @return \google\spanner\v1\BeginTransactionRequest
     */
    public function setSession( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(2);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\spanner\v1\BeginTransactionRequest
     */
    public function clearOptions(){
      return $this->_clear(2);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\spanner\v1\TransactionOptions
     */
    public function getOptions(){
      return $this->_get(2);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\spanner\v1\TransactionOptions $value
     * @return \google\spanner\v1\BeginTransactionRequest
     */
    public function setOptions(\google\spanner\v1\TransactionOptions $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\spanner\v1 {

  class CommitRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $session = null;
    
    /**  @var string */
    public $transaction_id = null;
    
    /**  @var \google\spanner\v1\TransactionOptions */
    public $single_use_transaction = null;
    
    /**  @var \google\spanner\v1\Mutation[]  */
    public $mutations = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.v1.CommitRequest');

      // OPTIONAL STRING session = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "session";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES transaction_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "transaction_id";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE single_use_transaction = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "single_use_transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\spanner\v1\TransactionOptions';
      $descriptor->addField($f);

      // REPEATED MESSAGE mutations = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "mutations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\spanner\v1\Mutation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <session> has a value
     *
     * @return boolean
     */
    public function hasSession(){
      return $this->_has(1);
    }
    
    /**
     * Clear <session> value
     *
     * @return \google\spanner\v1\CommitRequest
     */
    public function clearSession(){
      return $this->_clear(1);
    }
    
    /**
     * Get <session> value
     *
     * @return string
     */
    public function getSession(){
      return $this->_get(1);
    }
    
    /**
     * Set <session> value
     *
     * @param string $value
     * @return \google\spanner\v1\CommitRequest
     */
    public function setSession( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <transaction_id> has a value
     *
     * @return boolean
     */
    public function hasTransactionId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <transaction_id> value
     *
     * @return \google\spanner\v1\CommitRequest
     */
    public function clearTransactionId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <transaction_id> value
     *
     * @return string
     */
    public function getTransactionId(){
      return $this->_get(2);
    }
    
    /**
     * Set <transaction_id> value
     *
     * @param string $value
     * @return \google\spanner\v1\CommitRequest
     */
    public function setTransactionId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <single_use_transaction> has a value
     *
     * @return boolean
     */
    public function hasSingleUseTransaction(){
      return $this->_has(3);
    }
    
    /**
     * Clear <single_use_transaction> value
     *
     * @return \google\spanner\v1\CommitRequest
     */
    public function clearSingleUseTransaction(){
      return $this->_clear(3);
    }
    
    /**
     * Get <single_use_transaction> value
     *
     * @return \google\spanner\v1\TransactionOptions
     */
    public function getSingleUseTransaction(){
      return $this->_get(3);
    }
    
    /**
     * Set <single_use_transaction> value
     *
     * @param \google\spanner\v1\TransactionOptions $value
     * @return \google\spanner\v1\CommitRequest
     */
    public function setSingleUseTransaction(\google\spanner\v1\TransactionOptions $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <mutations> has a value
     *
     * @return boolean
     */
    public function hasMutations(){
      return $this->_has(4);
    }
    
    /**
     * Clear <mutations> value
     *
     * @return \google\spanner\v1\CommitRequest
     */
    public function clearMutations(){
      return $this->_clear(4);
    }
    
    /**
     * Get <mutations> value
     *
     * @param int $idx
     * @return \google\spanner\v1\Mutation
     */
    public function getMutations($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <mutations> value
     *
     * @param \google\spanner\v1\Mutation $value
     * @return \google\spanner\v1\CommitRequest
     */
    public function setMutations(\google\spanner\v1\Mutation $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <mutations>
     *
     * @return \google\spanner\v1\Mutation[]
     */
    public function getMutationsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <mutations>
     *
     * @param \google\spanner\v1\Mutation $value
     * @return \google\spanner\v1\CommitRequest
     */
    public function addMutations(\google\spanner\v1\Mutation $value){
     return $this->_add(4, $value);
    }
  }
}

namespace google\spanner\v1 {

  class CommitResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\protobuf\Timestamp */
    public $commit_timestamp = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.v1.CommitResponse');

      // OPTIONAL MESSAGE commit_timestamp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "commit_timestamp";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <commit_timestamp> has a value
     *
     * @return boolean
     */
    public function hasCommitTimestamp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <commit_timestamp> value
     *
     * @return \google\spanner\v1\CommitResponse
     */
    public function clearCommitTimestamp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <commit_timestamp> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getCommitTimestamp(){
      return $this->_get(1);
    }
    
    /**
     * Set <commit_timestamp> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\spanner\v1\CommitResponse
     */
    public function setCommitTimestamp(\google\protobuf\Timestamp $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\spanner\v1 {

  class RollbackRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $session = null;
    
    /**  @var string */
    public $transaction_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.spanner.v1.RollbackRequest');

      // OPTIONAL STRING session = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "session";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES transaction_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "transaction_id";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <session> has a value
     *
     * @return boolean
     */
    public function hasSession(){
      return $this->_has(1);
    }
    
    /**
     * Clear <session> value
     *
     * @return \google\spanner\v1\RollbackRequest
     */
    public function clearSession(){
      return $this->_clear(1);
    }
    
    /**
     * Get <session> value
     *
     * @return string
     */
    public function getSession(){
      return $this->_get(1);
    }
    
    /**
     * Set <session> value
     *
     * @param string $value
     * @return \google\spanner\v1\RollbackRequest
     */
    public function setSession( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <transaction_id> has a value
     *
     * @return boolean
     */
    public function hasTransactionId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <transaction_id> value
     *
     * @return \google\spanner\v1\RollbackRequest
     */
    public function clearTransactionId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <transaction_id> value
     *
     * @return string
     */
    public function getTransactionId(){
      return $this->_get(2);
    }
    
    /**
     * Set <transaction_id> value
     *
     * @param string $value
     * @return \google\spanner\v1\RollbackRequest
     */
    public function setTransactionId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\spanner\v1 {

  class SpannerGrpcClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param google\spanner\v1\CreateSessionRequest $input
     */
    public function CreateSession(\google\spanner\v1\CreateSessionRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.v1.Spanner/CreateSession', $argument, '\google\spanner\v1\Session::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\v1\GetSessionRequest $input
     */
    public function GetSession(\google\spanner\v1\GetSessionRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.v1.Spanner/GetSession', $argument, '\google\spanner\v1\Session::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\v1\DeleteSessionRequest $input
     */
    public function DeleteSession(\google\spanner\v1\DeleteSessionRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.v1.Spanner/DeleteSession', $argument, '\google\protobuf\EmptyC::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\v1\ExecuteSqlRequest $input
     */
    public function ExecuteSql(\google\spanner\v1\ExecuteSqlRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.v1.Spanner/ExecuteSql', $argument, '\google\spanner\v1\ResultSet::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\v1\ExecuteSqlRequest $input
     */
    public function ExecuteStreamingSql($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/google.spanner.v1.Spanner/ExecuteStreamingSql', $argument, '\google\spanner\v1\PartialResultSet::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\v1\ReadRequest $input
     */
    public function Read(\google\spanner\v1\ReadRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.v1.Spanner/Read', $argument, '\google\spanner\v1\ResultSet::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\v1\ReadRequest $input
     */
    public function StreamingRead($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/google.spanner.v1.Spanner/StreamingRead', $argument, '\google\spanner\v1\PartialResultSet::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\v1\BeginTransactionRequest $input
     */
    public function BeginTransaction(\google\spanner\v1\BeginTransactionRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.v1.Spanner/BeginTransaction', $argument, '\google\spanner\v1\Transaction::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\v1\CommitRequest $input
     */
    public function Commit(\google\spanner\v1\CommitRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.v1.Spanner/Commit', $argument, '\google\spanner\v1\CommitResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\spanner\v1\RollbackRequest $input
     */
    public function Rollback(\google\spanner\v1\RollbackRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.spanner.v1.Spanner/Rollback', $argument, '\google\protobuf\EmptyC::deserialize', $metadata, $options);
    }
  }
}
