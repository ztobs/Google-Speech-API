<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/devtools/clouderrorreporting/v1beta1/report_errors_service.proto
//   Date: 2016-12-21 23:03:50

namespace google\devtools\clouderrorreporting\v1beta1 {

  class ReportErrorEventRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_name = null;
    
    /**  @var \google\devtools\clouderrorreporting\v1beta1\ReportedErrorEvent */
    public $event = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouderrorreporting.v1beta1.ReportErrorEventRequest');

      // OPTIONAL STRING project_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE event = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "event";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouderrorreporting\v1beta1\ReportedErrorEvent';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_name> has a value
     *
     * @return boolean
     */
    public function hasProjectName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_name> value
     *
     * @return \google\devtools\clouderrorreporting\v1beta1\ReportErrorEventRequest
     */
    public function clearProjectName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_name> value
     *
     * @return string
     */
    public function getProjectName(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_name> value
     *
     * @param string $value
     * @return \google\devtools\clouderrorreporting\v1beta1\ReportErrorEventRequest
     */
    public function setProjectName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <event> has a value
     *
     * @return boolean
     */
    public function hasEvent(){
      return $this->_has(2);
    }
    
    /**
     * Clear <event> value
     *
     * @return \google\devtools\clouderrorreporting\v1beta1\ReportErrorEventRequest
     */
    public function clearEvent(){
      return $this->_clear(2);
    }
    
    /**
     * Get <event> value
     *
     * @return \google\devtools\clouderrorreporting\v1beta1\ReportedErrorEvent
     */
    public function getEvent(){
      return $this->_get(2);
    }
    
    /**
     * Set <event> value
     *
     * @param \google\devtools\clouderrorreporting\v1beta1\ReportedErrorEvent $value
     * @return \google\devtools\clouderrorreporting\v1beta1\ReportErrorEventRequest
     */
    public function setEvent(\google\devtools\clouderrorreporting\v1beta1\ReportedErrorEvent $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\clouderrorreporting\v1beta1 {

  class ReportErrorEventResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouderrorreporting.v1beta1.ReportErrorEventResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace google\devtools\clouderrorreporting\v1beta1 {

  class ReportedErrorEvent extends \DrSlump\Protobuf\Message {

    /**  @var \google\protobuf\Timestamp */
    public $event_time = null;
    
    /**  @var \google\devtools\clouderrorreporting\v1beta1\ServiceContext */
    public $service_context = null;
    
    /**  @var string */
    public $message = null;
    
    /**  @var \google\devtools\clouderrorreporting\v1beta1\ErrorContext */
    public $context = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouderrorreporting.v1beta1.ReportedErrorEvent');

      // OPTIONAL MESSAGE event_time = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "event_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE service_context = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "service_context";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouderrorreporting\v1beta1\ServiceContext';
      $descriptor->addField($f);

      // OPTIONAL STRING message = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE context = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "context";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouderrorreporting\v1beta1\ErrorContext';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <event_time> has a value
     *
     * @return boolean
     */
    public function hasEventTime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <event_time> value
     *
     * @return \google\devtools\clouderrorreporting\v1beta1\ReportedErrorEvent
     */
    public function clearEventTime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <event_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getEventTime(){
      return $this->_get(1);
    }
    
    /**
     * Set <event_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\devtools\clouderrorreporting\v1beta1\ReportedErrorEvent
     */
    public function setEventTime(\google\protobuf\Timestamp $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <service_context> has a value
     *
     * @return boolean
     */
    public function hasServiceContext(){
      return $this->_has(2);
    }
    
    /**
     * Clear <service_context> value
     *
     * @return \google\devtools\clouderrorreporting\v1beta1\ReportedErrorEvent
     */
    public function clearServiceContext(){
      return $this->_clear(2);
    }
    
    /**
     * Get <service_context> value
     *
     * @return \google\devtools\clouderrorreporting\v1beta1\ServiceContext
     */
    public function getServiceContext(){
      return $this->_get(2);
    }
    
    /**
     * Set <service_context> value
     *
     * @param \google\devtools\clouderrorreporting\v1beta1\ServiceContext $value
     * @return \google\devtools\clouderrorreporting\v1beta1\ReportedErrorEvent
     */
    public function setServiceContext(\google\devtools\clouderrorreporting\v1beta1\ServiceContext $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <message> has a value
     *
     * @return boolean
     */
    public function hasMessage(){
      return $this->_has(3);
    }
    
    /**
     * Clear <message> value
     *
     * @return \google\devtools\clouderrorreporting\v1beta1\ReportedErrorEvent
     */
    public function clearMessage(){
      return $this->_clear(3);
    }
    
    /**
     * Get <message> value
     *
     * @return string
     */
    public function getMessage(){
      return $this->_get(3);
    }
    
    /**
     * Set <message> value
     *
     * @param string $value
     * @return \google\devtools\clouderrorreporting\v1beta1\ReportedErrorEvent
     */
    public function setMessage( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <context> has a value
     *
     * @return boolean
     */
    public function hasContext(){
      return $this->_has(4);
    }
    
    /**
     * Clear <context> value
     *
     * @return \google\devtools\clouderrorreporting\v1beta1\ReportedErrorEvent
     */
    public function clearContext(){
      return $this->_clear(4);
    }
    
    /**
     * Get <context> value
     *
     * @return \google\devtools\clouderrorreporting\v1beta1\ErrorContext
     */
    public function getContext(){
      return $this->_get(4);
    }
    
    /**
     * Set <context> value
     *
     * @param \google\devtools\clouderrorreporting\v1beta1\ErrorContext $value
     * @return \google\devtools\clouderrorreporting\v1beta1\ReportedErrorEvent
     */
    public function setContext(\google\devtools\clouderrorreporting\v1beta1\ErrorContext $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\devtools\clouderrorreporting\v1beta1 {

  class ReportErrorsServiceGrpcClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param google\devtools\clouderrorreporting\v1beta1\ReportErrorEventRequest $input
     */
    public function ReportErrorEvent(\google\devtools\clouderrorreporting\v1beta1\ReportErrorEventRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.clouderrorreporting.v1beta1.ReportErrorsService/ReportErrorEvent', $argument, '\google\devtools\clouderrorreporting\v1beta1\ReportErrorEventResponse::deserialize', $metadata, $options);
    }
  }
}
