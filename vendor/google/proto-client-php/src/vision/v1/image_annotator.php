<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/cloud/vision/v1/image_annotator.proto
//   Date: 2017-04-24 14:53:13

namespace google\cloud\vision\v1 {

  class Likelihood extends \DrSlump\Protobuf\Enum {
    const UNKNOWN = 0;
    const VERY_UNLIKELY = 1;
    const UNLIKELY = 2;
    const POSSIBLE = 3;
    const LIKELY = 4;
    const VERY_LIKELY = 5;
  }
}
namespace google\cloud\vision\v1\Feature {

  class Type extends \DrSlump\Protobuf\Enum {
    const TYPE_UNSPECIFIED = 0;
    const FACE_DETECTION = 1;
    const LANDMARK_DETECTION = 2;
    const LOGO_DETECTION = 3;
    const LABEL_DETECTION = 4;
    const TEXT_DETECTION = 5;
    const DOCUMENT_TEXT_DETECTION = 11;
    const SAFE_SEARCH_DETECTION = 6;
    const IMAGE_PROPERTIES = 7;
    const CROP_HINTS = 9;
    const WEB_DETECTION = 10;
  }
}
namespace google\cloud\vision\v1 {

  class Feature extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\cloud\vision\v1\Feature\Type */
    public $type = null;
    
    /**  @var int */
    public $max_results = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.Feature');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Feature\Type';
      $descriptor->addField($f);

      // OPTIONAL INT32 max_results = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "max_results";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\cloud\vision\v1\Feature
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \google\cloud\vision\v1\Feature\Type
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \google\cloud\vision\v1\Feature\Type $value
     * @return \google\cloud\vision\v1\Feature
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <max_results> has a value
     *
     * @return boolean
     */
    public function hasMaxResults(){
      return $this->_has(2);
    }
    
    /**
     * Clear <max_results> value
     *
     * @return \google\cloud\vision\v1\Feature
     */
    public function clearMaxResults(){
      return $this->_clear(2);
    }
    
    /**
     * Get <max_results> value
     *
     * @return int
     */
    public function getMaxResults(){
      return $this->_get(2);
    }
    
    /**
     * Set <max_results> value
     *
     * @param int $value
     * @return \google\cloud\vision\v1\Feature
     */
    public function setMaxResults( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class ImageSource extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $gcs_image_uri = null;
    
    /**  @var string */
    public $image_uri = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.ImageSource');

      // OPTIONAL STRING gcs_image_uri = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "gcs_image_uri";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING image_uri = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "image_uri";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <gcs_image_uri> has a value
     *
     * @return boolean
     */
    public function hasGcsImageUri(){
      return $this->_has(1);
    }
    
    /**
     * Clear <gcs_image_uri> value
     *
     * @return \google\cloud\vision\v1\ImageSource
     */
    public function clearGcsImageUri(){
      return $this->_clear(1);
    }
    
    /**
     * Get <gcs_image_uri> value
     *
     * @return string
     */
    public function getGcsImageUri(){
      return $this->_get(1);
    }
    
    /**
     * Set <gcs_image_uri> value
     *
     * @param string $value
     * @return \google\cloud\vision\v1\ImageSource
     */
    public function setGcsImageUri( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <image_uri> has a value
     *
     * @return boolean
     */
    public function hasImageUri(){
      return $this->_has(2);
    }
    
    /**
     * Clear <image_uri> value
     *
     * @return \google\cloud\vision\v1\ImageSource
     */
    public function clearImageUri(){
      return $this->_clear(2);
    }
    
    /**
     * Get <image_uri> value
     *
     * @return string
     */
    public function getImageUri(){
      return $this->_get(2);
    }
    
    /**
     * Set <image_uri> value
     *
     * @param string $value
     * @return \google\cloud\vision\v1\ImageSource
     */
    public function setImageUri( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class Image extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $content = null;
    
    /**  @var \google\cloud\vision\v1\ImageSource */
    public $source = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.Image');

      // OPTIONAL BYTES content = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE source = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "source";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\ImageSource';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <content> value
     *
     * @return \google\cloud\vision\v1\Image
     */
    public function clearContent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(1);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \google\cloud\vision\v1\Image
     */
    public function setContent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <source> has a value
     *
     * @return boolean
     */
    public function hasSource(){
      return $this->_has(2);
    }
    
    /**
     * Clear <source> value
     *
     * @return \google\cloud\vision\v1\Image
     */
    public function clearSource(){
      return $this->_clear(2);
    }
    
    /**
     * Get <source> value
     *
     * @return \google\cloud\vision\v1\ImageSource
     */
    public function getSource(){
      return $this->_get(2);
    }
    
    /**
     * Set <source> value
     *
     * @param \google\cloud\vision\v1\ImageSource $value
     * @return \google\cloud\vision\v1\Image
     */
    public function setSource(\google\cloud\vision\v1\ImageSource $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\vision\v1\FaceAnnotation\Landmark {

  class Type extends \DrSlump\Protobuf\Enum {
    const UNKNOWN_LANDMARK = 0;
    const LEFT_EYE = 1;
    const RIGHT_EYE = 2;
    const LEFT_OF_LEFT_EYEBROW = 3;
    const RIGHT_OF_LEFT_EYEBROW = 4;
    const LEFT_OF_RIGHT_EYEBROW = 5;
    const RIGHT_OF_RIGHT_EYEBROW = 6;
    const MIDPOINT_BETWEEN_EYES = 7;
    const NOSE_TIP = 8;
    const UPPER_LIP = 9;
    const LOWER_LIP = 10;
    const MOUTH_LEFT = 11;
    const MOUTH_RIGHT = 12;
    const MOUTH_CENTER = 13;
    const NOSE_BOTTOM_RIGHT = 14;
    const NOSE_BOTTOM_LEFT = 15;
    const NOSE_BOTTOM_CENTER = 16;
    const LEFT_EYE_TOP_BOUNDARY = 17;
    const LEFT_EYE_RIGHT_CORNER = 18;
    const LEFT_EYE_BOTTOM_BOUNDARY = 19;
    const LEFT_EYE_LEFT_CORNER = 20;
    const RIGHT_EYE_TOP_BOUNDARY = 21;
    const RIGHT_EYE_RIGHT_CORNER = 22;
    const RIGHT_EYE_BOTTOM_BOUNDARY = 23;
    const RIGHT_EYE_LEFT_CORNER = 24;
    const LEFT_EYEBROW_UPPER_MIDPOINT = 25;
    const RIGHT_EYEBROW_UPPER_MIDPOINT = 26;
    const LEFT_EAR_TRAGION = 27;
    const RIGHT_EAR_TRAGION = 28;
    const LEFT_EYE_PUPIL = 29;
    const RIGHT_EYE_PUPIL = 30;
    const FOREHEAD_GLABELLA = 31;
    const CHIN_GNATHION = 32;
    const CHIN_LEFT_GONION = 33;
    const CHIN_RIGHT_GONION = 34;
  }
}
namespace google\cloud\vision\v1\FaceAnnotation {

  class Landmark extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\cloud\vision\v1\FaceAnnotation\Landmark\Type */
    public $type = null;
    
    /**  @var \google\cloud\vision\v1\Position */
    public $position = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.FaceAnnotation.Landmark');

      // OPTIONAL ENUM type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\FaceAnnotation\Landmark\Type';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE position = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Position';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation\Landmark
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \google\cloud\vision\v1\FaceAnnotation\Landmark\Type
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \google\cloud\vision\v1\FaceAnnotation\Landmark\Type $value
     * @return \google\cloud\vision\v1\FaceAnnotation\Landmark
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(4);
    }
    
    /**
     * Clear <position> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation\Landmark
     */
    public function clearPosition(){
      return $this->_clear(4);
    }
    
    /**
     * Get <position> value
     *
     * @return \google\cloud\vision\v1\Position
     */
    public function getPosition(){
      return $this->_get(4);
    }
    
    /**
     * Set <position> value
     *
     * @param \google\cloud\vision\v1\Position $value
     * @return \google\cloud\vision\v1\FaceAnnotation\Landmark
     */
    public function setPosition(\google\cloud\vision\v1\Position $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class FaceAnnotation extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\vision\v1\BoundingPoly */
    public $bounding_poly = null;
    
    /**  @var \google\cloud\vision\v1\BoundingPoly */
    public $fd_bounding_poly = null;
    
    /**  @var \google\cloud\vision\v1\FaceAnnotation\Landmark[]  */
    public $landmarks = array();
    
    /**  @var float */
    public $roll_angle = null;
    
    /**  @var float */
    public $pan_angle = null;
    
    /**  @var float */
    public $tilt_angle = null;
    
    /**  @var float */
    public $detection_confidence = null;
    
    /**  @var float */
    public $landmarking_confidence = null;
    
    /**  @var int - \google\cloud\vision\v1\Likelihood */
    public $joy_likelihood = null;
    
    /**  @var int - \google\cloud\vision\v1\Likelihood */
    public $sorrow_likelihood = null;
    
    /**  @var int - \google\cloud\vision\v1\Likelihood */
    public $anger_likelihood = null;
    
    /**  @var int - \google\cloud\vision\v1\Likelihood */
    public $surprise_likelihood = null;
    
    /**  @var int - \google\cloud\vision\v1\Likelihood */
    public $under_exposed_likelihood = null;
    
    /**  @var int - \google\cloud\vision\v1\Likelihood */
    public $blurred_likelihood = null;
    
    /**  @var int - \google\cloud\vision\v1\Likelihood */
    public $headwear_likelihood = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.FaceAnnotation');

      // OPTIONAL MESSAGE bounding_poly = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bounding_poly";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\BoundingPoly';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE fd_bounding_poly = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "fd_bounding_poly";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\BoundingPoly';
      $descriptor->addField($f);

      // REPEATED MESSAGE landmarks = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "landmarks";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\FaceAnnotation\Landmark';
      $descriptor->addField($f);

      // OPTIONAL FLOAT roll_angle = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "roll_angle";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT pan_angle = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "pan_angle";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT tilt_angle = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "tilt_angle";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT detection_confidence = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "detection_confidence";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT landmarking_confidence = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "landmarking_confidence";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM joy_likelihood = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "joy_likelihood";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Likelihood';
      $descriptor->addField($f);

      // OPTIONAL ENUM sorrow_likelihood = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "sorrow_likelihood";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Likelihood';
      $descriptor->addField($f);

      // OPTIONAL ENUM anger_likelihood = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "anger_likelihood";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Likelihood';
      $descriptor->addField($f);

      // OPTIONAL ENUM surprise_likelihood = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "surprise_likelihood";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Likelihood';
      $descriptor->addField($f);

      // OPTIONAL ENUM under_exposed_likelihood = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "under_exposed_likelihood";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Likelihood';
      $descriptor->addField($f);

      // OPTIONAL ENUM blurred_likelihood = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "blurred_likelihood";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Likelihood';
      $descriptor->addField($f);

      // OPTIONAL ENUM headwear_likelihood = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "headwear_likelihood";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Likelihood';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bounding_poly> has a value
     *
     * @return boolean
     */
    public function hasBoundingPoly(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bounding_poly> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearBoundingPoly(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bounding_poly> value
     *
     * @return \google\cloud\vision\v1\BoundingPoly
     */
    public function getBoundingPoly(){
      return $this->_get(1);
    }
    
    /**
     * Set <bounding_poly> value
     *
     * @param \google\cloud\vision\v1\BoundingPoly $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setBoundingPoly(\google\cloud\vision\v1\BoundingPoly $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <fd_bounding_poly> has a value
     *
     * @return boolean
     */
    public function hasFdBoundingPoly(){
      return $this->_has(2);
    }
    
    /**
     * Clear <fd_bounding_poly> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearFdBoundingPoly(){
      return $this->_clear(2);
    }
    
    /**
     * Get <fd_bounding_poly> value
     *
     * @return \google\cloud\vision\v1\BoundingPoly
     */
    public function getFdBoundingPoly(){
      return $this->_get(2);
    }
    
    /**
     * Set <fd_bounding_poly> value
     *
     * @param \google\cloud\vision\v1\BoundingPoly $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setFdBoundingPoly(\google\cloud\vision\v1\BoundingPoly $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <landmarks> has a value
     *
     * @return boolean
     */
    public function hasLandmarks(){
      return $this->_has(3);
    }
    
    /**
     * Clear <landmarks> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearLandmarks(){
      return $this->_clear(3);
    }
    
    /**
     * Get <landmarks> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\FaceAnnotation\Landmark
     */
    public function getLandmarks($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <landmarks> value
     *
     * @param \google\cloud\vision\v1\FaceAnnotation\Landmark $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setLandmarks(\google\cloud\vision\v1\FaceAnnotation\Landmark $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <landmarks>
     *
     * @return \google\cloud\vision\v1\FaceAnnotation\Landmark[]
     */
    public function getLandmarksList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <landmarks>
     *
     * @param \google\cloud\vision\v1\FaceAnnotation\Landmark $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function addLandmarks(\google\cloud\vision\v1\FaceAnnotation\Landmark $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <roll_angle> has a value
     *
     * @return boolean
     */
    public function hasRollAngle(){
      return $this->_has(4);
    }
    
    /**
     * Clear <roll_angle> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearRollAngle(){
      return $this->_clear(4);
    }
    
    /**
     * Get <roll_angle> value
     *
     * @return float
     */
    public function getRollAngle(){
      return $this->_get(4);
    }
    
    /**
     * Set <roll_angle> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setRollAngle( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <pan_angle> has a value
     *
     * @return boolean
     */
    public function hasPanAngle(){
      return $this->_has(5);
    }
    
    /**
     * Clear <pan_angle> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearPanAngle(){
      return $this->_clear(5);
    }
    
    /**
     * Get <pan_angle> value
     *
     * @return float
     */
    public function getPanAngle(){
      return $this->_get(5);
    }
    
    /**
     * Set <pan_angle> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setPanAngle( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <tilt_angle> has a value
     *
     * @return boolean
     */
    public function hasTiltAngle(){
      return $this->_has(6);
    }
    
    /**
     * Clear <tilt_angle> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearTiltAngle(){
      return $this->_clear(6);
    }
    
    /**
     * Get <tilt_angle> value
     *
     * @return float
     */
    public function getTiltAngle(){
      return $this->_get(6);
    }
    
    /**
     * Set <tilt_angle> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setTiltAngle( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <detection_confidence> has a value
     *
     * @return boolean
     */
    public function hasDetectionConfidence(){
      return $this->_has(7);
    }
    
    /**
     * Clear <detection_confidence> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearDetectionConfidence(){
      return $this->_clear(7);
    }
    
    /**
     * Get <detection_confidence> value
     *
     * @return float
     */
    public function getDetectionConfidence(){
      return $this->_get(7);
    }
    
    /**
     * Set <detection_confidence> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setDetectionConfidence( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <landmarking_confidence> has a value
     *
     * @return boolean
     */
    public function hasLandmarkingConfidence(){
      return $this->_has(8);
    }
    
    /**
     * Clear <landmarking_confidence> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearLandmarkingConfidence(){
      return $this->_clear(8);
    }
    
    /**
     * Get <landmarking_confidence> value
     *
     * @return float
     */
    public function getLandmarkingConfidence(){
      return $this->_get(8);
    }
    
    /**
     * Set <landmarking_confidence> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setLandmarkingConfidence( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <joy_likelihood> has a value
     *
     * @return boolean
     */
    public function hasJoyLikelihood(){
      return $this->_has(9);
    }
    
    /**
     * Clear <joy_likelihood> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearJoyLikelihood(){
      return $this->_clear(9);
    }
    
    /**
     * Get <joy_likelihood> value
     *
     * @return int - \google\cloud\vision\v1\Likelihood
     */
    public function getJoyLikelihood(){
      return $this->_get(9);
    }
    
    /**
     * Set <joy_likelihood> value
     *
     * @param int - \google\cloud\vision\v1\Likelihood $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setJoyLikelihood( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <sorrow_likelihood> has a value
     *
     * @return boolean
     */
    public function hasSorrowLikelihood(){
      return $this->_has(10);
    }
    
    /**
     * Clear <sorrow_likelihood> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearSorrowLikelihood(){
      return $this->_clear(10);
    }
    
    /**
     * Get <sorrow_likelihood> value
     *
     * @return int - \google\cloud\vision\v1\Likelihood
     */
    public function getSorrowLikelihood(){
      return $this->_get(10);
    }
    
    /**
     * Set <sorrow_likelihood> value
     *
     * @param int - \google\cloud\vision\v1\Likelihood $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setSorrowLikelihood( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <anger_likelihood> has a value
     *
     * @return boolean
     */
    public function hasAngerLikelihood(){
      return $this->_has(11);
    }
    
    /**
     * Clear <anger_likelihood> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearAngerLikelihood(){
      return $this->_clear(11);
    }
    
    /**
     * Get <anger_likelihood> value
     *
     * @return int - \google\cloud\vision\v1\Likelihood
     */
    public function getAngerLikelihood(){
      return $this->_get(11);
    }
    
    /**
     * Set <anger_likelihood> value
     *
     * @param int - \google\cloud\vision\v1\Likelihood $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setAngerLikelihood( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <surprise_likelihood> has a value
     *
     * @return boolean
     */
    public function hasSurpriseLikelihood(){
      return $this->_has(12);
    }
    
    /**
     * Clear <surprise_likelihood> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearSurpriseLikelihood(){
      return $this->_clear(12);
    }
    
    /**
     * Get <surprise_likelihood> value
     *
     * @return int - \google\cloud\vision\v1\Likelihood
     */
    public function getSurpriseLikelihood(){
      return $this->_get(12);
    }
    
    /**
     * Set <surprise_likelihood> value
     *
     * @param int - \google\cloud\vision\v1\Likelihood $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setSurpriseLikelihood( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <under_exposed_likelihood> has a value
     *
     * @return boolean
     */
    public function hasUnderExposedLikelihood(){
      return $this->_has(13);
    }
    
    /**
     * Clear <under_exposed_likelihood> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearUnderExposedLikelihood(){
      return $this->_clear(13);
    }
    
    /**
     * Get <under_exposed_likelihood> value
     *
     * @return int - \google\cloud\vision\v1\Likelihood
     */
    public function getUnderExposedLikelihood(){
      return $this->_get(13);
    }
    
    /**
     * Set <under_exposed_likelihood> value
     *
     * @param int - \google\cloud\vision\v1\Likelihood $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setUnderExposedLikelihood( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <blurred_likelihood> has a value
     *
     * @return boolean
     */
    public function hasBlurredLikelihood(){
      return $this->_has(14);
    }
    
    /**
     * Clear <blurred_likelihood> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearBlurredLikelihood(){
      return $this->_clear(14);
    }
    
    /**
     * Get <blurred_likelihood> value
     *
     * @return int - \google\cloud\vision\v1\Likelihood
     */
    public function getBlurredLikelihood(){
      return $this->_get(14);
    }
    
    /**
     * Set <blurred_likelihood> value
     *
     * @param int - \google\cloud\vision\v1\Likelihood $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setBlurredLikelihood( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <headwear_likelihood> has a value
     *
     * @return boolean
     */
    public function hasHeadwearLikelihood(){
      return $this->_has(15);
    }
    
    /**
     * Clear <headwear_likelihood> value
     *
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function clearHeadwearLikelihood(){
      return $this->_clear(15);
    }
    
    /**
     * Get <headwear_likelihood> value
     *
     * @return int - \google\cloud\vision\v1\Likelihood
     */
    public function getHeadwearLikelihood(){
      return $this->_get(15);
    }
    
    /**
     * Set <headwear_likelihood> value
     *
     * @param int - \google\cloud\vision\v1\Likelihood $value
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function setHeadwearLikelihood( $value){
      return $this->_set(15, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class LocationInfo extends \DrSlump\Protobuf\Message {

    /**  @var \google\type\LatLng */
    public $lat_lng = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.LocationInfo');

      // OPTIONAL MESSAGE lat_lng = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "lat_lng";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\type\LatLng';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <lat_lng> has a value
     *
     * @return boolean
     */
    public function hasLatLng(){
      return $this->_has(1);
    }
    
    /**
     * Clear <lat_lng> value
     *
     * @return \google\cloud\vision\v1\LocationInfo
     */
    public function clearLatLng(){
      return $this->_clear(1);
    }
    
    /**
     * Get <lat_lng> value
     *
     * @return \google\type\LatLng
     */
    public function getLatLng(){
      return $this->_get(1);
    }
    
    /**
     * Set <lat_lng> value
     *
     * @param \google\type\LatLng $value
     * @return \google\cloud\vision\v1\LocationInfo
     */
    public function setLatLng(\google\type\LatLng $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class Property extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.Property');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\cloud\vision\v1\Property
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\cloud\vision\v1\Property
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\cloud\vision\v1\Property
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\cloud\vision\v1\Property
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class EntityAnnotation extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $mid = null;
    
    /**  @var string */
    public $locale = null;
    
    /**  @var string */
    public $description = null;
    
    /**  @var float */
    public $score = null;
    
    /**  @var float */
    public $confidence = null;
    
    /**  @var float */
    public $topicality = null;
    
    /**  @var \google\cloud\vision\v1\BoundingPoly */
    public $bounding_poly = null;
    
    /**  @var \google\cloud\vision\v1\LocationInfo[]  */
    public $locations = array();
    
    /**  @var \google\cloud\vision\v1\Property[]  */
    public $properties = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.EntityAnnotation');

      // OPTIONAL STRING mid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "mid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING locale = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "locale";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT score = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT confidence = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "confidence";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT topicality = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "topicality";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE bounding_poly = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "bounding_poly";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\BoundingPoly';
      $descriptor->addField($f);

      // REPEATED MESSAGE locations = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "locations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\LocationInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE properties = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "properties";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\Property';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <mid> has a value
     *
     * @return boolean
     */
    public function hasMid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <mid> value
     *
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function clearMid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <mid> value
     *
     * @return string
     */
    public function getMid(){
      return $this->_get(1);
    }
    
    /**
     * Set <mid> value
     *
     * @param string $value
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function setMid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <locale> has a value
     *
     * @return boolean
     */
    public function hasLocale(){
      return $this->_has(2);
    }
    
    /**
     * Clear <locale> value
     *
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function clearLocale(){
      return $this->_clear(2);
    }
    
    /**
     * Get <locale> value
     *
     * @return string
     */
    public function getLocale(){
      return $this->_get(2);
    }
    
    /**
     * Set <locale> value
     *
     * @param string $value
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function setLocale( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function clearDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(3);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function setDescription( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(4);
    }
    
    /**
     * Clear <score> value
     *
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function clearScore(){
      return $this->_clear(4);
    }
    
    /**
     * Get <score> value
     *
     * @return float
     */
    public function getScore(){
      return $this->_get(4);
    }
    
    /**
     * Set <score> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function setScore( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <confidence> has a value
     *
     * @return boolean
     */
    public function hasConfidence(){
      return $this->_has(5);
    }
    
    /**
     * Clear <confidence> value
     *
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function clearConfidence(){
      return $this->_clear(5);
    }
    
    /**
     * Get <confidence> value
     *
     * @return float
     */
    public function getConfidence(){
      return $this->_get(5);
    }
    
    /**
     * Set <confidence> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function setConfidence( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <topicality> has a value
     *
     * @return boolean
     */
    public function hasTopicality(){
      return $this->_has(6);
    }
    
    /**
     * Clear <topicality> value
     *
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function clearTopicality(){
      return $this->_clear(6);
    }
    
    /**
     * Get <topicality> value
     *
     * @return float
     */
    public function getTopicality(){
      return $this->_get(6);
    }
    
    /**
     * Set <topicality> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function setTopicality( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <bounding_poly> has a value
     *
     * @return boolean
     */
    public function hasBoundingPoly(){
      return $this->_has(7);
    }
    
    /**
     * Clear <bounding_poly> value
     *
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function clearBoundingPoly(){
      return $this->_clear(7);
    }
    
    /**
     * Get <bounding_poly> value
     *
     * @return \google\cloud\vision\v1\BoundingPoly
     */
    public function getBoundingPoly(){
      return $this->_get(7);
    }
    
    /**
     * Set <bounding_poly> value
     *
     * @param \google\cloud\vision\v1\BoundingPoly $value
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function setBoundingPoly(\google\cloud\vision\v1\BoundingPoly $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <locations> has a value
     *
     * @return boolean
     */
    public function hasLocations(){
      return $this->_has(8);
    }
    
    /**
     * Clear <locations> value
     *
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function clearLocations(){
      return $this->_clear(8);
    }
    
    /**
     * Get <locations> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\LocationInfo
     */
    public function getLocations($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <locations> value
     *
     * @param \google\cloud\vision\v1\LocationInfo $value
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function setLocations(\google\cloud\vision\v1\LocationInfo $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <locations>
     *
     * @return \google\cloud\vision\v1\LocationInfo[]
     */
    public function getLocationsList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <locations>
     *
     * @param \google\cloud\vision\v1\LocationInfo $value
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function addLocations(\google\cloud\vision\v1\LocationInfo $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <properties> has a value
     *
     * @return boolean
     */
    public function hasProperties(){
      return $this->_has(9);
    }
    
    /**
     * Clear <properties> value
     *
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function clearProperties(){
      return $this->_clear(9);
    }
    
    /**
     * Get <properties> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\Property
     */
    public function getProperties($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <properties> value
     *
     * @param \google\cloud\vision\v1\Property $value
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function setProperties(\google\cloud\vision\v1\Property $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <properties>
     *
     * @return \google\cloud\vision\v1\Property[]
     */
    public function getPropertiesList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <properties>
     *
     * @param \google\cloud\vision\v1\Property $value
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function addProperties(\google\cloud\vision\v1\Property $value){
     return $this->_add(9, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class SafeSearchAnnotation extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\cloud\vision\v1\Likelihood */
    public $adult = null;
    
    /**  @var int - \google\cloud\vision\v1\Likelihood */
    public $spoof = null;
    
    /**  @var int - \google\cloud\vision\v1\Likelihood */
    public $medical = null;
    
    /**  @var int - \google\cloud\vision\v1\Likelihood */
    public $violence = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.SafeSearchAnnotation');

      // OPTIONAL ENUM adult = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "adult";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Likelihood';
      $descriptor->addField($f);

      // OPTIONAL ENUM spoof = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "spoof";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Likelihood';
      $descriptor->addField($f);

      // OPTIONAL ENUM medical = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "medical";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Likelihood';
      $descriptor->addField($f);

      // OPTIONAL ENUM violence = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "violence";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Likelihood';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <adult> has a value
     *
     * @return boolean
     */
    public function hasAdult(){
      return $this->_has(1);
    }
    
    /**
     * Clear <adult> value
     *
     * @return \google\cloud\vision\v1\SafeSearchAnnotation
     */
    public function clearAdult(){
      return $this->_clear(1);
    }
    
    /**
     * Get <adult> value
     *
     * @return int - \google\cloud\vision\v1\Likelihood
     */
    public function getAdult(){
      return $this->_get(1);
    }
    
    /**
     * Set <adult> value
     *
     * @param int - \google\cloud\vision\v1\Likelihood $value
     * @return \google\cloud\vision\v1\SafeSearchAnnotation
     */
    public function setAdult( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <spoof> has a value
     *
     * @return boolean
     */
    public function hasSpoof(){
      return $this->_has(2);
    }
    
    /**
     * Clear <spoof> value
     *
     * @return \google\cloud\vision\v1\SafeSearchAnnotation
     */
    public function clearSpoof(){
      return $this->_clear(2);
    }
    
    /**
     * Get <spoof> value
     *
     * @return int - \google\cloud\vision\v1\Likelihood
     */
    public function getSpoof(){
      return $this->_get(2);
    }
    
    /**
     * Set <spoof> value
     *
     * @param int - \google\cloud\vision\v1\Likelihood $value
     * @return \google\cloud\vision\v1\SafeSearchAnnotation
     */
    public function setSpoof( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <medical> has a value
     *
     * @return boolean
     */
    public function hasMedical(){
      return $this->_has(3);
    }
    
    /**
     * Clear <medical> value
     *
     * @return \google\cloud\vision\v1\SafeSearchAnnotation
     */
    public function clearMedical(){
      return $this->_clear(3);
    }
    
    /**
     * Get <medical> value
     *
     * @return int - \google\cloud\vision\v1\Likelihood
     */
    public function getMedical(){
      return $this->_get(3);
    }
    
    /**
     * Set <medical> value
     *
     * @param int - \google\cloud\vision\v1\Likelihood $value
     * @return \google\cloud\vision\v1\SafeSearchAnnotation
     */
    public function setMedical( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <violence> has a value
     *
     * @return boolean
     */
    public function hasViolence(){
      return $this->_has(4);
    }
    
    /**
     * Clear <violence> value
     *
     * @return \google\cloud\vision\v1\SafeSearchAnnotation
     */
    public function clearViolence(){
      return $this->_clear(4);
    }
    
    /**
     * Get <violence> value
     *
     * @return int - \google\cloud\vision\v1\Likelihood
     */
    public function getViolence(){
      return $this->_get(4);
    }
    
    /**
     * Set <violence> value
     *
     * @param int - \google\cloud\vision\v1\Likelihood $value
     * @return \google\cloud\vision\v1\SafeSearchAnnotation
     */
    public function setViolence( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class LatLongRect extends \DrSlump\Protobuf\Message {

    /**  @var \google\type\LatLng */
    public $min_lat_lng = null;
    
    /**  @var \google\type\LatLng */
    public $max_lat_lng = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.LatLongRect');

      // OPTIONAL MESSAGE min_lat_lng = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "min_lat_lng";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\type\LatLng';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE max_lat_lng = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "max_lat_lng";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\type\LatLng';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <min_lat_lng> has a value
     *
     * @return boolean
     */
    public function hasMinLatLng(){
      return $this->_has(1);
    }
    
    /**
     * Clear <min_lat_lng> value
     *
     * @return \google\cloud\vision\v1\LatLongRect
     */
    public function clearMinLatLng(){
      return $this->_clear(1);
    }
    
    /**
     * Get <min_lat_lng> value
     *
     * @return \google\type\LatLng
     */
    public function getMinLatLng(){
      return $this->_get(1);
    }
    
    /**
     * Set <min_lat_lng> value
     *
     * @param \google\type\LatLng $value
     * @return \google\cloud\vision\v1\LatLongRect
     */
    public function setMinLatLng(\google\type\LatLng $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <max_lat_lng> has a value
     *
     * @return boolean
     */
    public function hasMaxLatLng(){
      return $this->_has(2);
    }
    
    /**
     * Clear <max_lat_lng> value
     *
     * @return \google\cloud\vision\v1\LatLongRect
     */
    public function clearMaxLatLng(){
      return $this->_clear(2);
    }
    
    /**
     * Get <max_lat_lng> value
     *
     * @return \google\type\LatLng
     */
    public function getMaxLatLng(){
      return $this->_get(2);
    }
    
    /**
     * Set <max_lat_lng> value
     *
     * @param \google\type\LatLng $value
     * @return \google\cloud\vision\v1\LatLongRect
     */
    public function setMaxLatLng(\google\type\LatLng $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class ColorInfo extends \DrSlump\Protobuf\Message {

    /**  @var \google\type\Color */
    public $color = null;
    
    /**  @var float */
    public $score = null;
    
    /**  @var float */
    public $pixel_fraction = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.ColorInfo');

      // OPTIONAL MESSAGE color = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "color";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\type\Color';
      $descriptor->addField($f);

      // OPTIONAL FLOAT score = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT pixel_fraction = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "pixel_fraction";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <color> has a value
     *
     * @return boolean
     */
    public function hasColor(){
      return $this->_has(1);
    }
    
    /**
     * Clear <color> value
     *
     * @return \google\cloud\vision\v1\ColorInfo
     */
    public function clearColor(){
      return $this->_clear(1);
    }
    
    /**
     * Get <color> value
     *
     * @return \google\type\Color
     */
    public function getColor(){
      return $this->_get(1);
    }
    
    /**
     * Set <color> value
     *
     * @param \google\type\Color $value
     * @return \google\cloud\vision\v1\ColorInfo
     */
    public function setColor(\google\type\Color $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(2);
    }
    
    /**
     * Clear <score> value
     *
     * @return \google\cloud\vision\v1\ColorInfo
     */
    public function clearScore(){
      return $this->_clear(2);
    }
    
    /**
     * Get <score> value
     *
     * @return float
     */
    public function getScore(){
      return $this->_get(2);
    }
    
    /**
     * Set <score> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\ColorInfo
     */
    public function setScore( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <pixel_fraction> has a value
     *
     * @return boolean
     */
    public function hasPixelFraction(){
      return $this->_has(3);
    }
    
    /**
     * Clear <pixel_fraction> value
     *
     * @return \google\cloud\vision\v1\ColorInfo
     */
    public function clearPixelFraction(){
      return $this->_clear(3);
    }
    
    /**
     * Get <pixel_fraction> value
     *
     * @return float
     */
    public function getPixelFraction(){
      return $this->_get(3);
    }
    
    /**
     * Set <pixel_fraction> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\ColorInfo
     */
    public function setPixelFraction( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class DominantColorsAnnotation extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\vision\v1\ColorInfo[]  */
    public $colors = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.DominantColorsAnnotation');

      // REPEATED MESSAGE colors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "colors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\ColorInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <colors> has a value
     *
     * @return boolean
     */
    public function hasColors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <colors> value
     *
     * @return \google\cloud\vision\v1\DominantColorsAnnotation
     */
    public function clearColors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <colors> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\ColorInfo
     */
    public function getColors($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <colors> value
     *
     * @param \google\cloud\vision\v1\ColorInfo $value
     * @return \google\cloud\vision\v1\DominantColorsAnnotation
     */
    public function setColors(\google\cloud\vision\v1\ColorInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <colors>
     *
     * @return \google\cloud\vision\v1\ColorInfo[]
     */
    public function getColorsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <colors>
     *
     * @param \google\cloud\vision\v1\ColorInfo $value
     * @return \google\cloud\vision\v1\DominantColorsAnnotation
     */
    public function addColors(\google\cloud\vision\v1\ColorInfo $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class ImageProperties extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\vision\v1\DominantColorsAnnotation */
    public $dominant_colors = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.ImageProperties');

      // OPTIONAL MESSAGE dominant_colors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "dominant_colors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\DominantColorsAnnotation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <dominant_colors> has a value
     *
     * @return boolean
     */
    public function hasDominantColors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <dominant_colors> value
     *
     * @return \google\cloud\vision\v1\ImageProperties
     */
    public function clearDominantColors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <dominant_colors> value
     *
     * @return \google\cloud\vision\v1\DominantColorsAnnotation
     */
    public function getDominantColors(){
      return $this->_get(1);
    }
    
    /**
     * Set <dominant_colors> value
     *
     * @param \google\cloud\vision\v1\DominantColorsAnnotation $value
     * @return \google\cloud\vision\v1\ImageProperties
     */
    public function setDominantColors(\google\cloud\vision\v1\DominantColorsAnnotation $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class CropHint extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\vision\v1\BoundingPoly */
    public $bounding_poly = null;
    
    /**  @var float */
    public $confidence = null;
    
    /**  @var float */
    public $importance_fraction = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.CropHint');

      // OPTIONAL MESSAGE bounding_poly = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bounding_poly";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\BoundingPoly';
      $descriptor->addField($f);

      // OPTIONAL FLOAT confidence = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "confidence";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT importance_fraction = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "importance_fraction";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bounding_poly> has a value
     *
     * @return boolean
     */
    public function hasBoundingPoly(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bounding_poly> value
     *
     * @return \google\cloud\vision\v1\CropHint
     */
    public function clearBoundingPoly(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bounding_poly> value
     *
     * @return \google\cloud\vision\v1\BoundingPoly
     */
    public function getBoundingPoly(){
      return $this->_get(1);
    }
    
    /**
     * Set <bounding_poly> value
     *
     * @param \google\cloud\vision\v1\BoundingPoly $value
     * @return \google\cloud\vision\v1\CropHint
     */
    public function setBoundingPoly(\google\cloud\vision\v1\BoundingPoly $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <confidence> has a value
     *
     * @return boolean
     */
    public function hasConfidence(){
      return $this->_has(2);
    }
    
    /**
     * Clear <confidence> value
     *
     * @return \google\cloud\vision\v1\CropHint
     */
    public function clearConfidence(){
      return $this->_clear(2);
    }
    
    /**
     * Get <confidence> value
     *
     * @return float
     */
    public function getConfidence(){
      return $this->_get(2);
    }
    
    /**
     * Set <confidence> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\CropHint
     */
    public function setConfidence( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <importance_fraction> has a value
     *
     * @return boolean
     */
    public function hasImportanceFraction(){
      return $this->_has(3);
    }
    
    /**
     * Clear <importance_fraction> value
     *
     * @return \google\cloud\vision\v1\CropHint
     */
    public function clearImportanceFraction(){
      return $this->_clear(3);
    }
    
    /**
     * Get <importance_fraction> value
     *
     * @return float
     */
    public function getImportanceFraction(){
      return $this->_get(3);
    }
    
    /**
     * Set <importance_fraction> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\CropHint
     */
    public function setImportanceFraction( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class CropHintsAnnotation extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\vision\v1\CropHint[]  */
    public $crop_hints = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.CropHintsAnnotation');

      // REPEATED MESSAGE crop_hints = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "crop_hints";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\CropHint';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <crop_hints> has a value
     *
     * @return boolean
     */
    public function hasCropHints(){
      return $this->_has(1);
    }
    
    /**
     * Clear <crop_hints> value
     *
     * @return \google\cloud\vision\v1\CropHintsAnnotation
     */
    public function clearCropHints(){
      return $this->_clear(1);
    }
    
    /**
     * Get <crop_hints> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\CropHint
     */
    public function getCropHints($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <crop_hints> value
     *
     * @param \google\cloud\vision\v1\CropHint $value
     * @return \google\cloud\vision\v1\CropHintsAnnotation
     */
    public function setCropHints(\google\cloud\vision\v1\CropHint $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <crop_hints>
     *
     * @return \google\cloud\vision\v1\CropHint[]
     */
    public function getCropHintsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <crop_hints>
     *
     * @param \google\cloud\vision\v1\CropHint $value
     * @return \google\cloud\vision\v1\CropHintsAnnotation
     */
    public function addCropHints(\google\cloud\vision\v1\CropHint $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class CropHintsParams extends \DrSlump\Protobuf\Message {

    /**  @var float[]  */
    public $aspect_ratios = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.CropHintsParams');

      // REPEATED FLOAT aspect_ratios = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "aspect_ratios";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <aspect_ratios> has a value
     *
     * @return boolean
     */
    public function hasAspectRatios(){
      return $this->_has(1);
    }
    
    /**
     * Clear <aspect_ratios> value
     *
     * @return \google\cloud\vision\v1\CropHintsParams
     */
    public function clearAspectRatios(){
      return $this->_clear(1);
    }
    
    /**
     * Get <aspect_ratios> value
     *
     * @param int $idx
     * @return float
     */
    public function getAspectRatios($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <aspect_ratios> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\CropHintsParams
     */
    public function setAspectRatios( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <aspect_ratios>
     *
     * @return float[]
     */
    public function getAspectRatiosList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <aspect_ratios>
     *
     * @param float $value
     * @return \google\cloud\vision\v1\CropHintsParams
     */
    public function addAspectRatios( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class ImageContext extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\vision\v1\LatLongRect */
    public $lat_long_rect = null;
    
    /**  @var string[]  */
    public $language_hints = array();
    
    /**  @var \google\cloud\vision\v1\CropHintsParams */
    public $crop_hints_params = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.ImageContext');

      // OPTIONAL MESSAGE lat_long_rect = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "lat_long_rect";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\LatLongRect';
      $descriptor->addField($f);

      // REPEATED STRING language_hints = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "language_hints";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE crop_hints_params = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "crop_hints_params";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\CropHintsParams';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <lat_long_rect> has a value
     *
     * @return boolean
     */
    public function hasLatLongRect(){
      return $this->_has(1);
    }
    
    /**
     * Clear <lat_long_rect> value
     *
     * @return \google\cloud\vision\v1\ImageContext
     */
    public function clearLatLongRect(){
      return $this->_clear(1);
    }
    
    /**
     * Get <lat_long_rect> value
     *
     * @return \google\cloud\vision\v1\LatLongRect
     */
    public function getLatLongRect(){
      return $this->_get(1);
    }
    
    /**
     * Set <lat_long_rect> value
     *
     * @param \google\cloud\vision\v1\LatLongRect $value
     * @return \google\cloud\vision\v1\ImageContext
     */
    public function setLatLongRect(\google\cloud\vision\v1\LatLongRect $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <language_hints> has a value
     *
     * @return boolean
     */
    public function hasLanguageHints(){
      return $this->_has(2);
    }
    
    /**
     * Clear <language_hints> value
     *
     * @return \google\cloud\vision\v1\ImageContext
     */
    public function clearLanguageHints(){
      return $this->_clear(2);
    }
    
    /**
     * Get <language_hints> value
     *
     * @param int $idx
     * @return string
     */
    public function getLanguageHints($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <language_hints> value
     *
     * @param string $value
     * @return \google\cloud\vision\v1\ImageContext
     */
    public function setLanguageHints( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <language_hints>
     *
     * @return string[]
     */
    public function getLanguageHintsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <language_hints>
     *
     * @param string $value
     * @return \google\cloud\vision\v1\ImageContext
     */
    public function addLanguageHints( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <crop_hints_params> has a value
     *
     * @return boolean
     */
    public function hasCropHintsParams(){
      return $this->_has(4);
    }
    
    /**
     * Clear <crop_hints_params> value
     *
     * @return \google\cloud\vision\v1\ImageContext
     */
    public function clearCropHintsParams(){
      return $this->_clear(4);
    }
    
    /**
     * Get <crop_hints_params> value
     *
     * @return \google\cloud\vision\v1\CropHintsParams
     */
    public function getCropHintsParams(){
      return $this->_get(4);
    }
    
    /**
     * Set <crop_hints_params> value
     *
     * @param \google\cloud\vision\v1\CropHintsParams $value
     * @return \google\cloud\vision\v1\ImageContext
     */
    public function setCropHintsParams(\google\cloud\vision\v1\CropHintsParams $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class AnnotateImageRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\vision\v1\Image */
    public $image = null;
    
    /**  @var \google\cloud\vision\v1\Feature[]  */
    public $features = array();
    
    /**  @var \google\cloud\vision\v1\ImageContext */
    public $image_context = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.AnnotateImageRequest');

      // OPTIONAL MESSAGE image = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "image";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\Image';
      $descriptor->addField($f);

      // REPEATED MESSAGE features = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "features";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\Feature';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE image_context = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "image_context";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\ImageContext';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <image> has a value
     *
     * @return boolean
     */
    public function hasImage(){
      return $this->_has(1);
    }
    
    /**
     * Clear <image> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageRequest
     */
    public function clearImage(){
      return $this->_clear(1);
    }
    
    /**
     * Get <image> value
     *
     * @return \google\cloud\vision\v1\Image
     */
    public function getImage(){
      return $this->_get(1);
    }
    
    /**
     * Set <image> value
     *
     * @param \google\cloud\vision\v1\Image $value
     * @return \google\cloud\vision\v1\AnnotateImageRequest
     */
    public function setImage(\google\cloud\vision\v1\Image $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <features> has a value
     *
     * @return boolean
     */
    public function hasFeatures(){
      return $this->_has(2);
    }
    
    /**
     * Clear <features> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageRequest
     */
    public function clearFeatures(){
      return $this->_clear(2);
    }
    
    /**
     * Get <features> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\Feature
     */
    public function getFeatures($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <features> value
     *
     * @param \google\cloud\vision\v1\Feature $value
     * @return \google\cloud\vision\v1\AnnotateImageRequest
     */
    public function setFeatures(\google\cloud\vision\v1\Feature $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <features>
     *
     * @return \google\cloud\vision\v1\Feature[]
     */
    public function getFeaturesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <features>
     *
     * @param \google\cloud\vision\v1\Feature $value
     * @return \google\cloud\vision\v1\AnnotateImageRequest
     */
    public function addFeatures(\google\cloud\vision\v1\Feature $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <image_context> has a value
     *
     * @return boolean
     */
    public function hasImageContext(){
      return $this->_has(3);
    }
    
    /**
     * Clear <image_context> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageRequest
     */
    public function clearImageContext(){
      return $this->_clear(3);
    }
    
    /**
     * Get <image_context> value
     *
     * @return \google\cloud\vision\v1\ImageContext
     */
    public function getImageContext(){
      return $this->_get(3);
    }
    
    /**
     * Set <image_context> value
     *
     * @param \google\cloud\vision\v1\ImageContext $value
     * @return \google\cloud\vision\v1\AnnotateImageRequest
     */
    public function setImageContext(\google\cloud\vision\v1\ImageContext $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class AnnotateImageResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\vision\v1\FaceAnnotation[]  */
    public $face_annotations = array();
    
    /**  @var \google\cloud\vision\v1\EntityAnnotation[]  */
    public $landmark_annotations = array();
    
    /**  @var \google\cloud\vision\v1\EntityAnnotation[]  */
    public $logo_annotations = array();
    
    /**  @var \google\cloud\vision\v1\EntityAnnotation[]  */
    public $label_annotations = array();
    
    /**  @var \google\cloud\vision\v1\EntityAnnotation[]  */
    public $text_annotations = array();
    
    /**  @var \google\cloud\vision\v1\TextAnnotation */
    public $full_text_annotation = null;
    
    /**  @var \google\cloud\vision\v1\SafeSearchAnnotation */
    public $safe_search_annotation = null;
    
    /**  @var \google\cloud\vision\v1\ImageProperties */
    public $image_properties_annotation = null;
    
    /**  @var \google\cloud\vision\v1\CropHintsAnnotation */
    public $crop_hints_annotation = null;
    
    /**  @var \google\cloud\vision\v1\WebDetection */
    public $web_detection = null;
    
    /**  @var \google\rpc\Status */
    public $error = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.AnnotateImageResponse');

      // REPEATED MESSAGE face_annotations = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "face_annotations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\FaceAnnotation';
      $descriptor->addField($f);

      // REPEATED MESSAGE landmark_annotations = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "landmark_annotations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\EntityAnnotation';
      $descriptor->addField($f);

      // REPEATED MESSAGE logo_annotations = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "logo_annotations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\EntityAnnotation';
      $descriptor->addField($f);

      // REPEATED MESSAGE label_annotations = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "label_annotations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\EntityAnnotation';
      $descriptor->addField($f);

      // REPEATED MESSAGE text_annotations = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "text_annotations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\EntityAnnotation';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE full_text_annotation = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "full_text_annotation";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\TextAnnotation';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE safe_search_annotation = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "safe_search_annotation";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\SafeSearchAnnotation';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE image_properties_annotation = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "image_properties_annotation";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\ImageProperties';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE crop_hints_annotation = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "crop_hints_annotation";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\CropHintsAnnotation';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE web_detection = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "web_detection";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\cloud\vision\v1\WebDetection';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE error = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "error";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\rpc\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <face_annotations> has a value
     *
     * @return boolean
     */
    public function hasFaceAnnotations(){
      return $this->_has(1);
    }
    
    /**
     * Clear <face_annotations> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function clearFaceAnnotations(){
      return $this->_clear(1);
    }
    
    /**
     * Get <face_annotations> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\FaceAnnotation
     */
    public function getFaceAnnotations($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <face_annotations> value
     *
     * @param \google\cloud\vision\v1\FaceAnnotation $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function setFaceAnnotations(\google\cloud\vision\v1\FaceAnnotation $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <face_annotations>
     *
     * @return \google\cloud\vision\v1\FaceAnnotation[]
     */
    public function getFaceAnnotationsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <face_annotations>
     *
     * @param \google\cloud\vision\v1\FaceAnnotation $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function addFaceAnnotations(\google\cloud\vision\v1\FaceAnnotation $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <landmark_annotations> has a value
     *
     * @return boolean
     */
    public function hasLandmarkAnnotations(){
      return $this->_has(2);
    }
    
    /**
     * Clear <landmark_annotations> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function clearLandmarkAnnotations(){
      return $this->_clear(2);
    }
    
    /**
     * Get <landmark_annotations> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function getLandmarkAnnotations($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <landmark_annotations> value
     *
     * @param \google\cloud\vision\v1\EntityAnnotation $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function setLandmarkAnnotations(\google\cloud\vision\v1\EntityAnnotation $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <landmark_annotations>
     *
     * @return \google\cloud\vision\v1\EntityAnnotation[]
     */
    public function getLandmarkAnnotationsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <landmark_annotations>
     *
     * @param \google\cloud\vision\v1\EntityAnnotation $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function addLandmarkAnnotations(\google\cloud\vision\v1\EntityAnnotation $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <logo_annotations> has a value
     *
     * @return boolean
     */
    public function hasLogoAnnotations(){
      return $this->_has(3);
    }
    
    /**
     * Clear <logo_annotations> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function clearLogoAnnotations(){
      return $this->_clear(3);
    }
    
    /**
     * Get <logo_annotations> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function getLogoAnnotations($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <logo_annotations> value
     *
     * @param \google\cloud\vision\v1\EntityAnnotation $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function setLogoAnnotations(\google\cloud\vision\v1\EntityAnnotation $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <logo_annotations>
     *
     * @return \google\cloud\vision\v1\EntityAnnotation[]
     */
    public function getLogoAnnotationsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <logo_annotations>
     *
     * @param \google\cloud\vision\v1\EntityAnnotation $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function addLogoAnnotations(\google\cloud\vision\v1\EntityAnnotation $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <label_annotations> has a value
     *
     * @return boolean
     */
    public function hasLabelAnnotations(){
      return $this->_has(4);
    }
    
    /**
     * Clear <label_annotations> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function clearLabelAnnotations(){
      return $this->_clear(4);
    }
    
    /**
     * Get <label_annotations> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function getLabelAnnotations($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <label_annotations> value
     *
     * @param \google\cloud\vision\v1\EntityAnnotation $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function setLabelAnnotations(\google\cloud\vision\v1\EntityAnnotation $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <label_annotations>
     *
     * @return \google\cloud\vision\v1\EntityAnnotation[]
     */
    public function getLabelAnnotationsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <label_annotations>
     *
     * @param \google\cloud\vision\v1\EntityAnnotation $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function addLabelAnnotations(\google\cloud\vision\v1\EntityAnnotation $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <text_annotations> has a value
     *
     * @return boolean
     */
    public function hasTextAnnotations(){
      return $this->_has(5);
    }
    
    /**
     * Clear <text_annotations> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function clearTextAnnotations(){
      return $this->_clear(5);
    }
    
    /**
     * Get <text_annotations> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\EntityAnnotation
     */
    public function getTextAnnotations($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <text_annotations> value
     *
     * @param \google\cloud\vision\v1\EntityAnnotation $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function setTextAnnotations(\google\cloud\vision\v1\EntityAnnotation $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <text_annotations>
     *
     * @return \google\cloud\vision\v1\EntityAnnotation[]
     */
    public function getTextAnnotationsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <text_annotations>
     *
     * @param \google\cloud\vision\v1\EntityAnnotation $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function addTextAnnotations(\google\cloud\vision\v1\EntityAnnotation $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <full_text_annotation> has a value
     *
     * @return boolean
     */
    public function hasFullTextAnnotation(){
      return $this->_has(12);
    }
    
    /**
     * Clear <full_text_annotation> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function clearFullTextAnnotation(){
      return $this->_clear(12);
    }
    
    /**
     * Get <full_text_annotation> value
     *
     * @return \google\cloud\vision\v1\TextAnnotation
     */
    public function getFullTextAnnotation(){
      return $this->_get(12);
    }
    
    /**
     * Set <full_text_annotation> value
     *
     * @param \google\cloud\vision\v1\TextAnnotation $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function setFullTextAnnotation(\google\cloud\vision\v1\TextAnnotation $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <safe_search_annotation> has a value
     *
     * @return boolean
     */
    public function hasSafeSearchAnnotation(){
      return $this->_has(6);
    }
    
    /**
     * Clear <safe_search_annotation> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function clearSafeSearchAnnotation(){
      return $this->_clear(6);
    }
    
    /**
     * Get <safe_search_annotation> value
     *
     * @return \google\cloud\vision\v1\SafeSearchAnnotation
     */
    public function getSafeSearchAnnotation(){
      return $this->_get(6);
    }
    
    /**
     * Set <safe_search_annotation> value
     *
     * @param \google\cloud\vision\v1\SafeSearchAnnotation $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function setSafeSearchAnnotation(\google\cloud\vision\v1\SafeSearchAnnotation $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <image_properties_annotation> has a value
     *
     * @return boolean
     */
    public function hasImagePropertiesAnnotation(){
      return $this->_has(8);
    }
    
    /**
     * Clear <image_properties_annotation> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function clearImagePropertiesAnnotation(){
      return $this->_clear(8);
    }
    
    /**
     * Get <image_properties_annotation> value
     *
     * @return \google\cloud\vision\v1\ImageProperties
     */
    public function getImagePropertiesAnnotation(){
      return $this->_get(8);
    }
    
    /**
     * Set <image_properties_annotation> value
     *
     * @param \google\cloud\vision\v1\ImageProperties $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function setImagePropertiesAnnotation(\google\cloud\vision\v1\ImageProperties $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <crop_hints_annotation> has a value
     *
     * @return boolean
     */
    public function hasCropHintsAnnotation(){
      return $this->_has(11);
    }
    
    /**
     * Clear <crop_hints_annotation> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function clearCropHintsAnnotation(){
      return $this->_clear(11);
    }
    
    /**
     * Get <crop_hints_annotation> value
     *
     * @return \google\cloud\vision\v1\CropHintsAnnotation
     */
    public function getCropHintsAnnotation(){
      return $this->_get(11);
    }
    
    /**
     * Set <crop_hints_annotation> value
     *
     * @param \google\cloud\vision\v1\CropHintsAnnotation $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function setCropHintsAnnotation(\google\cloud\vision\v1\CropHintsAnnotation $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <web_detection> has a value
     *
     * @return boolean
     */
    public function hasWebDetection(){
      return $this->_has(13);
    }
    
    /**
     * Clear <web_detection> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function clearWebDetection(){
      return $this->_clear(13);
    }
    
    /**
     * Get <web_detection> value
     *
     * @return \google\cloud\vision\v1\WebDetection
     */
    public function getWebDetection(){
      return $this->_get(13);
    }
    
    /**
     * Set <web_detection> value
     *
     * @param \google\cloud\vision\v1\WebDetection $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function setWebDetection(\google\cloud\vision\v1\WebDetection $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <error> has a value
     *
     * @return boolean
     */
    public function hasError(){
      return $this->_has(9);
    }
    
    /**
     * Clear <error> value
     *
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function clearError(){
      return $this->_clear(9);
    }
    
    /**
     * Get <error> value
     *
     * @return \google\rpc\Status
     */
    public function getError(){
      return $this->_get(9);
    }
    
    /**
     * Set <error> value
     *
     * @param \google\rpc\Status $value
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function setError(\google\rpc\Status $value){
      return $this->_set(9, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class BatchAnnotateImagesRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\vision\v1\AnnotateImageRequest[]  */
    public $requests = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.BatchAnnotateImagesRequest');

      // REPEATED MESSAGE requests = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "requests";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\AnnotateImageRequest';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <requests> has a value
     *
     * @return boolean
     */
    public function hasRequests(){
      return $this->_has(1);
    }
    
    /**
     * Clear <requests> value
     *
     * @return \google\cloud\vision\v1\BatchAnnotateImagesRequest
     */
    public function clearRequests(){
      return $this->_clear(1);
    }
    
    /**
     * Get <requests> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\AnnotateImageRequest
     */
    public function getRequests($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <requests> value
     *
     * @param \google\cloud\vision\v1\AnnotateImageRequest $value
     * @return \google\cloud\vision\v1\BatchAnnotateImagesRequest
     */
    public function setRequests(\google\cloud\vision\v1\AnnotateImageRequest $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <requests>
     *
     * @return \google\cloud\vision\v1\AnnotateImageRequest[]
     */
    public function getRequestsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <requests>
     *
     * @param \google\cloud\vision\v1\AnnotateImageRequest $value
     * @return \google\cloud\vision\v1\BatchAnnotateImagesRequest
     */
    public function addRequests(\google\cloud\vision\v1\AnnotateImageRequest $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class BatchAnnotateImagesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\vision\v1\AnnotateImageResponse[]  */
    public $responses = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.BatchAnnotateImagesResponse');

      // REPEATED MESSAGE responses = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "responses";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\AnnotateImageResponse';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <responses> has a value
     *
     * @return boolean
     */
    public function hasResponses(){
      return $this->_has(1);
    }
    
    /**
     * Clear <responses> value
     *
     * @return \google\cloud\vision\v1\BatchAnnotateImagesResponse
     */
    public function clearResponses(){
      return $this->_clear(1);
    }
    
    /**
     * Get <responses> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\AnnotateImageResponse
     */
    public function getResponses($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <responses> value
     *
     * @param \google\cloud\vision\v1\AnnotateImageResponse $value
     * @return \google\cloud\vision\v1\BatchAnnotateImagesResponse
     */
    public function setResponses(\google\cloud\vision\v1\AnnotateImageResponse $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <responses>
     *
     * @return \google\cloud\vision\v1\AnnotateImageResponse[]
     */
    public function getResponsesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <responses>
     *
     * @param \google\cloud\vision\v1\AnnotateImageResponse $value
     * @return \google\cloud\vision\v1\BatchAnnotateImagesResponse
     */
    public function addResponses(\google\cloud\vision\v1\AnnotateImageResponse $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class ImageAnnotatorGrpcClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param google\cloud\vision\v1\BatchAnnotateImagesRequest $input
     */
    public function BatchAnnotateImages(\google\cloud\vision\v1\BatchAnnotateImagesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.cloud.vision.v1.ImageAnnotator/BatchAnnotateImages', $argument, '\google\cloud\vision\v1\BatchAnnotateImagesResponse::deserialize', $metadata, $options);
    }
  }
}
