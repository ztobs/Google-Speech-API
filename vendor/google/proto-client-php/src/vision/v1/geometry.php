<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/cloud/vision/v1/geometry.proto
//   Date: 2016-12-21 23:04:00

namespace google\cloud\vision\v1 {

  class Vertex extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $x = null;
    
    /**  @var int */
    public $y = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.Vertex');

      // OPTIONAL INT32 x = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 y = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(1);
    }
    
    /**
     * Clear <x> value
     *
     * @return \google\cloud\vision\v1\Vertex
     */
    public function clearX(){
      return $this->_clear(1);
    }
    
    /**
     * Get <x> value
     *
     * @return int
     */
    public function getX(){
      return $this->_get(1);
    }
    
    /**
     * Set <x> value
     *
     * @param int $value
     * @return \google\cloud\vision\v1\Vertex
     */
    public function setX( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(2);
    }
    
    /**
     * Clear <y> value
     *
     * @return \google\cloud\vision\v1\Vertex
     */
    public function clearY(){
      return $this->_clear(2);
    }
    
    /**
     * Get <y> value
     *
     * @return int
     */
    public function getY(){
      return $this->_get(2);
    }
    
    /**
     * Set <y> value
     *
     * @param int $value
     * @return \google\cloud\vision\v1\Vertex
     */
    public function setY( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class BoundingPoly extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\vision\v1\Vertex[]  */
    public $vertices = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.BoundingPoly');

      // REPEATED MESSAGE vertices = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "vertices";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\Vertex';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <vertices> has a value
     *
     * @return boolean
     */
    public function hasVertices(){
      return $this->_has(1);
    }
    
    /**
     * Clear <vertices> value
     *
     * @return \google\cloud\vision\v1\BoundingPoly
     */
    public function clearVertices(){
      return $this->_clear(1);
    }
    
    /**
     * Get <vertices> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\Vertex
     */
    public function getVertices($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <vertices> value
     *
     * @param \google\cloud\vision\v1\Vertex $value
     * @return \google\cloud\vision\v1\BoundingPoly
     */
    public function setVertices(\google\cloud\vision\v1\Vertex $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <vertices>
     *
     * @return \google\cloud\vision\v1\Vertex[]
     */
    public function getVerticesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <vertices>
     *
     * @param \google\cloud\vision\v1\Vertex $value
     * @return \google\cloud\vision\v1\BoundingPoly
     */
    public function addVertices(\google\cloud\vision\v1\Vertex $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class Position extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $x = null;
    
    /**  @var float */
    public $y = null;
    
    /**  @var float */
    public $z = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.Position');

      // OPTIONAL FLOAT x = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT y = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT z = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "z";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(1);
    }
    
    /**
     * Clear <x> value
     *
     * @return \google\cloud\vision\v1\Position
     */
    public function clearX(){
      return $this->_clear(1);
    }
    
    /**
     * Get <x> value
     *
     * @return float
     */
    public function getX(){
      return $this->_get(1);
    }
    
    /**
     * Set <x> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\Position
     */
    public function setX( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(2);
    }
    
    /**
     * Clear <y> value
     *
     * @return \google\cloud\vision\v1\Position
     */
    public function clearY(){
      return $this->_clear(2);
    }
    
    /**
     * Get <y> value
     *
     * @return float
     */
    public function getY(){
      return $this->_get(2);
    }
    
    /**
     * Set <y> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\Position
     */
    public function setY( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <z> has a value
     *
     * @return boolean
     */
    public function hasZ(){
      return $this->_has(3);
    }
    
    /**
     * Clear <z> value
     *
     * @return \google\cloud\vision\v1\Position
     */
    public function clearZ(){
      return $this->_clear(3);
    }
    
    /**
     * Get <z> value
     *
     * @return float
     */
    public function getZ(){
      return $this->_get(3);
    }
    
    /**
     * Set <z> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\Position
     */
    public function setZ( $value){
      return $this->_set(3, $value);
    }
  }
}

