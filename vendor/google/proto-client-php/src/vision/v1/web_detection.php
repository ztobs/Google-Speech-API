<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/cloud/vision/v1/web_detection.proto
//   Date: 2017-03-02 17:50:46

namespace google\cloud\vision\v1\WebDetection {

  class WebEntity extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $entity_id = null;
    
    /**  @var float */
    public $score = null;
    
    /**  @var string */
    public $description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.WebDetection.WebEntity');

      // OPTIONAL STRING entity_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entity_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT score = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entity_id> has a value
     *
     * @return boolean
     */
    public function hasEntityId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entity_id> value
     *
     * @return \google\cloud\vision\v1\WebDetection\WebEntity
     */
    public function clearEntityId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entity_id> value
     *
     * @return string
     */
    public function getEntityId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entity_id> value
     *
     * @param string $value
     * @return \google\cloud\vision\v1\WebDetection\WebEntity
     */
    public function setEntityId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(2);
    }
    
    /**
     * Clear <score> value
     *
     * @return \google\cloud\vision\v1\WebDetection\WebEntity
     */
    public function clearScore(){
      return $this->_clear(2);
    }
    
    /**
     * Get <score> value
     *
     * @return float
     */
    public function getScore(){
      return $this->_get(2);
    }
    
    /**
     * Set <score> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\WebDetection\WebEntity
     */
    public function setScore( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\cloud\vision\v1\WebDetection\WebEntity
     */
    public function clearDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(3);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\cloud\vision\v1\WebDetection\WebEntity
     */
    public function setDescription( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\cloud\vision\v1\WebDetection {

  class WebImage extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $url = null;
    
    /**  @var float */
    public $score = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.WebDetection.WebImage');

      // OPTIONAL STRING url = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT score = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(1);
    }
    
    /**
     * Clear <url> value
     *
     * @return \google\cloud\vision\v1\WebDetection\WebImage
     */
    public function clearUrl(){
      return $this->_clear(1);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(1);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \google\cloud\vision\v1\WebDetection\WebImage
     */
    public function setUrl( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(2);
    }
    
    /**
     * Clear <score> value
     *
     * @return \google\cloud\vision\v1\WebDetection\WebImage
     */
    public function clearScore(){
      return $this->_clear(2);
    }
    
    /**
     * Get <score> value
     *
     * @return float
     */
    public function getScore(){
      return $this->_get(2);
    }
    
    /**
     * Set <score> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\WebDetection\WebImage
     */
    public function setScore( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\vision\v1\WebDetection {

  class WebPage extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $url = null;
    
    /**  @var float */
    public $score = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.WebDetection.WebPage');

      // OPTIONAL STRING url = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT score = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(1);
    }
    
    /**
     * Clear <url> value
     *
     * @return \google\cloud\vision\v1\WebDetection\WebPage
     */
    public function clearUrl(){
      return $this->_clear(1);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(1);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \google\cloud\vision\v1\WebDetection\WebPage
     */
    public function setUrl( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(2);
    }
    
    /**
     * Clear <score> value
     *
     * @return \google\cloud\vision\v1\WebDetection\WebPage
     */
    public function clearScore(){
      return $this->_clear(2);
    }
    
    /**
     * Get <score> value
     *
     * @return float
     */
    public function getScore(){
      return $this->_get(2);
    }
    
    /**
     * Set <score> value
     *
     * @param float $value
     * @return \google\cloud\vision\v1\WebDetection\WebPage
     */
    public function setScore( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\cloud\vision\v1 {

  class WebDetection extends \DrSlump\Protobuf\Message {

    /**  @var \google\cloud\vision\v1\WebDetection\WebEntity[]  */
    public $web_entities = array();
    
    /**  @var \google\cloud\vision\v1\WebDetection\WebImage[]  */
    public $full_matching_images = array();
    
    /**  @var \google\cloud\vision\v1\WebDetection\WebImage[]  */
    public $partial_matching_images = array();
    
    /**  @var \google\cloud\vision\v1\WebDetection\WebPage[]  */
    public $pages_with_matching_images = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.cloud.vision.v1.WebDetection');

      // REPEATED MESSAGE web_entities = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "web_entities";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\WebDetection\WebEntity';
      $descriptor->addField($f);

      // REPEATED MESSAGE full_matching_images = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "full_matching_images";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\WebDetection\WebImage';
      $descriptor->addField($f);

      // REPEATED MESSAGE partial_matching_images = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "partial_matching_images";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\WebDetection\WebImage';
      $descriptor->addField($f);

      // REPEATED MESSAGE pages_with_matching_images = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "pages_with_matching_images";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\cloud\vision\v1\WebDetection\WebPage';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <web_entities> has a value
     *
     * @return boolean
     */
    public function hasWebEntities(){
      return $this->_has(1);
    }
    
    /**
     * Clear <web_entities> value
     *
     * @return \google\cloud\vision\v1\WebDetection
     */
    public function clearWebEntities(){
      return $this->_clear(1);
    }
    
    /**
     * Get <web_entities> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\WebDetection\WebEntity
     */
    public function getWebEntities($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <web_entities> value
     *
     * @param \google\cloud\vision\v1\WebDetection\WebEntity $value
     * @return \google\cloud\vision\v1\WebDetection
     */
    public function setWebEntities(\google\cloud\vision\v1\WebDetection\WebEntity $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <web_entities>
     *
     * @return \google\cloud\vision\v1\WebDetection\WebEntity[]
     */
    public function getWebEntitiesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <web_entities>
     *
     * @param \google\cloud\vision\v1\WebDetection\WebEntity $value
     * @return \google\cloud\vision\v1\WebDetection
     */
    public function addWebEntities(\google\cloud\vision\v1\WebDetection\WebEntity $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <full_matching_images> has a value
     *
     * @return boolean
     */
    public function hasFullMatchingImages(){
      return $this->_has(2);
    }
    
    /**
     * Clear <full_matching_images> value
     *
     * @return \google\cloud\vision\v1\WebDetection
     */
    public function clearFullMatchingImages(){
      return $this->_clear(2);
    }
    
    /**
     * Get <full_matching_images> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\WebDetection\WebImage
     */
    public function getFullMatchingImages($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <full_matching_images> value
     *
     * @param \google\cloud\vision\v1\WebDetection\WebImage $value
     * @return \google\cloud\vision\v1\WebDetection
     */
    public function setFullMatchingImages(\google\cloud\vision\v1\WebDetection\WebImage $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <full_matching_images>
     *
     * @return \google\cloud\vision\v1\WebDetection\WebImage[]
     */
    public function getFullMatchingImagesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <full_matching_images>
     *
     * @param \google\cloud\vision\v1\WebDetection\WebImage $value
     * @return \google\cloud\vision\v1\WebDetection
     */
    public function addFullMatchingImages(\google\cloud\vision\v1\WebDetection\WebImage $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <partial_matching_images> has a value
     *
     * @return boolean
     */
    public function hasPartialMatchingImages(){
      return $this->_has(3);
    }
    
    /**
     * Clear <partial_matching_images> value
     *
     * @return \google\cloud\vision\v1\WebDetection
     */
    public function clearPartialMatchingImages(){
      return $this->_clear(3);
    }
    
    /**
     * Get <partial_matching_images> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\WebDetection\WebImage
     */
    public function getPartialMatchingImages($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <partial_matching_images> value
     *
     * @param \google\cloud\vision\v1\WebDetection\WebImage $value
     * @return \google\cloud\vision\v1\WebDetection
     */
    public function setPartialMatchingImages(\google\cloud\vision\v1\WebDetection\WebImage $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <partial_matching_images>
     *
     * @return \google\cloud\vision\v1\WebDetection\WebImage[]
     */
    public function getPartialMatchingImagesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <partial_matching_images>
     *
     * @param \google\cloud\vision\v1\WebDetection\WebImage $value
     * @return \google\cloud\vision\v1\WebDetection
     */
    public function addPartialMatchingImages(\google\cloud\vision\v1\WebDetection\WebImage $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <pages_with_matching_images> has a value
     *
     * @return boolean
     */
    public function hasPagesWithMatchingImages(){
      return $this->_has(4);
    }
    
    /**
     * Clear <pages_with_matching_images> value
     *
     * @return \google\cloud\vision\v1\WebDetection
     */
    public function clearPagesWithMatchingImages(){
      return $this->_clear(4);
    }
    
    /**
     * Get <pages_with_matching_images> value
     *
     * @param int $idx
     * @return \google\cloud\vision\v1\WebDetection\WebPage
     */
    public function getPagesWithMatchingImages($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <pages_with_matching_images> value
     *
     * @param \google\cloud\vision\v1\WebDetection\WebPage $value
     * @return \google\cloud\vision\v1\WebDetection
     */
    public function setPagesWithMatchingImages(\google\cloud\vision\v1\WebDetection\WebPage $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <pages_with_matching_images>
     *
     * @return \google\cloud\vision\v1\WebDetection\WebPage[]
     */
    public function getPagesWithMatchingImagesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <pages_with_matching_images>
     *
     * @param \google\cloud\vision\v1\WebDetection\WebPage $value
     * @return \google\cloud\vision\v1\WebDetection
     */
    public function addPagesWithMatchingImages(\google\cloud\vision\v1\WebDetection\WebPage $value){
     return $this->_add(4, $value);
    }
  }
}

