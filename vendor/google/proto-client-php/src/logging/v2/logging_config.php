<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/logging/v2/logging_config.proto
//   Date: 2017-05-28 01:56:50

namespace google\logging\v2\LogSink {

  class VersionFormat extends \DrSlump\Protobuf\Enum {
    const VERSION_FORMAT_UNSPECIFIED = 0;
    const V2 = 1;
    const V1 = 2;
  }
}
namespace google\logging\v2 {

  class LogSink extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $destination = null;
    
    /**  @var string */
    public $filter = null;
    
    /**  @var int - \google\logging\v2\LogSink\VersionFormat */
    public $output_version_format = null;
    
    /**  @var string */
    public $writer_identity = null;
    
    /**  @var boolean */
    public $include_children = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $start_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $end_time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.LogSink');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING destination = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "destination";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING filter = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM output_version_format = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "output_version_format";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\logging\v2\LogSink\VersionFormat';
      $descriptor->addField($f);

      // OPTIONAL STRING writer_identity = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "writer_identity";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL include_children = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "include_children";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE start_time = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "start_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE end_time = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "end_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\logging\v2\LogSink
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\logging\v2\LogSink
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <destination> has a value
     *
     * @return boolean
     */
    public function hasDestination(){
      return $this->_has(3);
    }
    
    /**
     * Clear <destination> value
     *
     * @return \google\logging\v2\LogSink
     */
    public function clearDestination(){
      return $this->_clear(3);
    }
    
    /**
     * Get <destination> value
     *
     * @return string
     */
    public function getDestination(){
      return $this->_get(3);
    }
    
    /**
     * Set <destination> value
     *
     * @param string $value
     * @return \google\logging\v2\LogSink
     */
    public function setDestination( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(5);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \google\logging\v2\LogSink
     */
    public function clearFilter(){
      return $this->_clear(5);
    }
    
    /**
     * Get <filter> value
     *
     * @return string
     */
    public function getFilter(){
      return $this->_get(5);
    }
    
    /**
     * Set <filter> value
     *
     * @param string $value
     * @return \google\logging\v2\LogSink
     */
    public function setFilter( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <output_version_format> has a value
     *
     * @return boolean
     */
    public function hasOutputVersionFormat(){
      return $this->_has(6);
    }
    
    /**
     * Clear <output_version_format> value
     *
     * @return \google\logging\v2\LogSink
     */
    public function clearOutputVersionFormat(){
      return $this->_clear(6);
    }
    
    /**
     * Get <output_version_format> value
     *
     * @return int - \google\logging\v2\LogSink\VersionFormat
     */
    public function getOutputVersionFormat(){
      return $this->_get(6);
    }
    
    /**
     * Set <output_version_format> value
     *
     * @param int - \google\logging\v2\LogSink\VersionFormat $value
     * @return \google\logging\v2\LogSink
     */
    public function setOutputVersionFormat( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <writer_identity> has a value
     *
     * @return boolean
     */
    public function hasWriterIdentity(){
      return $this->_has(8);
    }
    
    /**
     * Clear <writer_identity> value
     *
     * @return \google\logging\v2\LogSink
     */
    public function clearWriterIdentity(){
      return $this->_clear(8);
    }
    
    /**
     * Get <writer_identity> value
     *
     * @return string
     */
    public function getWriterIdentity(){
      return $this->_get(8);
    }
    
    /**
     * Set <writer_identity> value
     *
     * @param string $value
     * @return \google\logging\v2\LogSink
     */
    public function setWriterIdentity( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <include_children> has a value
     *
     * @return boolean
     */
    public function hasIncludeChildren(){
      return $this->_has(9);
    }
    
    /**
     * Clear <include_children> value
     *
     * @return \google\logging\v2\LogSink
     */
    public function clearIncludeChildren(){
      return $this->_clear(9);
    }
    
    /**
     * Get <include_children> value
     *
     * @return boolean
     */
    public function getIncludeChildren(){
      return $this->_get(9);
    }
    
    /**
     * Set <include_children> value
     *
     * @param boolean $value
     * @return \google\logging\v2\LogSink
     */
    public function setIncludeChildren( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <start_time> has a value
     *
     * @return boolean
     */
    public function hasStartTime(){
      return $this->_has(10);
    }
    
    /**
     * Clear <start_time> value
     *
     * @return \google\logging\v2\LogSink
     */
    public function clearStartTime(){
      return $this->_clear(10);
    }
    
    /**
     * Get <start_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getStartTime(){
      return $this->_get(10);
    }
    
    /**
     * Set <start_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\logging\v2\LogSink
     */
    public function setStartTime(\google\protobuf\Timestamp $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <end_time> has a value
     *
     * @return boolean
     */
    public function hasEndTime(){
      return $this->_has(11);
    }
    
    /**
     * Clear <end_time> value
     *
     * @return \google\logging\v2\LogSink
     */
    public function clearEndTime(){
      return $this->_clear(11);
    }
    
    /**
     * Get <end_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getEndTime(){
      return $this->_get(11);
    }
    
    /**
     * Set <end_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\logging\v2\LogSink
     */
    public function setEndTime(\google\protobuf\Timestamp $value){
      return $this->_set(11, $value);
    }
  }
}

namespace google\logging\v2 {

  class ListSinksRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $parent = null;
    
    /**  @var string */
    public $page_token = null;
    
    /**  @var int */
    public $page_size = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.ListSinksRequest');

      // OPTIONAL STRING parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \google\logging\v2\ListSinksRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return string
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param string $value
     * @return \google\logging\v2\ListSinksRequest
     */
    public function setParent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\logging\v2\ListSinksRequest
     */
    public function clearPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\logging\v2\ListSinksRequest
     */
    public function setPageToken( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\logging\v2\ListSinksRequest
     */
    public function clearPageSize(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\logging\v2\ListSinksRequest
     */
    public function setPageSize( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\logging\v2 {

  class ListSinksResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\logging\v2\LogSink[]  */
    public $sinks = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.ListSinksResponse');

      // REPEATED MESSAGE sinks = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sinks";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\logging\v2\LogSink';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sinks> has a value
     *
     * @return boolean
     */
    public function hasSinks(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sinks> value
     *
     * @return \google\logging\v2\ListSinksResponse
     */
    public function clearSinks(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sinks> value
     *
     * @param int $idx
     * @return \google\logging\v2\LogSink
     */
    public function getSinks($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <sinks> value
     *
     * @param \google\logging\v2\LogSink $value
     * @return \google\logging\v2\ListSinksResponse
     */
    public function setSinks(\google\logging\v2\LogSink $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <sinks>
     *
     * @return \google\logging\v2\LogSink[]
     */
    public function getSinksList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <sinks>
     *
     * @param \google\logging\v2\LogSink $value
     * @return \google\logging\v2\ListSinksResponse
     */
    public function addSinks(\google\logging\v2\LogSink $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\logging\v2\ListSinksResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\logging\v2\ListSinksResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\logging\v2 {

  class GetSinkRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sink_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.GetSinkRequest');

      // OPTIONAL STRING sink_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sink_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sink_name> has a value
     *
     * @return boolean
     */
    public function hasSinkName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sink_name> value
     *
     * @return \google\logging\v2\GetSinkRequest
     */
    public function clearSinkName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sink_name> value
     *
     * @return string
     */
    public function getSinkName(){
      return $this->_get(1);
    }
    
    /**
     * Set <sink_name> value
     *
     * @param string $value
     * @return \google\logging\v2\GetSinkRequest
     */
    public function setSinkName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\logging\v2 {

  class CreateSinkRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $parent = null;
    
    /**  @var \google\logging\v2\LogSink */
    public $sink = null;
    
    /**  @var boolean */
    public $unique_writer_identity = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.CreateSinkRequest');

      // OPTIONAL STRING parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sink = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sink";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\logging\v2\LogSink';
      $descriptor->addField($f);

      // OPTIONAL BOOL unique_writer_identity = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "unique_writer_identity";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \google\logging\v2\CreateSinkRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return string
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param string $value
     * @return \google\logging\v2\CreateSinkRequest
     */
    public function setParent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sink> has a value
     *
     * @return boolean
     */
    public function hasSink(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sink> value
     *
     * @return \google\logging\v2\CreateSinkRequest
     */
    public function clearSink(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sink> value
     *
     * @return \google\logging\v2\LogSink
     */
    public function getSink(){
      return $this->_get(2);
    }
    
    /**
     * Set <sink> value
     *
     * @param \google\logging\v2\LogSink $value
     * @return \google\logging\v2\CreateSinkRequest
     */
    public function setSink(\google\logging\v2\LogSink $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <unique_writer_identity> has a value
     *
     * @return boolean
     */
    public function hasUniqueWriterIdentity(){
      return $this->_has(3);
    }
    
    /**
     * Clear <unique_writer_identity> value
     *
     * @return \google\logging\v2\CreateSinkRequest
     */
    public function clearUniqueWriterIdentity(){
      return $this->_clear(3);
    }
    
    /**
     * Get <unique_writer_identity> value
     *
     * @return boolean
     */
    public function getUniqueWriterIdentity(){
      return $this->_get(3);
    }
    
    /**
     * Set <unique_writer_identity> value
     *
     * @param boolean $value
     * @return \google\logging\v2\CreateSinkRequest
     */
    public function setUniqueWriterIdentity( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\logging\v2 {

  class UpdateSinkRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sink_name = null;
    
    /**  @var \google\logging\v2\LogSink */
    public $sink = null;
    
    /**  @var boolean */
    public $unique_writer_identity = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.UpdateSinkRequest');

      // OPTIONAL STRING sink_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sink_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sink = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sink";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\logging\v2\LogSink';
      $descriptor->addField($f);

      // OPTIONAL BOOL unique_writer_identity = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "unique_writer_identity";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sink_name> has a value
     *
     * @return boolean
     */
    public function hasSinkName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sink_name> value
     *
     * @return \google\logging\v2\UpdateSinkRequest
     */
    public function clearSinkName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sink_name> value
     *
     * @return string
     */
    public function getSinkName(){
      return $this->_get(1);
    }
    
    /**
     * Set <sink_name> value
     *
     * @param string $value
     * @return \google\logging\v2\UpdateSinkRequest
     */
    public function setSinkName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sink> has a value
     *
     * @return boolean
     */
    public function hasSink(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sink> value
     *
     * @return \google\logging\v2\UpdateSinkRequest
     */
    public function clearSink(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sink> value
     *
     * @return \google\logging\v2\LogSink
     */
    public function getSink(){
      return $this->_get(2);
    }
    
    /**
     * Set <sink> value
     *
     * @param \google\logging\v2\LogSink $value
     * @return \google\logging\v2\UpdateSinkRequest
     */
    public function setSink(\google\logging\v2\LogSink $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <unique_writer_identity> has a value
     *
     * @return boolean
     */
    public function hasUniqueWriterIdentity(){
      return $this->_has(3);
    }
    
    /**
     * Clear <unique_writer_identity> value
     *
     * @return \google\logging\v2\UpdateSinkRequest
     */
    public function clearUniqueWriterIdentity(){
      return $this->_clear(3);
    }
    
    /**
     * Get <unique_writer_identity> value
     *
     * @return boolean
     */
    public function getUniqueWriterIdentity(){
      return $this->_get(3);
    }
    
    /**
     * Set <unique_writer_identity> value
     *
     * @param boolean $value
     * @return \google\logging\v2\UpdateSinkRequest
     */
    public function setUniqueWriterIdentity( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\logging\v2 {

  class DeleteSinkRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sink_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.DeleteSinkRequest');

      // OPTIONAL STRING sink_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sink_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sink_name> has a value
     *
     * @return boolean
     */
    public function hasSinkName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sink_name> value
     *
     * @return \google\logging\v2\DeleteSinkRequest
     */
    public function clearSinkName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sink_name> value
     *
     * @return string
     */
    public function getSinkName(){
      return $this->_get(1);
    }
    
    /**
     * Set <sink_name> value
     *
     * @param string $value
     * @return \google\logging\v2\DeleteSinkRequest
     */
    public function setSinkName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\logging\v2 {

  class ConfigServiceV2GrpcClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param google\logging\v2\ListSinksRequest $input
     */
    public function ListSinks(\google\logging\v2\ListSinksRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.logging.v2.ConfigServiceV2/ListSinks', $argument, '\google\logging\v2\ListSinksResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\logging\v2\GetSinkRequest $input
     */
    public function GetSink(\google\logging\v2\GetSinkRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.logging.v2.ConfigServiceV2/GetSink', $argument, '\google\logging\v2\LogSink::deserialize', $metadata, $options);
    }
    /**
     * @param google\logging\v2\CreateSinkRequest $input
     */
    public function CreateSink(\google\logging\v2\CreateSinkRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.logging.v2.ConfigServiceV2/CreateSink', $argument, '\google\logging\v2\LogSink::deserialize', $metadata, $options);
    }
    /**
     * @param google\logging\v2\UpdateSinkRequest $input
     */
    public function UpdateSink(\google\logging\v2\UpdateSinkRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.logging.v2.ConfigServiceV2/UpdateSink', $argument, '\google\logging\v2\LogSink::deserialize', $metadata, $options);
    }
    /**
     * @param google\logging\v2\DeleteSinkRequest $input
     */
    public function DeleteSink(\google\logging\v2\DeleteSinkRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.logging.v2.ConfigServiceV2/DeleteSink', $argument, '\google\protobuf\EmptyC::deserialize', $metadata, $options);
    }
  }
}
