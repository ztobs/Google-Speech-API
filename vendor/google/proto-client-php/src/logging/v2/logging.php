<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/logging/v2/logging.proto
//   Date: 2017-05-28 01:56:50

namespace google\logging\v2 {

  class DeleteLogRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $log_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.DeleteLogRequest');

      // OPTIONAL STRING log_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "log_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <log_name> has a value
     *
     * @return boolean
     */
    public function hasLogName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <log_name> value
     *
     * @return \google\logging\v2\DeleteLogRequest
     */
    public function clearLogName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <log_name> value
     *
     * @return string
     */
    public function getLogName(){
      return $this->_get(1);
    }
    
    /**
     * Set <log_name> value
     *
     * @param string $value
     * @return \google\logging\v2\DeleteLogRequest
     */
    public function setLogName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\logging\v2\WriteLogEntriesRequest {

  class LabelsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.WriteLogEntriesRequest.LabelsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\logging\v2\WriteLogEntriesRequest\LabelsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\logging\v2\WriteLogEntriesRequest\LabelsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\logging\v2\WriteLogEntriesRequest\LabelsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\logging\v2\WriteLogEntriesRequest\LabelsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\logging\v2 {

  class WriteLogEntriesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $log_name = null;
    
    /**  @var \google\api\MonitoredResource */
    public $resource = null;
    
    /**  @var \google\logging\v2\WriteLogEntriesRequest\LabelsEntry[]  */
    public $labels = array();
    
    /**  @var \google\logging\v2\LogEntry[]  */
    public $entries = array();
    
    /**  @var boolean */
    public $partial_success = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.WriteLogEntriesRequest');

      // OPTIONAL STRING log_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "log_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE resource = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "resource";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\api\MonitoredResource';
      $descriptor->addField($f);

      // REPEATED MESSAGE labels = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\logging\v2\WriteLogEntriesRequest\LabelsEntry';
      $descriptor->addField($f);

      // REPEATED MESSAGE entries = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "entries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\logging\v2\LogEntry';
      $descriptor->addField($f);

      // OPTIONAL BOOL partial_success = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "partial_success";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <log_name> has a value
     *
     * @return boolean
     */
    public function hasLogName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <log_name> value
     *
     * @return \google\logging\v2\WriteLogEntriesRequest
     */
    public function clearLogName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <log_name> value
     *
     * @return string
     */
    public function getLogName(){
      return $this->_get(1);
    }
    
    /**
     * Set <log_name> value
     *
     * @param string $value
     * @return \google\logging\v2\WriteLogEntriesRequest
     */
    public function setLogName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <resource> has a value
     *
     * @return boolean
     */
    public function hasResource(){
      return $this->_has(2);
    }
    
    /**
     * Clear <resource> value
     *
     * @return \google\logging\v2\WriteLogEntriesRequest
     */
    public function clearResource(){
      return $this->_clear(2);
    }
    
    /**
     * Get <resource> value
     *
     * @return \google\api\MonitoredResource
     */
    public function getResource(){
      return $this->_get(2);
    }
    
    /**
     * Set <resource> value
     *
     * @param \google\api\MonitoredResource $value
     * @return \google\logging\v2\WriteLogEntriesRequest
     */
    public function setResource(\google\api\MonitoredResource $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(3);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \google\logging\v2\WriteLogEntriesRequest
     */
    public function clearLabels(){
      return $this->_clear(3);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return \google\logging\v2\WriteLogEntriesRequest\LabelsEntry
     */
    public function getLabels($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param \google\logging\v2\WriteLogEntriesRequest\LabelsEntry $value
     * @return \google\logging\v2\WriteLogEntriesRequest
     */
    public function setLabels(\google\logging\v2\WriteLogEntriesRequest\LabelsEntry $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return \google\logging\v2\WriteLogEntriesRequest\LabelsEntry[]
     */
    public function getLabelsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param \google\logging\v2\WriteLogEntriesRequest\LabelsEntry $value
     * @return \google\logging\v2\WriteLogEntriesRequest
     */
    public function addLabels(\google\logging\v2\WriteLogEntriesRequest\LabelsEntry $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <entries> has a value
     *
     * @return boolean
     */
    public function hasEntries(){
      return $this->_has(4);
    }
    
    /**
     * Clear <entries> value
     *
     * @return \google\logging\v2\WriteLogEntriesRequest
     */
    public function clearEntries(){
      return $this->_clear(4);
    }
    
    /**
     * Get <entries> value
     *
     * @param int $idx
     * @return \google\logging\v2\LogEntry
     */
    public function getEntries($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <entries> value
     *
     * @param \google\logging\v2\LogEntry $value
     * @return \google\logging\v2\WriteLogEntriesRequest
     */
    public function setEntries(\google\logging\v2\LogEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <entries>
     *
     * @return \google\logging\v2\LogEntry[]
     */
    public function getEntriesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <entries>
     *
     * @param \google\logging\v2\LogEntry $value
     * @return \google\logging\v2\WriteLogEntriesRequest
     */
    public function addEntries(\google\logging\v2\LogEntry $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <partial_success> has a value
     *
     * @return boolean
     */
    public function hasPartialSuccess(){
      return $this->_has(5);
    }
    
    /**
     * Clear <partial_success> value
     *
     * @return \google\logging\v2\WriteLogEntriesRequest
     */
    public function clearPartialSuccess(){
      return $this->_clear(5);
    }
    
    /**
     * Get <partial_success> value
     *
     * @return boolean
     */
    public function getPartialSuccess(){
      return $this->_get(5);
    }
    
    /**
     * Set <partial_success> value
     *
     * @param boolean $value
     * @return \google\logging\v2\WriteLogEntriesRequest
     */
    public function setPartialSuccess( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\logging\v2 {

  class WriteLogEntriesResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.WriteLogEntriesResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace google\logging\v2\WriteLogEntriesPartialErrors {

  class LogEntryErrorsEntry extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $key = null;
    
    /**  @var \google\rpc\Status */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.WriteLogEntriesPartialErrors.LogEntryErrorsEntry');

      // OPTIONAL INT32 key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\rpc\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\logging\v2\WriteLogEntriesPartialErrors\LogEntryErrorsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return int
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param int $value
     * @return \google\logging\v2\WriteLogEntriesPartialErrors\LogEntryErrorsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\logging\v2\WriteLogEntriesPartialErrors\LogEntryErrorsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \google\rpc\Status
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\rpc\Status $value
     * @return \google\logging\v2\WriteLogEntriesPartialErrors\LogEntryErrorsEntry
     */
    public function setValue(\google\rpc\Status $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\logging\v2 {

  class WriteLogEntriesPartialErrors extends \DrSlump\Protobuf\Message {

    /**  @var \google\logging\v2\WriteLogEntriesPartialErrors\LogEntryErrorsEntry[]  */
    public $log_entry_errors = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.WriteLogEntriesPartialErrors');

      // REPEATED MESSAGE log_entry_errors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "log_entry_errors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\logging\v2\WriteLogEntriesPartialErrors\LogEntryErrorsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <log_entry_errors> has a value
     *
     * @return boolean
     */
    public function hasLogEntryErrors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <log_entry_errors> value
     *
     * @return \google\logging\v2\WriteLogEntriesPartialErrors
     */
    public function clearLogEntryErrors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <log_entry_errors> value
     *
     * @param int $idx
     * @return \google\logging\v2\WriteLogEntriesPartialErrors\LogEntryErrorsEntry
     */
    public function getLogEntryErrors($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <log_entry_errors> value
     *
     * @param \google\logging\v2\WriteLogEntriesPartialErrors\LogEntryErrorsEntry $value
     * @return \google\logging\v2\WriteLogEntriesPartialErrors
     */
    public function setLogEntryErrors(\google\logging\v2\WriteLogEntriesPartialErrors\LogEntryErrorsEntry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <log_entry_errors>
     *
     * @return \google\logging\v2\WriteLogEntriesPartialErrors\LogEntryErrorsEntry[]
     */
    public function getLogEntryErrorsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <log_entry_errors>
     *
     * @param \google\logging\v2\WriteLogEntriesPartialErrors\LogEntryErrorsEntry $value
     * @return \google\logging\v2\WriteLogEntriesPartialErrors
     */
    public function addLogEntryErrors(\google\logging\v2\WriteLogEntriesPartialErrors\LogEntryErrorsEntry $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\logging\v2 {

  class ListLogEntriesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $project_ids = array();
    
    /**  @var string[]  */
    public $resource_names = array();
    
    /**  @var string */
    public $filter = null;
    
    /**  @var string */
    public $order_by = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.ListLogEntriesRequest');

      // REPEATED STRING project_ids = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING resource_names = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "resource_names";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING filter = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING order_by = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "order_by";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_ids> has a value
     *
     * @return boolean
     */
    public function hasProjectIds(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_ids> value
     *
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function clearProjectIds(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_ids> value
     *
     * @param int $idx
     * @return string
     */
    public function getProjectIds($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <project_ids> value
     *
     * @param string $value
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function setProjectIds( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <project_ids>
     *
     * @return string[]
     */
    public function getProjectIdsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <project_ids>
     *
     * @param string $value
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function addProjectIds( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <resource_names> has a value
     *
     * @return boolean
     */
    public function hasResourceNames(){
      return $this->_has(8);
    }
    
    /**
     * Clear <resource_names> value
     *
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function clearResourceNames(){
      return $this->_clear(8);
    }
    
    /**
     * Get <resource_names> value
     *
     * @param int $idx
     * @return string
     */
    public function getResourceNames($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <resource_names> value
     *
     * @param string $value
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function setResourceNames( $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <resource_names>
     *
     * @return string[]
     */
    public function getResourceNamesList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <resource_names>
     *
     * @param string $value
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function addResourceNames( $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(2);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function clearFilter(){
      return $this->_clear(2);
    }
    
    /**
     * Get <filter> value
     *
     * @return string
     */
    public function getFilter(){
      return $this->_get(2);
    }
    
    /**
     * Set <filter> value
     *
     * @param string $value
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function setFilter( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <order_by> has a value
     *
     * @return boolean
     */
    public function hasOrderBy(){
      return $this->_has(3);
    }
    
    /**
     * Clear <order_by> value
     *
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function clearOrderBy(){
      return $this->_clear(3);
    }
    
    /**
     * Get <order_by> value
     *
     * @return string
     */
    public function getOrderBy(){
      return $this->_get(3);
    }
    
    /**
     * Set <order_by> value
     *
     * @param string $value
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function setOrderBy( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(4);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function clearPageSize(){
      return $this->_clear(4);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(4);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function setPageSize( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(5);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function clearPageToken(){
      return $this->_clear(5);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(5);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\logging\v2\ListLogEntriesRequest
     */
    public function setPageToken( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\logging\v2 {

  class ListLogEntriesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\logging\v2\LogEntry[]  */
    public $entries = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.ListLogEntriesResponse');

      // REPEATED MESSAGE entries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\logging\v2\LogEntry';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entries> has a value
     *
     * @return boolean
     */
    public function hasEntries(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entries> value
     *
     * @return \google\logging\v2\ListLogEntriesResponse
     */
    public function clearEntries(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entries> value
     *
     * @param int $idx
     * @return \google\logging\v2\LogEntry
     */
    public function getEntries($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <entries> value
     *
     * @param \google\logging\v2\LogEntry $value
     * @return \google\logging\v2\ListLogEntriesResponse
     */
    public function setEntries(\google\logging\v2\LogEntry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <entries>
     *
     * @return \google\logging\v2\LogEntry[]
     */
    public function getEntriesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <entries>
     *
     * @param \google\logging\v2\LogEntry $value
     * @return \google\logging\v2\ListLogEntriesResponse
     */
    public function addEntries(\google\logging\v2\LogEntry $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\logging\v2\ListLogEntriesResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\logging\v2\ListLogEntriesResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\logging\v2 {

  class ListMonitoredResourceDescriptorsRequest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.ListMonitoredResourceDescriptorsRequest');

      // OPTIONAL INT32 page_size = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(1);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\logging\v2\ListMonitoredResourceDescriptorsRequest
     */
    public function clearPageSize(){
      return $this->_clear(1);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(1);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\logging\v2\ListMonitoredResourceDescriptorsRequest
     */
    public function setPageSize( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\logging\v2\ListMonitoredResourceDescriptorsRequest
     */
    public function clearPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\logging\v2\ListMonitoredResourceDescriptorsRequest
     */
    public function setPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\logging\v2 {

  class ListMonitoredResourceDescriptorsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\api\MonitoredResourceDescriptor[]  */
    public $resource_descriptors = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.ListMonitoredResourceDescriptorsResponse');

      // REPEATED MESSAGE resource_descriptors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "resource_descriptors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\MonitoredResourceDescriptor';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <resource_descriptors> has a value
     *
     * @return boolean
     */
    public function hasResourceDescriptors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <resource_descriptors> value
     *
     * @return \google\logging\v2\ListMonitoredResourceDescriptorsResponse
     */
    public function clearResourceDescriptors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <resource_descriptors> value
     *
     * @param int $idx
     * @return \google\api\MonitoredResourceDescriptor
     */
    public function getResourceDescriptors($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <resource_descriptors> value
     *
     * @param \google\api\MonitoredResourceDescriptor $value
     * @return \google\logging\v2\ListMonitoredResourceDescriptorsResponse
     */
    public function setResourceDescriptors(\google\api\MonitoredResourceDescriptor $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <resource_descriptors>
     *
     * @return \google\api\MonitoredResourceDescriptor[]
     */
    public function getResourceDescriptorsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <resource_descriptors>
     *
     * @param \google\api\MonitoredResourceDescriptor $value
     * @return \google\logging\v2\ListMonitoredResourceDescriptorsResponse
     */
    public function addResourceDescriptors(\google\api\MonitoredResourceDescriptor $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\logging\v2\ListMonitoredResourceDescriptorsResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\logging\v2\ListMonitoredResourceDescriptorsResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\logging\v2 {

  class ListLogsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $parent = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.ListLogsRequest');

      // OPTIONAL STRING parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \google\logging\v2\ListLogsRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return string
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param string $value
     * @return \google\logging\v2\ListLogsRequest
     */
    public function setParent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\logging\v2\ListLogsRequest
     */
    public function clearPageSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\logging\v2\ListLogsRequest
     */
    public function setPageSize( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\logging\v2\ListLogsRequest
     */
    public function clearPageToken(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\logging\v2\ListLogsRequest
     */
    public function setPageToken( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\logging\v2 {

  class ListLogsResponse extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $log_names = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.logging.v2.ListLogsResponse');

      // REPEATED STRING log_names = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "log_names";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <log_names> has a value
     *
     * @return boolean
     */
    public function hasLogNames(){
      return $this->_has(3);
    }
    
    /**
     * Clear <log_names> value
     *
     * @return \google\logging\v2\ListLogsResponse
     */
    public function clearLogNames(){
      return $this->_clear(3);
    }
    
    /**
     * Get <log_names> value
     *
     * @param int $idx
     * @return string
     */
    public function getLogNames($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <log_names> value
     *
     * @param string $value
     * @return \google\logging\v2\ListLogsResponse
     */
    public function setLogNames( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <log_names>
     *
     * @return string[]
     */
    public function getLogNamesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <log_names>
     *
     * @param string $value
     * @return \google\logging\v2\ListLogsResponse
     */
    public function addLogNames( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\logging\v2\ListLogsResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\logging\v2\ListLogsResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\logging\v2 {

  class LoggingServiceV2GrpcClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param google\logging\v2\DeleteLogRequest $input
     */
    public function DeleteLog(\google\logging\v2\DeleteLogRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.logging.v2.LoggingServiceV2/DeleteLog', $argument, '\google\protobuf\EmptyC::deserialize', $metadata, $options);
    }
    /**
     * @param google\logging\v2\WriteLogEntriesRequest $input
     */
    public function WriteLogEntries(\google\logging\v2\WriteLogEntriesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.logging.v2.LoggingServiceV2/WriteLogEntries', $argument, '\google\logging\v2\WriteLogEntriesResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\logging\v2\ListLogEntriesRequest $input
     */
    public function ListLogEntries(\google\logging\v2\ListLogEntriesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.logging.v2.LoggingServiceV2/ListLogEntries', $argument, '\google\logging\v2\ListLogEntriesResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\logging\v2\ListMonitoredResourceDescriptorsRequest $input
     */
    public function ListMonitoredResourceDescriptors(\google\logging\v2\ListMonitoredResourceDescriptorsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.logging.v2.LoggingServiceV2/ListMonitoredResourceDescriptors', $argument, '\google\logging\v2\ListMonitoredResourceDescriptorsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\logging\v2\ListLogsRequest $input
     */
    public function ListLogs(\google\logging\v2\ListLogsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.logging.v2.LoggingServiceV2/ListLogs', $argument, '\google\logging\v2\ListLogsResponse::deserialize', $metadata, $options);
    }
  }
}
