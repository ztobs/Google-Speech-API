<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/iam/v1/policy.proto
//   Date: 2016-12-21 17:23:53

namespace google\iam\v1 {

  class Policy extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $version = null;
    
    /**  @var \google\iam\v1\Binding[]  */
    public $bindings = array();
    
    /**  @var string */
    public $etag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.v1.Policy');

      // OPTIONAL INT32 version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE bindings = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "bindings";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\iam\v1\Binding';
      $descriptor->addField($f);

      // OPTIONAL BYTES etag = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "etag";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(1);
    }
    
    /**
     * Clear <version> value
     *
     * @return \google\iam\v1\Policy
     */
    public function clearVersion(){
      return $this->_clear(1);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(1);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \google\iam\v1\Policy
     */
    public function setVersion( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <bindings> has a value
     *
     * @return boolean
     */
    public function hasBindings(){
      return $this->_has(4);
    }
    
    /**
     * Clear <bindings> value
     *
     * @return \google\iam\v1\Policy
     */
    public function clearBindings(){
      return $this->_clear(4);
    }
    
    /**
     * Get <bindings> value
     *
     * @param int $idx
     * @return \google\iam\v1\Binding
     */
    public function getBindings($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <bindings> value
     *
     * @param \google\iam\v1\Binding $value
     * @return \google\iam\v1\Policy
     */
    public function setBindings(\google\iam\v1\Binding $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <bindings>
     *
     * @return \google\iam\v1\Binding[]
     */
    public function getBindingsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <bindings>
     *
     * @param \google\iam\v1\Binding $value
     * @return \google\iam\v1\Policy
     */
    public function addBindings(\google\iam\v1\Binding $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <etag> has a value
     *
     * @return boolean
     */
    public function hasEtag(){
      return $this->_has(3);
    }
    
    /**
     * Clear <etag> value
     *
     * @return \google\iam\v1\Policy
     */
    public function clearEtag(){
      return $this->_clear(3);
    }
    
    /**
     * Get <etag> value
     *
     * @return string
     */
    public function getEtag(){
      return $this->_get(3);
    }
    
    /**
     * Set <etag> value
     *
     * @param string $value
     * @return \google\iam\v1\Policy
     */
    public function setEtag( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\iam\v1 {

  class Binding extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $role = null;
    
    /**  @var string[]  */
    public $members = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.v1.Binding');

      // OPTIONAL STRING role = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "role";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING members = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "members";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <role> has a value
     *
     * @return boolean
     */
    public function hasRole(){
      return $this->_has(1);
    }
    
    /**
     * Clear <role> value
     *
     * @return \google\iam\v1\Binding
     */
    public function clearRole(){
      return $this->_clear(1);
    }
    
    /**
     * Get <role> value
     *
     * @return string
     */
    public function getRole(){
      return $this->_get(1);
    }
    
    /**
     * Set <role> value
     *
     * @param string $value
     * @return \google\iam\v1\Binding
     */
    public function setRole( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <members> has a value
     *
     * @return boolean
     */
    public function hasMembers(){
      return $this->_has(2);
    }
    
    /**
     * Clear <members> value
     *
     * @return \google\iam\v1\Binding
     */
    public function clearMembers(){
      return $this->_clear(2);
    }
    
    /**
     * Get <members> value
     *
     * @param int $idx
     * @return string
     */
    public function getMembers($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <members> value
     *
     * @param string $value
     * @return \google\iam\v1\Binding
     */
    public function setMembers( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <members>
     *
     * @return string[]
     */
    public function getMembersList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <members>
     *
     * @param string $value
     * @return \google\iam\v1\Binding
     */
    public function addMembers( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\iam\v1 {

  class PolicyDelta extends \DrSlump\Protobuf\Message {

    /**  @var \google\iam\v1\BindingDelta[]  */
    public $binding_deltas = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.v1.PolicyDelta');

      // REPEATED MESSAGE binding_deltas = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "binding_deltas";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\iam\v1\BindingDelta';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <binding_deltas> has a value
     *
     * @return boolean
     */
    public function hasBindingDeltas(){
      return $this->_has(1);
    }
    
    /**
     * Clear <binding_deltas> value
     *
     * @return \google\iam\v1\PolicyDelta
     */
    public function clearBindingDeltas(){
      return $this->_clear(1);
    }
    
    /**
     * Get <binding_deltas> value
     *
     * @param int $idx
     * @return \google\iam\v1\BindingDelta
     */
    public function getBindingDeltas($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <binding_deltas> value
     *
     * @param \google\iam\v1\BindingDelta $value
     * @return \google\iam\v1\PolicyDelta
     */
    public function setBindingDeltas(\google\iam\v1\BindingDelta $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <binding_deltas>
     *
     * @return \google\iam\v1\BindingDelta[]
     */
    public function getBindingDeltasList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <binding_deltas>
     *
     * @param \google\iam\v1\BindingDelta $value
     * @return \google\iam\v1\PolicyDelta
     */
    public function addBindingDeltas(\google\iam\v1\BindingDelta $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\iam\v1\BindingDelta {

  class Action extends \DrSlump\Protobuf\Enum {
    const ACTION_UNSPECIFIED = 0;
    const ADD = 1;
    const REMOVE = 2;
  }
}
namespace google\iam\v1 {

  class BindingDelta extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\iam\v1\BindingDelta\Action */
    public $action = null;
    
    /**  @var string */
    public $role = null;
    
    /**  @var string */
    public $member = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.v1.BindingDelta');

      // OPTIONAL ENUM action = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "action";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\iam\v1\BindingDelta\Action';
      $descriptor->addField($f);

      // OPTIONAL STRING role = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "role";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING member = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "member";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <action> has a value
     *
     * @return boolean
     */
    public function hasAction(){
      return $this->_has(1);
    }
    
    /**
     * Clear <action> value
     *
     * @return \google\iam\v1\BindingDelta
     */
    public function clearAction(){
      return $this->_clear(1);
    }
    
    /**
     * Get <action> value
     *
     * @return int - \google\iam\v1\BindingDelta\Action
     */
    public function getAction(){
      return $this->_get(1);
    }
    
    /**
     * Set <action> value
     *
     * @param int - \google\iam\v1\BindingDelta\Action $value
     * @return \google\iam\v1\BindingDelta
     */
    public function setAction( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <role> has a value
     *
     * @return boolean
     */
    public function hasRole(){
      return $this->_has(2);
    }
    
    /**
     * Clear <role> value
     *
     * @return \google\iam\v1\BindingDelta
     */
    public function clearRole(){
      return $this->_clear(2);
    }
    
    /**
     * Get <role> value
     *
     * @return string
     */
    public function getRole(){
      return $this->_get(2);
    }
    
    /**
     * Set <role> value
     *
     * @param string $value
     * @return \google\iam\v1\BindingDelta
     */
    public function setRole( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <member> has a value
     *
     * @return boolean
     */
    public function hasMember(){
      return $this->_has(3);
    }
    
    /**
     * Clear <member> value
     *
     * @return \google\iam\v1\BindingDelta
     */
    public function clearMember(){
      return $this->_clear(3);
    }
    
    /**
     * Get <member> value
     *
     * @return string
     */
    public function getMember(){
      return $this->_get(3);
    }
    
    /**
     * Set <member> value
     *
     * @param string $value
     * @return \google\iam\v1\BindingDelta
     */
    public function setMember( $value){
      return $this->_set(3, $value);
    }
  }
}

